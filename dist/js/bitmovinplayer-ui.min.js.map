{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ts/arrayutils.ts","src/ts/audiotrackutils.ts","src/ts/browserutils.ts","src/ts/components/adclickoverlay.ts","src/ts/components/admessagelabel.ts","src/ts/components/adskipbutton.ts","src/ts/components/airplaytogglebutton.ts","src/ts/components/audioqualityselectbox.ts","src/ts/components/audiotracklistbox.ts","src/ts/components/audiotrackselectbox.ts","src/ts/components/bufferingoverlay.ts","src/ts/components/button.ts","src/ts/components/caststatusoverlay.ts","src/ts/components/casttogglebutton.ts","src/ts/components/castuicontainer.ts","src/ts/components/clickoverlay.ts","src/ts/components/closebutton.ts","src/ts/components/component.ts","src/ts/components/container.ts","src/ts/components/controlbar.ts","src/ts/components/errormessageoverlay.ts","src/ts/components/fullscreentogglebutton.ts","src/ts/components/hugeplaybacktogglebutton.ts","src/ts/components/hugereplaybutton.ts","src/ts/components/itemselectionlist.ts","src/ts/components/label.ts","src/ts/components/listbox.ts","src/ts/components/listselector.ts","src/ts/components/metadatalabel.ts","src/ts/components/pictureinpicturetogglebutton.ts","src/ts/components/playbackspeedselectbox.ts","src/ts/components/playbacktimelabel.ts","src/ts/components/playbacktogglebutton.ts","src/ts/components/playbacktoggleoverlay.ts","src/ts/components/recommendationoverlay.ts","src/ts/components/seekbar.ts","src/ts/components/seekbarbufferlevel.ts","src/ts/components/seekbarcontroller.ts","src/ts/components/seekbarlabel.ts","src/ts/components/selectbox.ts","src/ts/components/settingspanel.ts","src/ts/components/settingspanelitem.ts","src/ts/components/settingspanelpage.ts","src/ts/components/settingspanelpagebackbutton.ts","src/ts/components/settingspanelpagenavigatorbutton.ts","src/ts/components/settingspanelpageopenbutton.ts","src/ts/components/settingstogglebutton.ts","src/ts/components/spacer.ts","src/ts/components/subtitlelistbox.ts","src/ts/components/subtitleoverlay.ts","src/ts/components/subtitleselectbox.ts","src/ts/components/subtitlesettings/backgroundcolorselectbox.ts","src/ts/components/subtitlesettings/backgroundopacityselectbox.ts","src/ts/components/subtitlesettings/characteredgeselectbox.ts","src/ts/components/subtitlesettings/fontcolorselectbox.ts","src/ts/components/subtitlesettings/fontfamilyselectbox.ts","src/ts/components/subtitlesettings/fontopacityselectbox.ts","src/ts/components/subtitlesettings/fontsizeselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingslabel.ts","src/ts/components/subtitlesettings/subtitlesettingsmanager.ts","src/ts/components/subtitlesettings/subtitlesettingspanelpage.ts","src/ts/components/subtitlesettings/subtitlesettingsresetbutton.ts","src/ts/components/subtitlesettings/windowcolorselectbox.ts","src/ts/components/subtitlesettings/windowopacityselectbox.ts","src/ts/components/timelinemarkershandler.ts","src/ts/components/titlebar.ts","src/ts/components/togglebutton.ts","src/ts/components/tvnoisecanvas.ts","src/ts/components/uicontainer.ts","src/ts/components/videoqualityselectbox.ts","src/ts/components/volumecontrolbutton.ts","src/ts/components/volumeslider.ts","src/ts/components/volumetogglebutton.ts","src/ts/components/vrtogglebutton.ts","src/ts/components/watermark.ts","src/ts/demofactory.ts","src/ts/dom.ts","src/ts/errorutils.ts","src/ts/eventdispatcher.ts","src/ts/focusvisibilitytracker.ts","src/ts/guid.ts","src/ts/imageloader.ts","src/ts/localization/i18n.ts","src/ts/localization/languages/de.json","src/ts/localization/languages/en.json","src/ts/main.ts","src/ts/mobilev3playerapi.ts","src/ts/playerutils.ts","src/ts/storageutils.ts","src/ts/stringutils.ts","src/ts/subtitleutils.ts","src/ts/timeout.ts","src/ts/uifactory.ts","src/ts/uimanager.ts","src/ts/uiutils.ts","src/ts/volumecontroller.ts","src/ts/vttutils.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","bitmovin","playerui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","ArrayUtils","remove","array","item","index","indexOf","splice","i18n_1","AudioTrackSwitchHandler","player","element","uimanager","_this","addAudioTrack","event","audioTrack","track","listElement","hasItem","id","addItem","i18n","getLocalizer","label","removeAudioTrack","removeItem","selectCurrentAudioTrack","currentAudioTrack","getAudio","selectItem","refreshAudioTracks","audioTracks","getAvailableAudio","audioTrackToListItem","key","synchronizeItems","map","bindSelectionEvent","bindPlayerEvents","prototype","onItemSelected","subscribe","_","value","setAudio","on","PlayerEvent","AudioChanged","SourceUnloaded","PeriodSwitched","AudioAdded","AudioRemoved","getConfig","events","onUpdated","BrowserUtils","Object","defineProperty","windowExists","navigator","userAgent","test","platform","maxTouchPoints","msMaxTouchPoints","clickoverlay_1","AdClickOverlay","_super","__extends","configure","clickThroughCallback","AdStarted","ad","setUrl","clickThroughUrl","clickThroughUrlOpened","adFinishedHandler","AdFinished","AdSkipped","AdError","onClick","pause","ClickOverlay","label_1","stringutils_1","AdMessageLabel","config","mergeConfig","cssClass","text","updateMessageHandler","setText","StringUtils","replaceAdMessagePlaceholders","performLocalization","adStartHandler","uiConfig","message","TimeChanged","adEndHandler","off","Label","button_1","AdSkipButton","untilSkippableMessage","skippableMessage","skipOffset","updateSkipMessageHandler","show","getCurrentTime","disable","enable","skippableAfter","hide","ads","skip","Button","togglebutton_1","AirPlayToggleButton","isAirplayAvailable","showAirplayTargetPicker","console","log","airPlayAvailableHandler","airPlayChangedHandler","isAirplayActive","AirplayAvailable","AirplayChanged","ToggleButton","selectbox_1","AudioQualitySelectBox","cssClasses","selectCurrentAudioQuality","getAudioQuality","updateAudioQualities","audioQualities","getAvailableAudioQualities","clearItems","_i","audioQualities_1","audioQuality","sender","setAudioQuality","AudioQualityChanged","AudioQualityAdded","AudioQualityRemoved","SelectBox","listbox_1","audiotrackutils_1","AudioTrackListBox","ListBox","AudioTrackSelectBox","container_1","component_1","timeout_1","BufferingOverlay","indicators","Component","tag","role","hidden","components","showDelayMs","overlayShowTimeout","Timeout","showOverlay","start","hideOverlay","clear","StallStarted","StallEnded","Play","Playing","Paused","Seek","Seeked","TimeShift","TimeShifted","isStalled","Container","dom_1","eventdispatcher_1","buttonEvents","EventDispatcher","tabIndex","toDomElement","buttonElementAttributes","aria-label","ariaLabel","class","getCssClasses","type","aria-pressed","tabindex","toString","buttonElement","DOM","append","prefixCss","html","onClickEvent","getDomElement","find","dispatch","getEvent","CastStatusOverlay","statusLabel","CastWaitingForDevice","castDeviceName","castPayload","deviceName","CastStarted","CastStopped","CastToggleButton","isCastAvailable","isCasting","castStop","castVideo","castAvailableHander","CastAvailable","uicontainer_1","CastUIContainer","isUiShown","hideUi","onControlsHide","castUiHideTimeout","hideDelay","showUi","onControlsShow","showUiPermanently","showUiWithTimeout","showUiAfterSeek","isPlaying","release","UIContainer","initialize","url","data","open","getUrl","undefined","CloseButton","target","guid_1","componentEvents","onShow","onHide","onHoverChanged","onEnabled","onDisabled","Guid","next","cssPrefix","disabled","isHidden","isDisabled","onComponentShow","onComponentHide","onHoverChangedEvent","setAriaLabel","setAriaAttr","name","attr","defaults","base","assign","flattenedArray","concat","css","join","trim","cssClassOrId","addClass","CLASS_HIDDEN","onHideEvent","removeClass","onShowEvent","isShown","toggleHidden","CLASS_DISABLED","onDisabledEvent","onEnabledEvent","isEnabled","isHovered","hovered","arrayutils_1","componentsToAdd","componentsToRemove","addComponent","component","push","removeComponent","getComponents","removeComponents","_a","slice","updateComponents","shift","innerContainerElement","containerElement","innerContainer","initialComponent","uiutils_1","spacer_1","browserutils_1","ControlBar","hoverStackCount","disableAutoHideWhenHovered","isMobile","UIUtils","traverseTree","Spacer","args","onPreviewControlsHide","cancel","customizeErrorMessage","errorMessages","customMessage","tvnoisecanvas_1","errorutils_1","mobilev3playerapi_1","ErrorMessageOverlay","errorLabel","tvNoiseBackground","TvNoiseCanvas","handleErrorMessage","customizedMessage","messages","isMobileV3PlayerAPI","errorEventHandler","ErrorUtils","defaultMobileV3ErrorMessageTranslator","MobileV3PlayerEvent","PlayerError","SourceError","defaultWebErrorMessageTranslator","SourceLoaded","stop","FullscreenToggleButton","isFullScreenAvailable","isViewModeAvailable","ViewMode","Fullscreen","fullscreenStateHandler","getViewMode","fullscreenAvailabilityChangedHandler","ViewModeChanged","ViewModeAvailabilityChanged","targetViewMode","Inline","setViewMode","playbacktogglebutton_1","HugePlaybackToggleButton","togglePlayback","isPlayInitiated","play","toggleFullscreen","firstPlay","clickTime","doubleClickTime","now","Date","setTimeout","Warning","WarningCode","PLAYBACK_COULD_NOT_BE_STARTED","suppressPlayButtonTransitionAnimation","setTransitionAnimationsEnabled","onToggle","subscribeOnce","isAutoplayEnabled","playback","Boolean","autoplay","isAutoplayUpcoming","getSource","enabled","noTransitionAnimationsClass","hasClass","PlaybackToggleButton","HugeReplayButton","listselector_1","ItemSelectionList","isActive","items","updateDomItems","selectedValue","empty","selectedListItem","listItem","CLASS_SELECTED","deselectItem","this_1","String","onItemSelectedEvent","onItemAddedEvent","selectedItem","onItemRemovedEvent","ListSelector","labelEvents","onTextChanged","tagName","for","labelElement","localizedText","onTextChangedEvent","getText","clearText","isEmpty","removeListBoxDomItem","getComponentForKey","addListBoxDomItem","newItem","getItemForKey","listBoxItemButton_1","buildListBoxItemButton","handleSelectionChange","listBoxElement","refreshSelectedItem","onItemAdded","onItemRemoved","createListBoxDomItems","ListBoxItemButton","c","onClass","offClass","listSelectorEvents","getItemIndex","parseInt","getItems","sortedInsert","__assign","filter","translator","findIndex","entry","getSelectedItem","newItems","forEach","items_1","itemCount","keys","MetadataLabelContent","MetadataLabel","content","toLowerCase","uiconfig","init","Title","metadata","title","Description","description","unload","PictureInPictureToggleButton","isPictureInPictureAvailable","PictureInPicture","pictureInPictureStateHandler","pictureInPictureAvailabilityChangedHandler","PlaybackSpeedSelectBox","defaultPlaybackSpeeds","addDefaultItems","setPlaybackSpeed","parseFloat","setDefaultValue","playbackSpeed","getPlaybackSpeed","setSpeed","PlaybackSpeedChanged","speed","customItems","sort","PlaybackTimeLabelMode","playerutils_1","PlaybackTimeLabel","timeLabelMode","CurrentAndTotalTime","hideInLivePlayback","live","liveCssClass","liveEdgeCssClass","minWidth","liveClickHandler","timeShift","updateLiveState","isLive","updateLiveTimeshiftState","unsubscribe","isTimeshifted","getTimeShift","isTimeshiftAvailable","getMaxTimeShift","isPaused","liveStreamDetector","PlayerUtils","LiveStreamDetector","onLiveChanged","detect","playbackTimeHandler","getDuration","Infinity","setTime","getCurrentTimeRelativeToSeekableRange","width","min-width","updateTimeFormatBasedOnDuration","timeFormat","Math","abs","FORMAT_HHMMSS","FORMAT_MMSS","Ready","playbackSeconds","durationSeconds","currentTime","secondsToTime","totalTime","CurrentTime","TotalTime","RemainingTime","remainingTime","setTimeFormat","onAriaLabel","offAriaLabel","handleClickEvent","isSeeking","playbackStateHandler","PlaybackFinished","isTimeShiftAvailable","CLASS_STOPTOGGLE","timeShiftDetector","TimeShiftAvailabilityDetector","onTimeShiftAvailabilityChanged","onSeek","onSeeked","hugeplaybacktogglebutton_1","PlaybackToggleOverlay","playbackToggleButton","hugereplaybutton_1","RecommendationOverlay","replayButton","clearRecommendations","RecommendationItem","setupRecommendations","recommendations","recommendations_1","itemConfig","itemElement","href","background-image","thumbnail","bgElement","titleElement","timeElement","duration","seekbarcontroller_1","timelinemarkershandler_1","seekbarbufferlevel_1","SeekBar","playbackPositionPercentage","isUserSeeking","seekBarEvents","onSeekPreview","seekWhileScrubbing","scrubbing","seek","position","percentage","maxTimeShift","seekableRangeStart","getSeekableRangeStart","relativeSeekTarget","absoluteSeekTarget","keyStepIncrements","leftRight","upDown","vertical","smoothPlaybackPositionUpdateIntervalMs","snappingRange","enableSeekPreview","hasLabel","getLabel","setAriaSliderMinMax","min","max","setAriaSliderValues","seekBarType","SeekBarType","Live","timeshiftValue","ceil","Vod","ariaValueText","secondsToText","floor","getPlaybackPositionPercentage","getRelativeCurrentTime","updateBufferLevel","bufferLoadedPercentageLevel","getMinBufferLevel","setBufferPosition","configureSeek","setPosition","seekBarBackdrop","SeekBarController","volumeController","setSeekBarControls","Volume","isPlayerSeeking","playbackPositionHandler","forceUpdate","SegmentRequestFinished","setPlaybackPosition","isInInitialStartupState","SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED","isNeitherPausedNorPlaying","configureLivePausedTimeshiftUpdater","onPlayerSeek","setSeeking","onPlayerSeeked","restorePlayingState","subscribeRateLimited","hasTimeShift","switchVisibility","refreshPlaybackPosition","smoothPlaybackPositionUpdater","timeShiftAvailable","PlayerResized","onConfigured","seekbarSnappingRange","setSeekPosition","configureSmoothPlaybackPositionUpdater","initializeTimelineMarkers","timelineMarkerConfig","timelineMarkersHandler","TimelineMarkersHandler","seekBar","seekBarMarkersContainer","pausedTimeshiftUpdater","currentTimeSeekBar","currentTimePlayer","updateIntervalMs","error","PlayerAPINotAvailableError","currentTimeDelta","startSmoothPlaybackPositionUpdater","stopSmoothPlaybackPositionUpdater","seekBarContainer","seekBarBufferLevel","seekBarBufferPosition","seekBarPlaybackPosition","seekBarPlaybackPositionMarker","seekBarSeekPosition","seekBarChapterMarkersContainer","seeking","mouseTouchMoveHandler","preventDefault","vr","stopPropagation","targetPercentage","getOffset","onSeekPreviewEvent","mouseTouchUpHandler","document","snappedChapter","getMarkerAtPosition","onSeekedEvent","isTouchEvent","isTouchSupported","onSeekEvent","getHorizontalOffset","eventPageX","elementOffsetPx","offset","left","widthPx","offsetPx","sanitizeOffset","getVerticalOffset","eventPageY","top","height","changedTouches","pageY","touches","pageX","MouseEvent","warn","percent","totalSize","px","style","transform","-ms-transform","-webkit-transform","scale","CLASS_SEEKING","snappedMarker","seekPositionPercentage","marker","TouchEvent","playerDuration","videoBufferLength","getVideoBufferLength","audioBufferLength","getAudioBufferLength","bufferLength","Number","MAX_VALUE","coerceValueIntoRange","range","cb","arrowKeyControls","currentValue","valueUpdate","controlValue","right","up","down","home","end","seekBarControls","volumeTransition","startTransition","getVolume","finish","bind","domElement","controls","keyCode","KeyCode","LeftArrow","RightArrow","UpArrow","DownArrow","Home","End","Space","imageloader_1","SeekBarLabel","appliedMarkerCssClasses","handleSeekPreview","timeShiftPreview","wallClockTime","targetTimeShift","currentTimeShift","setThumbnail","getThumbnail","time","setTitleText","timeLabel","titleLabel","thumbnailImageLoader","ImageLoader","uiManager","seconds","thumbnailElement","display","load","x","thumbnailCssSprite","thumbnailCssSingleImage","thumbnailCountX","thumbnailCountY","thumbnailIndexX","thumbnailIndexY","y","sizeX","sizeY","offsetX","offsetY","aspectRatio","padding-bottom","background-size","background-position","selectElement","val","optionElement","NavigationDirection","settingspanelpage_1","SettingsPanel","navigationStack","settingsPanelEvents","onSettingsStateChanged","pageTransitionAnimation","activePage","getRootPage","hideHoveredSelectBoxes","hideTimeout","reset","onInactiveEvent","resetNavigation","onActiveEvent","onSettingsStateChangedEvent","updateActivePageClass","getActivePage","setActivePageIndex","setActivePage","getPages","targetPage","navigateToPage","Forwards","popToRootSettingsPanelPage","popSettingsPanelPage","Backwards","rootPageHasActiveSettings","hasActiveSettings","SettingsPanelPage","page","CLASS_ACTIVE_PAGE","resetNavigationOnShow","sourcePage","rootPage","animateNavigation","direction","skipAnimation","pop","settingsPanelDomElement","settingsPanelHTMLElement","get","settingsPanelWidth","scrollWidth","settingsPanelHeight","scrollHeight","targetPageHtmlElement","clone","cloneNode","parentNode","appendChild","targetSettingsPanelWidth","targetSettingsPanelHeight","parentElement","removeChild","forceBrowserReflow","offsetLeft","getComputedItems","setting","selectBox_1","oldDisplay_1","requestAnimationFrame","allItems","apply","videoqualityselectbox_1","audioqualityselectbox_1","playbackspeedselectbox_1","SettingsPanelItem","settingsPanelItemEvents","onActiveChanged","handleConfigItemChanged","minItemsToDisplay","VideoQualitySelectBox","hasAutoItem","playbackSpeedSelectionEnabled","onActiveChangedEvent","settingspanelitem_1","settingsPanelPageEvents","onActive","onInactive","settingsStateChangedHandler","lastShownItem","CLASS_LAST","activeItems","isIOS","isMacIntel","focusToFirstInput","settingspanelpagenavigatorbutton_1","SettingsPanelPageBackButton","popPage","SettingsPanelPageNavigatorButton","container","pushTargetPage","SettingsPanelPageOpenButton","settingspanel_1","SettingsToggleButton","visibleSettingsPanels","settingsPanel","autoHideWhenNoActiveSettings","settingsPanelItemsChangedHandler","subtitleutils_1","SubtitleListBox","SubtitleSwitchHandler","controlbar_1","vttutils_1","SubtitleOverlay","preprocessLabelEventCallback","previewSubtitleActive","previewSubtitle","SubtitleLabel","subtitleManager","ActiveSubtitleManager","subtitleContainerManager","SubtitleRegionContainerManager","CueEnter","generateLabel","cueEnter","removeLabel","addLabel","size","CueUpdate","labelToReplace","cueUpdate","replaceLabel","CueExit","labelToRemove","cueExit","hasCues","subtitleClearHandler","SubtitleEnabled","SubtitleDisabled","CLASS_CONTROLBAR_VISIBLE","configureCea608Captions","row","column","generateImageTagText","image","vtt","region","regionStyle","fontSize","fontLetterSpacing","fontSizeCalculationRequired","updateCEA608FontSize","dummyLabel","font-size","line-height","visibility","dummyLabelCharWidth","dummyLabelCharHeight","fontSizeRatio","subtitleOverlayWidth","subtitleOverlayHeight","CEA608_NUM_COLUMNS","CEA608_NUM_ROWS","gridSlotWidth","letter-spacing","CLASS_CEA_608","CEA608_COLUMN_OFFSET","CEA608_ROW_OFFSET","enablePreviewSubtitleLabel","removePreviewSubtitleLabel","activeSubtitleCueMap","activeSubtitleCueCount","calculateId","addCueToMap","popCueFromMap","activeSubtitleCues","activeSubtitleCue","imageData","imgTag","src","outerHTML","getCues","cue","cueCount","subtitleOverlay","subtitleRegionContainers","getRegion","regionContainerId","regionName","overlaySize","regionContainer","SubtitleRegionContainer","regionContainerId_1","previousLabel","newLabel","labelCount","labelToAdd","VttUtils","setVttRegionStyles","setVttCueBoxStyles","SubtitleSelectBox","subtitlesettingselectbox_1","BackgroundColorSelectBox","setColorAndOpacity","settingsManager","backgroundColor","isSet","backgroundOpacity","toggleOverlayClass","onChanged","property","SubtitleSettingSelectBox","BackgroundOpacitySelectBox","CharacterEdgeSelectBox","characterEdge","FontColorSelectBox","fontColor","fontOpacity","FontFamilySelectBox","fontFamily","FontOpacitySelectBox","FontSizeSelectBox","overlay","currentCssClass","SubtitleSettingsLabel","opener","storageutils_1","SubtitleSettingsManager","_properties","SubtitleSettingsProperty","windowColor","windowOpacity","userSettings","localStorageKey","DummyComponent","instance","propertyName","save","StorageUtils","setObject","getObject","_instance","manager","_manager","_onChanged","_value","onChangedEvent","subtitlesettingsmanager_1","fontsizeselectbox_1","fontfamilyselectbox_1","fontcolorselectbox_1","fontopacityselectbox_1","characteredgeselectbox_1","backgroundcolorselectbox_1","backgroundopacityselectbox_1","windowcolorselectbox_1","windowopacityselectbox_1","subtitlesettingsresetbutton_1","settingspanelpagebackbutton_1","SubtitleSettingsPanelPage","WindowColorSelectBox","WindowOpacitySelectBox","SubtitleSettingsResetButton","getMarkerPositions","markerPosition","getMarkerTime","markerDuration","isNaN","getSeekableRangeRespectingLive","shouldRemoveMarker","shouldProcessMarkers","validToProcess","hasMarkers","markers","getSeekBarWidth","markersContainer","timelineMarkers","configureMarkers","clearMarkers","AdBreakStarted","AdBreakFinished","updateMarkers","updateMarkersDOM","onRelease","hasDuration","intervalMarkerMatch","positionMarkerMatch","removeMarkerFromConfig","_marker","filterRemovedMarkers","seekbarMarker","matchingMarker","removeMarkerFromDOM","updateMarkerDOM","newMarker","createMarkerDOM","getMarkerCssProperties","seekBarWidthPx","positionInPx","cssProperties","markerWidthPx","round","markerClasses","markerElement","data-marker-time","data-marker-title","imageUrl","removeImage","imageElement_1","handler","Destroy","metadatalabel_1","TitleBar","keepHiddenWithoutMetadata","shouldBeShown","hasMetadataText","checkMetadataTextAndUpdateVisibility","toggleButtonEvents","onToggleOn","onToggleOff","defaultConfig","isOff","onState","onToggleEvent","onToggleOnEvent","isOn","onToggleOffEvent","toggle","canvasWidth","canvasHeight","interferenceHeight","lastFrameUpdate","frameInterval","useAnimationFrame","canvas","canvasElement","canvasContext","getContext","noiseAnimationWindowPos","renderFrame","cancelAnimationFrame","frameUpdateHandlerId","clearTimeout","getTime","scheduleNextRender","currentPixelOffset","noiseImage","createImageData","random","putImageData","playerStateChange","userInteractionEventSource","configureUIShowHide","configurePlayerStates","playerState","isFirstTouch","hidingPrevented","hidePlayerStateExceptions","uiHideTimeout","previewHideEventArgs","userInteractionEvents","state","stateClassNames","PlayerState","enumName","STATE_PREFIX","removeStates","Idle","Prepared","Finished","updateState","getState","FULLSCREEN","BUFFERING","REMOTE_CONTROL","CONTROLS_HIDDEN","CONTROLS_SHOWN","updateLayoutSizeClasses","substring","getContainer","createElement","flex","selectCurrentVideoQuality","getVideoQuality","updateVideoQualities","videoQualities","getAvailableVideoQualities","hasAuto","getStreamType","videoQualities_1","videoQuality","setVideoQuality","VideoQualityChanged","VideoQualityAdded","VideoQualityRemoved","volumeslider_1","volumetogglebutton_1","VolumeControlButton","volumeToggleButton","VolumeToggleButton","volumeSlider","VolumeSlider","getVolumeToggleButton","getVolumeSlider","volumeSliderHideTimeout","volumeSliderHovered","seekbar_1","updateVolumeWhileScrubbing","update","hideIfVolumeControlProhibited","setVolumeAriaSliderValues","detectVolumeControlAvailability","muted","volume","dummyVideoElement","volumeLevelTens","toggleMuted","VRToggleButton","isVRConfigured","source","isVRStereoAvailable","vrStateHandler","ev","VR_RENDERING_ERROR","getStereo","vrButtonVisibilityHandler","VRStereoChanged","setStereo","Watermark","vrtogglebutton_1","settingstogglebutton_1","playbacktimelabel_1","airplaytogglebutton_1","errormessageoverlay_1","casttogglebutton_1","fullscreentogglebutton_1","recommendationoverlay_1","caststatusoverlay_1","watermark_1","subtitleoverlay_1","seekbarlabel_1","playbacktoggleoverlay_1","pictureinpicturetogglebutton_1","uimanager_1","titlebar_1","bufferingoverlay_1","subtitlelistbox_1","audiotracklistbox_1","uifactory_1","DemoFactory","buildDemoWithSeparateAudioSubtitlesButtons","UIManager","ui","UIFactory","modernSmallScreenAdsUI","condition","context","documentWidth","isAd","adRequiresUi","modernAdsUI","modernSmallScreenUI","modernUIWithSeparateAudioSubtitlesButtons","subtitleListBox","subtitleSettingsPanel","audioTrackListBox","audioTrackSettingsPanel","controlBar","something","attributes","Array","HTMLElement","elements","Document","attributeName","attributeValue","setAttribute","selector","findChildElements","findChildElementsOfElement","childElements","querySelectorAll","allChildElements","inputElements","focus","scrollTo","arguments","setHtml","getHtml","innerHTML","HTMLSelectElement","HTMLInputElement","attribute","setAttr","getAttr","removeAttr","removeAttribute","getAttribute","dataAttribute","setData","getData","childElement","parent","elementRect","getBoundingClientRect","htmlRect","body","offsetWidth","offsetHeight","eventName","eventHandler","split","addEventListener","removeEventListener","className","classList","classNames","add","replace","RegExp","contains","propertyNameOrCollection","setCss","getCss","propertyValueCollection","setCssCollection","getComputedStyle","ruleValueCollection","defaultErrorMessages","1000","1001","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1300","1301","1302","1303","1304","1400","1401","1402","1403","1404","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2100","2101","3000","3001","3002","3003","3004","3100","errorMessage","listeners","listener","EventListenerWrapper","rateMs","RateLimitedEventListenerWrapper","subscribedListener","unsubscribeAll","listenersToRemove","listeners_1","fire","isOnce","listenersToRemove_1","listenerToRemove","once","eventListener","startRateLimiting","rateLimitTimout","lastSeenEvent","fireSuper","rateLimitingEventListener","shouldFireEvent","isBitmovinUi","bitmovinUiPrefix","isHtmlElement","DOMTokenList","FocusVisibleCssClassName","FocusVisibilityTracker","lastInteractionWasKeyboard","onKeyDown","metaKey","altKey","ctrlKey","onMouseOrPointerOrTouch","onFocus","onBlur","eventHandlerMap","mousedown","pointerdown","touchstart","keydown","blur","registerEventListeners","event_1","unregisterEventListeners","event_2","guid","loadedCallback","loaded","callLoadedCallback","state_1","de_json_1","__importDefault","en_json_1","defaultVocabularies","en","default","de","defaultLocalizationConfig","language","vocabularies","I18n","setConfig","mergedConfig","detectBrowserLanguage","mergeVocabulariesWithDefaultVocabularies","initializeLanguage","initializeVocabulary","containsLanguage","hasOwnProperty","rawVocabularies","reduce","mergedVocabularies","vocabulary","browserLanguageDetectionEnabled","userLanguage","shortenedUserLanguage","vocab","lang","replaceVariableWithPlaceholderIfExists","matches","match","m","str","vocabularyString","settings.video.quality","settings.audio.quality","settings.audio.track","playPause","close","settings.audio.mute","settings.audio.volume","pictureInPicture","appleAirplay","googleCast","settings","fullscreen","settings.subtitles","settings.subtitles.font.size","settings.subtitles.font.family","settings.subtitles.font.color","settings.subtitles.font.opacity","settings.subtitles.characterEdge","settings.subtitles.background.color","settings.subtitles.background.opacity","settings.subtitles.window.color","settings.subtitles.window.opacity","settings.time.hours","settings.time.minutes","settings.time.seconds","back","replay","ads.remainingTime","colors.white","colors.black","colors.red","colors.green","colors.blue","colors.yellow","subtitle.example","subtitle.select","playingOn","connectingTo","watermarkLink","seekBar.value","seekBar.timeshift","seekBar.durationText","colors.cyan","colors.magenta","settings.subtitles.characterEdge.raised","settings.subtitles.characterEdge.depressed","settings.subtitles.characterEdge.uniform","settings.subtitles.characterEdge.dropshadowed","settings.subtitles.font.family.monospacedserif","settings.subtitles.font.family.proportionalserif","settings.subtitles.font.family.monospacedsansserif","settings.subtitles.font.family.proportionalsansserif","settings.subtitles.font.family.casual","settings.subtitles.font.family.cursive","settings.subtitles.font.family.smallcapital","auto","normal","version","enumerable","UIInstanceManager","demofactory_1","itemselectionlist_1","audiotrackselectbox_1","subtitleselectbox_1","volumecontrolbutton_1","adskipbutton_1","admessagelabel_1","adclickoverlay_1","castuicontainer_1","closebutton_1","subtitlesettingslabel_1","settingspanelpageopenbutton_1","subtitlesettingspanelpage_1","TypeError","hasEnded","defaultValue","getSeekableRange","currentTimeshift","maxTimeshift","timeShiftAvailabilityChangedEvent","timeShiftAvailableNow","liveChangedEvent","liveDetector","isAndroid","isChrome","DurationChanged","liveNow","hasLocalStorage","hasLocalStorageCache","storage","setItem","DOMException","localStorage","getItem","JSON","stringify","json","parse","totalSeconds","format","isNegative","hours","minutes","leftPadWithZeros","num","substr","adMessage","adMessagePlaceholderRegex","formatString","formatNumber","formatStringValidationRegex","leadingZeroesRegex","decimalPlacesRegex","leadingZeroes","leadingZeroesMatches","numDecimalPlaces","decimalPlacesMatches","timeString","toFixed","addSubtitle","subtitle","removeSubtitle","selectCurrentSubtitle","subtitles","currentSubtitle","list","SUBTITLES_OFF_KEY","clearSubtitles","refreshSubtitles","offListItem","subtitleToListItem","__spreadArrays","SubtitleAdded","SubtitleRemoved","delay","callback","repeat","timeoutOrIntervalId","active","clearInternal","setInterval","clearInterval","buildDefaultUI","buildModernUI","buildDefaultSmallScreenUI","buildModernSmallScreenUI","buildDefaultCastReceiverUI","buildModernCastReceiverUI","modernUI","mainSettingsPanelPage","subtitleSettingsPanelPage","subtitleSelectBox","subtitleSettingsOpenButton","modernCastReceiverUI","getAllPropertyNames","names","newNames","getOwnPropertyNames","getPrototypeOf","volumecontroller_1","focusvisibilitytracker_1","playerUiOrUiVariants","onUiVariantResolve","playerUi","uiVariants","managerPlayerWrapper","PlayerWrapper","autoUiVariantResolve","VolumeController","getPlayer","updateConfig","playerSourceConfig","playerSourceUiConfig","updateSource","wrappedPlayer","PlaylistTransition","uiContainerElement","uiInstanceManagers","uiVariantsWithoutCondition","uiVariant","InternalUIInstanceManager","adStartedEvent","resolveUiVariant","isLinear","linearAd","requestsUi","currentUi","getWrappedPlayer","fireEventInUI","focusVisibilityTracker","localize","setLocalizationConfig","localizationConfig","getUiVariants","switchToUiVariant","uiVariantIndex","nextUi","uiVariantChanged","getUI","isConfigured","addUi","defaultContext","isFullscreen","clientWidth","switchingContext","nextUiVariant","dom","configureControls","releaseUi","releaseControls","clearEventHandlers","uiInstanceManager","getTimelineMarkers","addTimelineMarker","timelineMarker","removeTimelineMarker","playerWrapper","configureControlsTree","configured","configuredComponents","configuredComponents_1","constructor","releaseControlsTree","released","isReleased","childComponent","eventHandlers","objectProtoPropertyNames","namesToIgnore","members","methods","properties","members_1","member","wrapper","methods_1","method","_b","properties_1","propertyDescriptor","propertyDescriptor_1","getOwnPropertyDescriptor","set","eventType","playerEventData","timestamp","uiSourced","visit","recursiveTreeWalker","storeVolume","VolumeChanged","Muted","Unmuted","setVolume","issuerName","setMuted","mute","unmute","isMuted","recallVolume","storedVolume","VolumeTransition","playerMuted","playerVolume","uiMuted","uiVolume","controller","Direction","lineCount","VttVerticalWriting","DirectionPair","Map","Top","Bottom","Left","Right","setDefaultVttStyles","cueContainerDom","setVttLineAlign","relativeCueBoxPosition","lineAlign","setCssForCenterLineAlign","setCssForEndLineAlign","setVttLine","subtitleOverLaySize","overlayReferenceEdge","line","relativeLinePosition","snapToLines","targetLine","setVttWritingDirectionAndCueBoxPositioning","subtitleOverlaySize","GrowingRight","setCueBoxPositionForVerticalWriting","GrowingLeft","writingMode","setVttPositionAlign","positionAlign","countLines","innerHtml","opositeToOverlayReferenceEdge","cueContainer","textAlign","align","containerSize","regionContainerDom","regionPositionX","viewportAnchorX","regionAnchorX","regionPositionY","viewportAnchorY","lines","regionAnchorY"],"mappings":"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","file":"bitmovinplayer-ui.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export namespace ArrayUtils {\r\n  /**\r\n   * Removes an item from an array.\r\n   * @param array the array that may contain the item to remove\r\n   * @param item the item to remove from the array\r\n   * @returns {any} the removed item or null if it wasn't part of the array\r\n   */\r\n  export function remove<T>(array: T[], item: T): T | null {\r\n    let index = array.indexOf(item);\r\n\r\n    if (index > -1) {\r\n      return array.splice(index, 1)[0];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\r\nimport { UIInstanceManager } from './uimanager';\r\nimport { AudioTrackEvent, PlayerAPI, AudioTrack } from 'bitmovin-player';\r\nimport { i18n } from './localization/i18n';\r\n\r\n/**\r\n * Helper class to handle all audio tracks related events\r\n *\r\n * This class listens to player events as well as the `ListSelector` event if selection changed\r\n */\r\nexport class AudioTrackSwitchHandler {\r\n\r\n  private player: PlayerAPI;\r\n  private listElement: ListSelector<ListSelectorConfig>;\r\n  private uimanager: UIInstanceManager;\r\n\r\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\r\n    this.player = player;\r\n    this.listElement = element;\r\n    this.uimanager = uimanager;\r\n\r\n    this.bindSelectionEvent();\r\n    this.bindPlayerEvents();\r\n    this.refreshAudioTracks();\r\n  }\r\n\r\n  private bindSelectionEvent(): void {\r\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\r\n      this.player.setAudio(value);\r\n    });\r\n  }\r\n\r\n  private bindPlayerEvents(): void {\r\n    // Update selection when selected track has changed\r\n    this.player.on(this.player.exports.PlayerEvent.AudioChanged, this.selectCurrentAudioTrack);\r\n    // Update tracks when source goes away\r\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.refreshAudioTracks);\r\n    // Update tracks when the period within a source changes\r\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshAudioTracks);\r\n    // Update tracks when a track is added or removed\r\n    this.player.on(this.player.exports.PlayerEvent.AudioAdded, this.addAudioTrack);\r\n    this.player.on(this.player.exports.PlayerEvent.AudioRemoved, this.removeAudioTrack);\r\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshAudioTracks);\r\n  }\r\n\r\n  private addAudioTrack = (event: AudioTrackEvent) => {\r\n    const audioTrack = event.track;\r\n    if (!this.listElement.hasItem(audioTrack.id)) {\r\n      this.listElement.addItem(audioTrack.id, i18n.getLocalizer(audioTrack.label), true);\r\n    }\r\n  };\r\n\r\n  private removeAudioTrack = (event: AudioTrackEvent) => {\r\n    const audioTrack = event.track;\r\n    if (this.listElement.hasItem(audioTrack.id)) {\r\n      this.listElement.removeItem(audioTrack.id);\r\n    }\r\n  };\r\n\r\n  private selectCurrentAudioTrack = () => {\r\n    let currentAudioTrack = this.player.getAudio();\r\n\r\n    // HLS streams don't always provide this, so we have to check\r\n    if (currentAudioTrack) {\r\n      this.listElement.selectItem(currentAudioTrack.id);\r\n    }\r\n  };\r\n\r\n  private refreshAudioTracks = () => {\r\n    const audioTracks = this.player.getAvailableAudio();\r\n    const audioTrackToListItem = (audioTrack: AudioTrack): ListItem => {\r\n      return { key: audioTrack.id, label: audioTrack.label };\r\n    };\r\n\r\n    this.listElement.synchronizeItems(audioTracks.map(audioTrackToListItem));\r\n    this.selectCurrentAudioTrack();\r\n  };\r\n}\r\n","export class BrowserUtils {\r\n\r\n  // isMobile only needs to be evaluated once (it cannot change during a browser session)\r\n  // Mobile detection according to Mozilla recommendation: \"In summary, we recommend looking for the string “Mobi”\r\n  // anywhere in the User Agent to detect a mobile device.\"\r\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\r\n  static get isMobile(): boolean {\r\n    if (!this.windowExists()) {\r\n      return false;\r\n    }\r\n    return navigator && navigator.userAgent && /Mobi/.test(navigator.userAgent);\r\n  }\r\n\r\n  static get isChrome(): boolean {\r\n    if (!this.windowExists()) {\r\n      return false;\r\n    }\r\n    return navigator && navigator.userAgent && /Chrome/.test(navigator.userAgent);\r\n  }\r\n\r\n  static get isAndroid(): boolean {\r\n    if (!this.windowExists()) {\r\n      return false;\r\n    }\r\n    return navigator && navigator.userAgent && /Android/.test(navigator.userAgent);\r\n  }\r\n\r\n  static get isIOS(): boolean {\r\n    if (!this.windowExists()) {\r\n      return false;\r\n    }\r\n    return navigator && navigator.userAgent && /iPad|iPhone|iPod/.test(navigator.userAgent);\r\n  }\r\n\r\n  static get isMacIntel(): boolean {\r\n    if (!this.windowExists()) {\r\n      return false;\r\n    }\r\n    return navigator && navigator.userAgent && navigator.platform === 'MacIntel';\r\n  }\r\n\r\n  // https://hacks.mozilla.org/2013/04/detecting-touch-its-the-why-not-the-how/\r\n  static get isTouchSupported() {\r\n    if (!this.windowExists()) {\r\n      return false;\r\n    }\r\n    return 'ontouchstart' in window || navigator && navigator.userAgent && (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);\r\n  }\r\n\r\n  private static windowExists(): boolean {\r\n    return typeof window !== 'undefined';\r\n  }\r\n}\r\n","import { ClickOverlay } from './clickoverlay';\r\nimport { UIInstanceManager } from '../uimanager';\r\nimport { Ad, AdEvent, PlayerAPI } from 'bitmovin-player';\r\n\r\n/**\r\n * A simple click capture overlay for clickThroughUrls of ads.\r\n */\r\nexport class AdClickOverlay extends ClickOverlay {\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let clickThroughCallback: () => void = null;\r\n\r\n    player.on(player.exports.PlayerEvent.AdStarted, (event: AdEvent) => {\r\n      let ad = event.ad;\r\n      this.setUrl(ad.clickThroughUrl);\r\n      clickThroughCallback = ad.clickThroughUrlOpened;\r\n    });\r\n\r\n    // Clear click-through URL when ad has finished\r\n    let adFinishedHandler = () => {\r\n      this.setUrl(null);\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.AdFinished, adFinishedHandler);\r\n    player.on(player.exports.PlayerEvent.AdSkipped, adFinishedHandler);\r\n    player.on(player.exports.PlayerEvent.AdError, adFinishedHandler);\r\n\r\n    this.onClick.subscribe(() => {\r\n      // Pause the ad when overlay is clicked\r\n      player.pause('ui-ad-click-overlay');\r\n\r\n      if (clickThroughCallback) {\r\n        clickThroughCallback();\r\n      }\r\n    });\r\n  }\r\n}\r\n","import {Label, LabelConfig} from './label';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {StringUtils} from '../stringutils';\r\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * A label that displays a message about a running ad, optionally with a countdown.\r\n */\r\nexport class AdMessageLabel extends Label<LabelConfig> {\r\n\r\n  constructor(config: LabelConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-label-ad-message',\r\n      text: i18n.getLocalizer('ads.remainingTime') ,\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let config = this.getConfig();\r\n    let text = config.text;\r\n\r\n    let updateMessageHandler = () => {\r\n      this.setText(StringUtils.replaceAdMessagePlaceholders(i18n.performLocalization(text), null, player));\r\n    };\r\n\r\n    let adStartHandler = (event: AdEvent) => {\r\n      let uiConfig = (event.ad as LinearAd).uiConfig;\r\n      text = uiConfig && uiConfig.message || config.text;\r\n\r\n      updateMessageHandler();\r\n\r\n      player.on(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\r\n    };\r\n\r\n    let adEndHandler = () => {\r\n      player.off(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\r\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\r\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\r\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\r\n  }\r\n}","import { ButtonConfig, Button } from './button';\r\nimport { UIInstanceManager } from '../uimanager';\r\nimport { StringUtils } from '../stringutils';\r\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\r\n\r\n/**\r\n * Configuration interface for the {@link AdSkipButton}.\r\n */\r\nexport interface AdSkipButtonConfig extends ButtonConfig {\r\n  /**\r\n   * Message which gets displayed during the countdown is active.\r\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\r\n   */\r\n  untilSkippableMessage?: string;\r\n  /**\r\n   * Message displayed when the ad is skippable.\r\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\r\n   */\r\n  skippableMessage?: string;\r\n}\r\n\r\n/**\r\n * A button that is displayed during ads and can be used to skip the ad.\r\n */\r\nexport class AdSkipButton extends Button<AdSkipButtonConfig> {\r\n\r\n  constructor(config: AdSkipButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, <AdSkipButtonConfig>{\r\n      cssClass: 'ui-button-ad-skip',\r\n      untilSkippableMessage: 'Skip ad in {remainingTime}',\r\n      skippableMessage: 'Skip ad',\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let config = this.getConfig();\r\n    let untilSkippableMessage = config.untilSkippableMessage;\r\n    let skippableMessage = config.skippableMessage;\r\n    let skipOffset = -1;\r\n\r\n    let updateSkipMessageHandler = () => {\r\n      this.show();\r\n\r\n      // Update the skip message on the button\r\n      if (player.getCurrentTime() < skipOffset) {\r\n        this.setText(StringUtils.replaceAdMessagePlaceholders(untilSkippableMessage, skipOffset, player));\r\n        this.disable();\r\n      } else {\r\n        this.setText(skippableMessage);\r\n        this.enable();\r\n      }\r\n    };\r\n\r\n    let adStartHandler = (event: AdEvent) => {\r\n      let ad = event.ad as LinearAd;\r\n      skipOffset = ad.skippableAfter;\r\n      untilSkippableMessage = ad.uiConfig && ad.uiConfig.untilSkippableMessage || config.untilSkippableMessage;\r\n      skippableMessage = ad.uiConfig && ad.uiConfig.skippableMessage || config.skippableMessage;\r\n\r\n      // Display this button only if ad is skippable.\r\n      // Non-skippable ads will return -1 for skippableAfter for player version < v8.3.0.\r\n      if (typeof skipOffset === 'number' && skipOffset >= 0) {\r\n        updateSkipMessageHandler();\r\n        player.on(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\r\n      } else {\r\n        this.hide();\r\n      }\r\n    };\r\n\r\n    let adEndHandler = () => {\r\n      player.off(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\r\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\r\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\r\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\r\n\r\n    this.onClick.subscribe(() => {\r\n      // Try to skip the ad (this only works if it is skippable so we don't need to take extra care of that here)\r\n      player.ads.skip();\r\n    });\r\n  }\r\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * A button that toggles Apple AirPlay.\r\n */\r\nexport class AirPlayToggleButton extends ToggleButton<ToggleButtonConfig> {\r\n\r\n  constructor(config: ToggleButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-airplaytogglebutton',\r\n      text: i18n.getLocalizer('appleAirplay'),\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    if (!player.isAirplayAvailable) {\r\n      // If the player does not support Airplay (player 7.0), we just hide this component and skip configuration\r\n      this.hide();\r\n      return;\r\n    }\r\n\r\n    this.onClick.subscribe(() => {\r\n      if (player.isAirplayAvailable()) {\r\n        player.showAirplayTargetPicker();\r\n      } else {\r\n        if (console) {\r\n          console.log('AirPlay unavailable');\r\n        }\r\n      }\r\n    });\r\n\r\n    const airPlayAvailableHandler = () => {\r\n      if (player.isAirplayAvailable()) {\r\n        this.show();\r\n      } else {\r\n        this.hide();\r\n      }\r\n    };\r\n\r\n    const airPlayChangedHandler = () => {\r\n      if (player.isAirplayActive()) {\r\n        this.on();\r\n      } else {\r\n        this.off();\r\n      }\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.AirplayAvailable, airPlayAvailableHandler);\r\n    player.on(player.exports.PlayerEvent.AirplayChanged, airPlayChangedHandler);\r\n\r\n    // Startup init\r\n    airPlayAvailableHandler(); // Hide button if AirPlay is not available\r\n    airPlayChangedHandler();\r\n  }\r\n}","import {SelectBox} from './selectbox';\r\nimport {ListSelectorConfig} from './listselector';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * A select box providing a selection between 'auto' and the available audio qualities.\r\n */\r\nexport class AudioQualitySelectBox extends SelectBox {\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['ui-audioqualityselectbox'],\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let selectCurrentAudioQuality = () => {\r\n      this.selectItem(player.getAudioQuality().id);\r\n    };\r\n\r\n    let updateAudioQualities = () => {\r\n      let audioQualities = player.getAvailableAudioQualities();\r\n\r\n      this.clearItems();\r\n\r\n      // Add entry for automatic quality switching (default setting)\r\n      this.addItem('auto', i18n.getLocalizer('auto'));\r\n\r\n      // Add audio qualities\r\n      for (let audioQuality of audioQualities) {\r\n        this.addItem(audioQuality.id, audioQuality.label);\r\n      }\r\n\r\n      // Select initial quality\r\n      selectCurrentAudioQuality();\r\n    };\r\n\r\n    this.onItemSelected.subscribe((sender: AudioQualitySelectBox, value: string) => {\r\n      player.setAudioQuality(value);\r\n    });\r\n\r\n    // Update qualities when audio track has changed\r\n    player.on(player.exports.PlayerEvent.AudioChanged, updateAudioQualities);\r\n    // Update qualities when source goes away\r\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateAudioQualities);\r\n    // Update qualities when the period within a source changes\r\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateAudioQualities);\r\n    // Update quality selection when quality is changed (from outside)\r\n    player.on(player.exports.PlayerEvent.AudioQualityChanged, selectCurrentAudioQuality);\r\n    if ((player.exports.PlayerEvent as any).AudioQualityAdded) {\r\n      // Update qualities when their availability changed\r\n      // TODO: remove any cast after next player release\r\n      player.on((player.exports.PlayerEvent as any).AudioQualityAdded, updateAudioQualities);\r\n      player.on((player.exports.PlayerEvent as any).AudioQualityRemoved, updateAudioQualities);\r\n    }\r\n\r\n    uimanager.getConfig().events.onUpdated.subscribe(updateAudioQualities);\r\n  }\r\n}","import {ListBox} from './listbox';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\n\r\n/**\r\n * A element that is similar to a select box where the user can select a subtitle\r\n */\r\nexport class AudioTrackListBox extends ListBox {\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n    new AudioTrackSwitchHandler(player, this, uimanager);\r\n  }\r\n}\r\n","import {SelectBox} from './selectbox';\r\nimport {ListSelectorConfig} from './listselector';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\n\r\n/**\r\n * A select box providing a selection between available audio tracks (e.g. different languages).\r\n */\r\nexport class AudioTrackSelectBox extends SelectBox {\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['ui-audiotrackselectbox'],\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    new AudioTrackSwitchHandler(player, this, uimanager);\r\n  }\r\n}","import {ContainerConfig, Container} from './container';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {Component, ComponentConfig} from './component';\r\nimport {Timeout} from '../timeout';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\n\r\n/**\r\n * Configuration interface for the {@link BufferingOverlay} component.\r\n */\r\nexport interface BufferingOverlayConfig extends ContainerConfig {\r\n  /**\r\n   * Delay in milliseconds after which the buffering overlay will be displayed. Useful to bypass short stalls without\r\n   * displaying the overlay. Set to 0 to display the overlay instantly.\r\n   * Default: 1000ms (1 second)\r\n   */\r\n  showDelayMs?: number;\r\n}\r\n\r\n/**\r\n * Overlays the player and displays a buffering indicator.\r\n */\r\nexport class BufferingOverlay extends Container<BufferingOverlayConfig> {\r\n\r\n  private indicators: Component<ComponentConfig>[];\r\n\r\n  constructor(config: BufferingOverlayConfig = {}) {\r\n    super(config);\r\n\r\n    this.indicators = [\r\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\r\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\r\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\r\n    ];\r\n\r\n    this.config = this.mergeConfig(config, <BufferingOverlayConfig>{\r\n      cssClass: 'ui-buffering-overlay',\r\n      hidden: true,\r\n      components: this.indicators,\r\n      showDelayMs: 1000,\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let config = this.getConfig();\r\n\r\n    let overlayShowTimeout = new Timeout(config.showDelayMs, () => {\r\n      this.show();\r\n    });\r\n\r\n    let showOverlay = () => {\r\n      overlayShowTimeout.start();\r\n    };\r\n\r\n    let hideOverlay = () => {\r\n      overlayShowTimeout.clear();\r\n      this.hide();\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.StallStarted, showOverlay);\r\n    player.on(player.exports.PlayerEvent.StallEnded, hideOverlay);\r\n    player.on(player.exports.PlayerEvent.Play, showOverlay);\r\n    player.on(player.exports.PlayerEvent.Playing, hideOverlay);\r\n    player.on(player.exports.PlayerEvent.Paused, hideOverlay);\r\n    player.on(player.exports.PlayerEvent.Seek, showOverlay);\r\n    player.on(player.exports.PlayerEvent.Seeked, hideOverlay);\r\n    player.on(player.exports.PlayerEvent.TimeShift, showOverlay);\r\n    player.on(player.exports.PlayerEvent.TimeShifted, hideOverlay);\r\n    player.on(player.exports.PlayerEvent.SourceUnloaded, hideOverlay);\r\n\r\n    // Show overlay if player is already stalled at init\r\n    if (player.isStalled()) {\r\n      this.show();\r\n    }\r\n  }\r\n}\r\n","import {ComponentConfig, Component} from './component';\r\nimport {DOM} from '../dom';\r\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\r\nimport { LocalizableText , i18n } from '../localization/i18n';\r\n\r\n/**\r\n * Configuration interface for a {@link Button} component.\r\n */\r\nexport interface ButtonConfig extends ComponentConfig {\r\n  /**\r\n   * The text as string or localize callback on the button.\r\n   */\r\n  text?: LocalizableText;\r\n}\r\n\r\n/**\r\n * A simple clickable button.\r\n */\r\nexport class Button<Config extends ButtonConfig> extends Component<Config> {\r\n\r\n  private buttonEvents = {\r\n    onClick: new EventDispatcher<Button<Config>, NoArgs>(),\r\n  };\r\n\r\n  constructor(config: Config) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-button',\r\n      role: 'button',\r\n      tabIndex: 0,\r\n    } as Config, this.config);\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    const buttonElementAttributes: { [name: string]: string } = {\r\n      'id': this.config.id,\r\n      'aria-label': i18n.performLocalization(this.config.ariaLabel || this.config.text),\r\n      'class': this.getCssClasses(),\r\n      'type' : 'button',\r\n      /**\r\n      * WCAG20 standard to display if a button is pressed or not\r\n      */\r\n      'aria-pressed': 'false',\r\n      'tabindex': this.config.tabIndex.toString(),\r\n    };\r\n\r\n    if (this.config.role != null) {\r\n      buttonElementAttributes['role'] = this.config.role;\r\n    }\r\n\r\n    // Create the button element with the text label\r\n    let buttonElement = new DOM('button', buttonElementAttributes).append(new DOM('span', {\r\n      'class': this.prefixCss('label'),\r\n    }).html(i18n.performLocalization(this.config.text)));\r\n\r\n    // Listen for the click event on the button element and trigger the corresponding event on the button component\r\n    buttonElement.on('click', () => {\r\n      this.onClickEvent();\r\n    });\r\n\r\n    return buttonElement;\r\n  }\r\n\r\n  /**\r\n   * Sets text on the label of the button.\r\n   * @param text the text to put into the label of the button\r\n   */\r\n  setText(text: LocalizableText): void {\r\n    this.getDomElement().find('.' + this.prefixCss('label')).html(i18n.performLocalization(text));\r\n  }\r\n\r\n  protected onClickEvent() {\r\n    this.buttonEvents.onClick.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the button is clicked.\r\n   * @returns {Event<Button<Config>, NoArgs>}\r\n   */\r\n  get onClick(): Event<Button<Config>, NoArgs> {\r\n    return this.buttonEvents.onClick.getEvent();\r\n  }\r\n}\r\n","import {ContainerConfig, Container} from './container';\r\nimport {Label, LabelConfig} from './label';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport { CastStartedEvent, CastWaitingForDeviceEvent, PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * Overlays the player and displays the status of a Cast session.\r\n */\r\nexport class CastStatusOverlay extends Container<ContainerConfig> {\r\n\r\n  private statusLabel: Label<LabelConfig>;\r\n\r\n  constructor(config: ContainerConfig = {}) {\r\n    super(config);\r\n\r\n    this.statusLabel = new Label<LabelConfig>({ cssClass: 'ui-cast-status-label' });\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-cast-status-overlay',\r\n      components: [this.statusLabel],\r\n      hidden: true,\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice,\r\n      (event: CastWaitingForDeviceEvent) => {\r\n        this.show();\r\n        // Get device name and update status text while connecting\r\n        let castDeviceName = event.castPayload.deviceName;\r\n        this.statusLabel.setText(i18n.getLocalizer('connectingTo', { castDeviceName }));\r\n      });\r\n    player.on(player.exports.PlayerEvent.CastStarted, (event: CastStartedEvent) => {\r\n      // Session is started or resumed\r\n      // For cases when a session is resumed, we do not receive the previous events and therefore show the status panel\r\n      // here too\r\n      this.show();\r\n      let castDeviceName = event.deviceName;\r\n      this.statusLabel.setText(i18n.getLocalizer('playingOn', { castDeviceName }));\r\n    });\r\n    player.on(player.exports.PlayerEvent.CastStopped, (event) => {\r\n      // Cast session gone, hide the status panel\r\n      this.hide();\r\n    });\r\n  }\r\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * A button that toggles casting to a Cast receiver.\r\n */\r\nexport class CastToggleButton extends ToggleButton<ToggleButtonConfig> {\r\n\r\n  constructor(config: ToggleButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-casttogglebutton',\r\n      text: i18n.getLocalizer('googleCast'),\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.onClick.subscribe(() => {\r\n      if (player.isCastAvailable()) {\r\n        if (player.isCasting()) {\r\n          player.castStop();\r\n        } else {\r\n          player.castVideo();\r\n        }\r\n      } else {\r\n        if (console) {\r\n          console.log('Cast unavailable');\r\n        }\r\n      }\r\n    });\r\n\r\n    let castAvailableHander = () => {\r\n      if (player.isCastAvailable()) {\r\n        this.show();\r\n      } else {\r\n        this.hide();\r\n      }\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.CastAvailable, castAvailableHander);\r\n\r\n    // Toggle button 'on' state\r\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice, () => {\r\n      this.on();\r\n    });\r\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\r\n      // When a session is resumed, there is no CastStart event, so we also need to toggle here for such cases\r\n      this.on();\r\n    });\r\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\r\n      this.off();\r\n    });\r\n\r\n    // Startup init\r\n    castAvailableHander(); // Hide button if Cast not available\r\n    if (player.isCasting()) {\r\n      this.on();\r\n    }\r\n  }\r\n}","import {UIContainer, UIContainerConfig} from './uicontainer';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {Timeout} from '../timeout';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\n\r\n/**\r\n * The base container for Cast receivers that contains all of the UI and takes care that the UI is shown on\r\n * certain playback events.\r\n */\r\nexport class CastUIContainer extends UIContainer {\r\n\r\n  private castUiHideTimeout: Timeout;\r\n\r\n  constructor(config: UIContainerConfig) {\r\n    super(config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let config = this.getConfig();\r\n\r\n    /*\r\n     * Show UI on Cast devices at certain playback events\r\n     *\r\n     * Since a Cast receiver does not have a direct HCI, we show the UI on certain playback events to give the user\r\n     * a chance to see on the screen what's going on, e.g. on play/pause or a seek the UI is shown and the user can\r\n     * see the current time and position on the seek bar.\r\n     * The UI is shown permanently while playback is paused, otherwise hides automatically after the configured\r\n     * hide delay time.\r\n     */\r\n\r\n    let isUiShown = false;\r\n\r\n    let hideUi = () => {\r\n      uimanager.onControlsHide.dispatch(this);\r\n      isUiShown = false;\r\n    };\r\n\r\n    this.castUiHideTimeout = new Timeout(config.hideDelay, hideUi);\r\n\r\n    let showUi = () => {\r\n      if (!isUiShown) {\r\n        uimanager.onControlsShow.dispatch(this);\r\n        isUiShown = true;\r\n      }\r\n    };\r\n\r\n    let showUiPermanently = () => {\r\n      showUi();\r\n      this.castUiHideTimeout.clear();\r\n    };\r\n\r\n    let showUiWithTimeout = () => {\r\n      showUi();\r\n      this.castUiHideTimeout.start();\r\n    };\r\n\r\n    let showUiAfterSeek = () => {\r\n      if (player.isPlaying()) {\r\n        showUiWithTimeout();\r\n      } else {\r\n        showUiPermanently();\r\n      }\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.Play, showUiWithTimeout);\r\n    player.on(player.exports.PlayerEvent.Paused, showUiPermanently);\r\n    player.on(player.exports.PlayerEvent.Seek, showUiPermanently);\r\n    player.on(player.exports.PlayerEvent.Seeked, showUiAfterSeek);\r\n\r\n    uimanager.getConfig().events.onUpdated.subscribe(showUiWithTimeout);\r\n  }\r\n\r\n  release(): void {\r\n    super.release();\r\n    this.castUiHideTimeout.clear();\r\n  }\r\n}","import {Button, ButtonConfig} from './button';\r\n\r\n/**\r\n * Configuration interface for a {@link ClickOverlay}.\r\n */\r\nexport interface ClickOverlayConfig extends ButtonConfig {\r\n  /**\r\n   * The url to open when the overlay is clicked. Set to null to disable the click handler.\r\n   */\r\n  url?: string;\r\n}\r\n\r\n/**\r\n * A click overlay that opens an url in a new tab if clicked.\r\n */\r\nexport class ClickOverlay extends Button<ClickOverlayConfig> {\r\n\r\n  constructor(config: ClickOverlayConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-clickoverlay',\r\n      role: this.config.role,\r\n    }, <ClickOverlayConfig>this.config);\r\n  }\r\n\r\n  initialize(): void {\r\n    super.initialize();\r\n\r\n    this.setUrl((<ClickOverlayConfig>this.config).url);\r\n    let element = this.getDomElement();\r\n    element.on('click', () => {\r\n      if (element.data('url')) {\r\n        window.open(element.data('url'), '_blank');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the URL that should be followed when the watermark is clicked.\r\n   * @returns {string} the watermark URL\r\n   */\r\n  getUrl(): string {\r\n    return this.getDomElement().data('url');\r\n  }\r\n\r\n  setUrl(url: string): void {\r\n    if (url === undefined || url == null) {\r\n      url = '';\r\n    }\r\n    this.getDomElement().data('url', url);\r\n  }\r\n}","import {ButtonConfig, Button} from './button';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {Component, ComponentConfig} from './component';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * Configuration interface for the {@link CloseButton}.\r\n */\r\nexport interface CloseButtonConfig extends ButtonConfig {\r\n  /**\r\n   * The component that should be closed when the button is clicked.\r\n   */\r\n  target: Component<ComponentConfig>;\r\n}\r\n\r\n/**\r\n * A button that closes (hides) a configured component.\r\n */\r\nexport class CloseButton extends Button<CloseButtonConfig> {\r\n\r\n  constructor(config: CloseButtonConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-closebutton',\r\n      text: i18n.getLocalizer('close'),\r\n    } as CloseButtonConfig, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let config = this.getConfig();\r\n\r\n    this.onClick.subscribe(() => {\r\n      config.target.hide();\r\n    });\r\n  }\r\n}","import {Guid} from '../guid';\r\nimport {DOM} from '../dom';\r\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n, LocalizableText } from '../localization/i18n';\r\n\r\n/**\r\n * Base configuration interface for a component.\r\n * Should be extended by components that want to add additional configuration options.\r\n */\r\nexport interface ComponentConfig {\r\n  /**\r\n   * The HTML tag name of the component.\r\n   * Default: 'div'\r\n   */\r\n  tag?: string;\r\n  /**\r\n   * The HTML ID of the component.\r\n   * Default: automatically generated with pattern 'ui-id-{guid}'.\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   * A prefix to prepend all CSS classes with.\r\n   */\r\n  cssPrefix?: string;\r\n\r\n  /**\r\n   * The CSS classes of the component. This is usually the class from where the component takes its styling.\r\n   */\r\n  cssClass?: string; // 'class' is a reserved keyword, so we need to make the name more complicated\r\n\r\n  /**\r\n   * Additional CSS classes of the component.\r\n   */\r\n  cssClasses?: string[];\r\n\r\n  /**\r\n   * Specifies if the component should be hidden at startup.\r\n   * Default: false\r\n   */\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * Specifies if the component is enabled (interactive) or not.\r\n   * Default: false\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Specifies the component role for WCAG20 standard\r\n   */\r\n  role?: string;\r\n\r\n  /**\r\n   * WCAG20 requirement for screen reader navigation\r\n   */\r\n  tabIndex?: number;\r\n\r\n  /**\r\n   * WCAG20 standard for defining info about the component (usually the name)\r\n   */\r\n  ariaLabel?: LocalizableText;\r\n}\r\n\r\nexport interface ComponentHoverChangedEventArgs extends NoArgs {\r\n  /**\r\n   * True is the component is hovered, else false.\r\n   */\r\n  hovered: boolean;\r\n}\r\n\r\n/**\r\n * The base class of the UI framework.\r\n * Each component must extend this class and optionally the config interface.\r\n */\r\nexport class Component<Config extends ComponentConfig> {\r\n\r\n  /**\r\n   * The classname that is attached to the element when it is in the hidden state.\r\n   * @type {string}\r\n   */\r\n  private static readonly CLASS_HIDDEN = 'hidden';\r\n\r\n  /**\r\n   * The classname that is attached to the element when it is in the disabled state.\r\n   * @type {string}\r\n   */\r\n  private static readonly CLASS_DISABLED = 'disabled';\r\n\r\n  /**\r\n   * Configuration object of this component.\r\n   */\r\n  protected config: Config;\r\n\r\n  /**\r\n   * The component's DOM element.\r\n   */\r\n  private element: DOM;\r\n\r\n  /**\r\n   * Flag that keeps track of the hidden state.\r\n   */\r\n  private hidden: boolean;\r\n\r\n  /**\r\n   * Flat that keeps track of the disabled state.\r\n   */\r\n  private disabled: boolean;\r\n\r\n  /**\r\n   * Flag that keeps track of the hover state.\r\n   */\r\n  private hovered: boolean;\r\n\r\n  /**\r\n   * The list of events that this component offers. These events should always be private and only directly\r\n   * accessed from within the implementing component.\r\n   *\r\n   * Because TypeScript does not support private properties with the same name on different class hierarchy levels\r\n   * (i.e. superclass and subclass cannot contain a private property with the same name), the default naming\r\n   * convention for the event list of a component that should be followed by subclasses is the concatenation of the\r\n   * camel-cased class name + 'Events' (e.g. SubClass extends Component => subClassEvents).\r\n   * See {@link #componentEvents} for an example.\r\n   *\r\n   * Event properties should be named in camel case with an 'on' prefix and in the present tense. Async events may\r\n   * have a start event (when the operation starts) in the present tense, and must have an end event (when the\r\n   * operation ends) in the past tense (or present tense in special cases (e.g. onStart/onStarted or onPlay/onPlaying).\r\n   * See {@link #componentEvents#onShow} for an example.\r\n   *\r\n   * Each event should be accompanied with a protected method named by the convention eventName + 'Event'\r\n   * (e.g. onStartEvent), that actually triggers the event by calling {@link EventDispatcher#dispatch dispatch} and\r\n   * passing a reference to the component as first parameter. Components should always trigger their events with these\r\n   * methods. Implementing this pattern gives subclasses means to directly listen to the events by overriding the\r\n   * method (and saving the overhead of passing a handler to the event dispatcher) and more importantly to trigger\r\n   * these events without having access to the private event list.\r\n   * See {@link #onShow} for an example.\r\n   *\r\n   * To provide external code the possibility to listen to this component's events (subscribe, unsubscribe, etc.),\r\n   * each event should also be accompanied by a public getter function with the same name as the event's property,\r\n   * that returns the {@link Event} obtained from the event dispatcher by calling {@link EventDispatcher#getEvent}.\r\n   * See {@link #onShow} for an example.\r\n   *\r\n   * Full example for an event representing an example action in a example component:\r\n   *\r\n   * <code>\r\n   * // Define an example component class with an example event\r\n   * class ExampleComponent extends Component<ComponentConfig> {\r\n     *\r\n     *     private exampleComponentEvents = {\r\n     *         onExampleAction: new EventDispatcher<ExampleComponent, NoArgs>()\r\n     *     }\r\n     *\r\n     *     // constructor and other stuff...\r\n     *\r\n     *     protected onExampleActionEvent() {\r\n     *        this.exampleComponentEvents.onExampleAction.dispatch(this);\r\n     *    }\r\n     *\r\n     *    get onExampleAction(): Event<ExampleComponent, NoArgs> {\r\n     *        return this.exampleComponentEvents.onExampleAction.getEvent();\r\n     *    }\r\n     * }\r\n   *\r\n   * // Create an instance of the component somewhere\r\n   * var exampleComponentInstance = new ExampleComponent();\r\n   *\r\n   * // Subscribe to the example event on the component\r\n   * exampleComponentInstance.onExampleAction.subscribe(function (sender: ExampleComponent) {\r\n     *     console.log('onExampleAction of ' + sender + ' has fired!');\r\n     * });\r\n   * </code>\r\n   */\r\n  private componentEvents = {\r\n    onShow: new EventDispatcher<Component<Config>, NoArgs>(),\r\n    onHide: new EventDispatcher<Component<Config>, NoArgs>(),\r\n    onHoverChanged: new EventDispatcher<Component<Config>, ComponentHoverChangedEventArgs>(),\r\n    onEnabled: new EventDispatcher<Component<Config>, NoArgs>(),\r\n    onDisabled: new EventDispatcher<Component<Config>, NoArgs>(),\r\n  };\r\n\r\n  /**\r\n   * Constructs a component with an optionally supplied config. All subclasses must call the constructor of their\r\n   * superclass and then merge their configuration into the component's configuration.\r\n   * @param config the configuration for the component\r\n   */\r\n  constructor(config: ComponentConfig = {}) {\r\n    // Create the configuration for this component\r\n    this.config = <Config>this.mergeConfig(config, {\r\n      tag: 'div',\r\n      id: '{{PREFIX}}-id-' + Guid.next(),\r\n      cssPrefix: '{{PREFIX}}',\r\n      cssClass: 'ui-component',\r\n      cssClasses: [],\r\n      hidden: false,\r\n      disabled: false,\r\n    }, {});\r\n  }\r\n\r\n  /**\r\n   * Initializes the component, e.g. by applying config settings.\r\n   * This method must not be called from outside the UI framework.\r\n   *\r\n   * This method is automatically called by the {@link UIInstanceManager}. If the component is an inner component of\r\n   * some component, and thus encapsulated abd managed internally and never directly exposed to the UIManager,\r\n   * this method must be called from the managing component's {@link #initialize} method.\r\n   */\r\n  initialize(): void {\r\n    this.hidden = this.config.hidden;\r\n    this.disabled = this.config.disabled;\r\n\r\n    // Hide the component at initialization if it is configured to be hidden\r\n    if (this.isHidden()) {\r\n      this.hidden = false; // Set flag to false for the following hide() call to work (hide() checks the flag)\r\n      this.hide();\r\n    }\r\n\r\n    // Disable the component at initialization if it is configured to be disabled\r\n    if (this.isDisabled()) {\r\n      this.disabled = false; // Set flag to false for the following disable() call to work (disable() checks the flag)\r\n      this.disable();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Configures the component for the supplied Player and UIInstanceManager. This is the place where all the magic\r\n   * happens, where components typically subscribe and react to events (on their DOM element, the Player, or the\r\n   * UIInstanceManager), and basically everything that makes them interactive.\r\n   * This method is called only once, when the UIManager initializes the UI.\r\n   *\r\n   * Subclasses usually overwrite this method to add their own functionality.\r\n   *\r\n   * @param player the player which this component controls\r\n   * @param uimanager the UIInstanceManager that manages this component\r\n   */\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    this.onShow.subscribe(() => {\r\n      uimanager.onComponentShow.dispatch(this);\r\n    });\r\n    this.onHide.subscribe(() => {\r\n      uimanager.onComponentHide.dispatch(this);\r\n    });\r\n\r\n    // Track the hovered state of the element\r\n    this.getDomElement().on('mouseenter', () => {\r\n      this.onHoverChangedEvent(true);\r\n    });\r\n    this.getDomElement().on('mouseleave', () => {\r\n      this.onHoverChangedEvent(false);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Releases all resources and dependencies that the component holds. Player, DOM, and UIManager events are\r\n   * automatically removed during release and do not explicitly need to be removed here.\r\n   * This method is called by the UIManager when it releases the UI.\r\n   *\r\n   * Subclasses that need to release resources should override this method and call super.release().\r\n   */\r\n  release(): void {\r\n    // Nothing to do here, override where necessary\r\n  }\r\n\r\n  /**\r\n   * Generate the DOM element for this component.\r\n   *\r\n   * Subclasses usually overwrite this method to extend or replace the DOM element with their own design.\r\n   */\r\n  protected toDomElement(): DOM {\r\n    let element = new DOM(this.config.tag, {\r\n      'id': this.config.id,\r\n      'class': this.getCssClasses(),\r\n      'role': this.config.role,\r\n    });\r\n\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Returns the DOM element of this component. Creates the DOM element if it does not yet exist.\r\n   *\r\n   * Should not be overwritten by subclasses.\r\n   *\r\n   * @returns {DOM}\r\n   */\r\n  getDomElement(): DOM {\r\n    if (!this.element) {\r\n      this.element = this.toDomElement();\r\n    }\r\n\r\n    return this.element;\r\n  }\r\n\r\n  setAriaLabel(label: LocalizableText): void {\r\n    this.setAriaAttr('label', i18n.performLocalization(label));\r\n  }\r\n\r\n  setAriaAttr(name: string, value: string) {\r\n    this.getDomElement().attr(`aria-${name}`, value);\r\n  }\r\n\r\n  /**\r\n   * Merges a configuration with a default configuration and a base configuration from the superclass.\r\n   *\r\n   * @param config the configuration settings for the components, as usually passed to the constructor\r\n   * @param defaults a default configuration for settings that are not passed with the configuration\r\n   * @param base configuration inherited from a superclass\r\n   * @returns {Config}\r\n   */\r\n  protected mergeConfig<Config>(config: Config, defaults: Config, base: Config): Config {\r\n    // Extend default config with supplied config\r\n    let merged = Object.assign({}, base, defaults, config);\r\n\r\n    // Return the extended config\r\n    return merged;\r\n  }\r\n\r\n  /**\r\n   * Helper method that returns a string of all CSS classes of the component.\r\n   *\r\n   * @returns {string}\r\n   */\r\n  protected getCssClasses(): string {\r\n    // Merge all CSS classes into single array\r\n    let flattenedArray = [this.config.cssClass].concat(this.config.cssClasses);\r\n    // Prefix classes\r\n    flattenedArray = flattenedArray.map((css) => {\r\n      return this.prefixCss(css);\r\n    });\r\n    // Join array values into a string\r\n    let flattenedString = flattenedArray.join(' ');\r\n    // Return trimmed string to prevent whitespace at the end from the join operation\r\n    return flattenedString.trim();\r\n  }\r\n\r\n  protected prefixCss(cssClassOrId: string): string {\r\n    return this.config.cssPrefix + '-' + cssClassOrId;\r\n  }\r\n\r\n  /**\r\n   * Returns the configuration object of the component.\r\n   * @returns {Config}\r\n   */\r\n  public getConfig(): Config {\r\n    return this.config;\r\n  }\r\n\r\n  /**\r\n   * Hides the component if shown.\r\n   * This method basically transfers the component into the hidden state. Actual hiding is done via CSS.\r\n   */\r\n  hide() {\r\n    if (!this.hidden) {\r\n      this.hidden = true;\r\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_HIDDEN));\r\n      this.onHideEvent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows the component if hidden.\r\n   */\r\n  show() {\r\n    if (this.hidden) {\r\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_HIDDEN));\r\n      this.hidden = false;\r\n      this.onShowEvent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines if the component is hidden.\r\n   * @returns {boolean} true if the component is hidden, else false\r\n   */\r\n  isHidden(): boolean {\r\n    return this.hidden;\r\n  }\r\n\r\n  /**\r\n   * Determines if the component is shown.\r\n   * @returns {boolean} true if the component is visible, else false\r\n   */\r\n  isShown(): boolean {\r\n    return !this.isHidden();\r\n  }\r\n\r\n  /**\r\n   * Toggles the hidden state by hiding the component if it is shown, or showing it if hidden.\r\n   */\r\n  toggleHidden() {\r\n    if (this.isHidden()) {\r\n      this.show();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disables the component.\r\n   * This method basically transfers the component into the disabled state. Actual disabling is done via CSS or child\r\n   * components. (e.g. Button needs to unsubscribe click listeners)\r\n   */\r\n  disable(): void {\r\n    if (!this.disabled) {\r\n      this.disabled = true;\r\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_DISABLED));\r\n      this.onDisabledEvent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enables the component.\r\n   * This method basically transfers the component into the enabled state. Actual enabling is done via CSS or child\r\n   * components. (e.g. Button needs to subscribe click listeners)\r\n   */\r\n  enable(): void {\r\n    if (this.disabled) {\r\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_DISABLED));\r\n      this.disabled = false;\r\n      this.onEnabledEvent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines if the component is disabled.\r\n   * @returns {boolean} true if the component is disabled, else false\r\n   */\r\n  isDisabled(): boolean {\r\n    return this.disabled;\r\n  }\r\n\r\n  /**\r\n   * Determines if the component is enabled.\r\n   * @returns {boolean} true if the component is enabled, else false\r\n   */\r\n  isEnabled(): boolean {\r\n    return !this.isDisabled();\r\n  }\r\n\r\n  /**\r\n   * Determines if the component is currently hovered.\r\n   * @returns {boolean} true if the component is hovered, else false\r\n   */\r\n  isHovered(): boolean {\r\n    return this.hovered;\r\n  }\r\n\r\n  /**\r\n   * Fires the onShow event.\r\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\r\n   */\r\n  protected onShowEvent(): void {\r\n    this.componentEvents.onShow.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Fires the onHide event.\r\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\r\n   */\r\n  protected onHideEvent(): void {\r\n    this.componentEvents.onHide.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Fires the onEnabled event.\r\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\r\n   */\r\n  protected onEnabledEvent(): void {\r\n    this.componentEvents.onEnabled.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Fires the onDisabled event.\r\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\r\n   */\r\n  protected onDisabledEvent(): void {\r\n    this.componentEvents.onDisabled.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Fires the onHoverChanged event.\r\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\r\n   */\r\n  protected onHoverChangedEvent(hovered: boolean): void {\r\n    this.hovered = hovered;\r\n    this.componentEvents.onHoverChanged.dispatch(this, { hovered: hovered });\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the component is showing.\r\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\r\n   * @returns {Event<Component<Config>, NoArgs>}\r\n   */\r\n  get onShow(): Event<Component<Config>, NoArgs> {\r\n    return this.componentEvents.onShow.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the component is hiding.\r\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\r\n   * @returns {Event<Component<Config>, NoArgs>}\r\n   */\r\n  get onHide(): Event<Component<Config>, NoArgs> {\r\n    return this.componentEvents.onHide.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the component is enabling.\r\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\r\n   * @returns {Event<Component<Config>, NoArgs>}\r\n   */\r\n  get onEnabled(): Event<Component<Config>, NoArgs> {\r\n    return this.componentEvents.onEnabled.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the component is disabling.\r\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\r\n   * @returns {Event<Component<Config>, NoArgs>}\r\n   */\r\n  get onDisabled(): Event<Component<Config>, NoArgs> {\r\n    return this.componentEvents.onDisabled.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the component's hover-state is changing.\r\n   * @returns {Event<Component<Config>, ComponentHoverChangedEventArgs>}\r\n   */\r\n  get onHoverChanged(): Event<Component<Config>, ComponentHoverChangedEventArgs> {\r\n    return this.componentEvents.onHoverChanged.getEvent();\r\n  }\r\n}","import {ComponentConfig, Component} from './component';\r\nimport {DOM} from '../dom';\r\nimport {ArrayUtils} from '../arrayutils';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * Configuration interface for a {@link Container}.\r\n */\r\nexport interface ContainerConfig extends ComponentConfig {\r\n  /**\r\n   * Child components of the container.\r\n   */\r\n  components?: Component<ComponentConfig>[];\r\n}\r\n\r\n/**\r\n * A container component that can contain a collection of child components.\r\n * Components can be added at construction time through the {@link ContainerConfig#components} setting, or later\r\n * through the {@link Container#addComponent} method. The UIManager automatically takes care of all components, i.e. it\r\n * initializes and configures them automatically.\r\n *\r\n * In the DOM, the container consists of an outer <div> (that can be configured by the config) and an inner wrapper\r\n * <div> that contains the components. This double-<div>-structure is often required to achieve many advanced effects\r\n * in CSS and/or JS, e.g. animations and certain formatting with absolute positioning.\r\n *\r\n * DOM example:\r\n * <code>\r\n *     <div class='ui-container'>\r\n *         <div class='container-wrapper'>\r\n *             ... child components ...\r\n *         </div>\r\n *     </div>\r\n * </code>\r\n */\r\nexport class Container<Config extends ContainerConfig> extends Component<Config> {\r\n\r\n  /**\r\n   * A reference to the inner element that contains the components of the container.\r\n   */\r\n  private innerContainerElement: DOM;\r\n  private componentsToAdd: Component<ComponentConfig>[];\r\n  private componentsToRemove: Component<ComponentConfig>[];\r\n\r\n  constructor(config: Config) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-container',\r\n      components: [],\r\n    } as Config, this.config);\r\n\r\n    this.componentsToAdd = [];\r\n    this.componentsToRemove = [];\r\n  }\r\n\r\n  /**\r\n   * Adds a child component to the container.\r\n   * @param component the component to add\r\n   */\r\n  addComponent(component: Component<ComponentConfig>) {\r\n    this.config.components.push(component);\r\n    this.componentsToAdd.push(component);\r\n  }\r\n\r\n  /**\r\n   * Removes a child component from the container.\r\n   * @param component the component to remove\r\n   * @returns {boolean} true if the component has been removed, false if it is not contained in this container\r\n   */\r\n  removeComponent(component: Component<ComponentConfig>): boolean {\r\n    if (ArrayUtils.remove(this.config.components, component) != null) {\r\n      this.componentsToRemove.push(component);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets an array of all child components in this container.\r\n   * @returns {Component<ComponentConfig>[]}\r\n   */\r\n  getComponents(): Component<ComponentConfig>[] {\r\n    return this.config.components;\r\n  }\r\n\r\n  /**\r\n   * Removes all child components from the container.\r\n   */\r\n  removeComponents(): void {\r\n    for (let component of this.getComponents().slice()) {\r\n      this.removeComponent(component);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the DOM of the container with the current components.\r\n   */\r\n  protected updateComponents(): void {\r\n    /* We cannot just clear the container to remove all elements and then re-add those that should stay, because\r\n     * IE looses the innerHTML of unattached elements, leading to empty elements within the container (e.g. missing\r\n     * subtitle text in SubtitleLabel).\r\n     * Instead, we keep a list of elements to add and remove, leaving remaining elements alone. By keeping them in\r\n     * the DOM, their content gets preserved in all browsers.\r\n     */\r\n    let component;\r\n\r\n    while (component = this.componentsToRemove.shift()) {\r\n      component.getDomElement().remove();\r\n    }\r\n\r\n    while (component = this.componentsToAdd.shift()) {\r\n      this.innerContainerElement.append(component.getDomElement());\r\n    }\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    // Create the container element (the outer <div>)\r\n    let containerElement = new DOM(this.config.tag, {\r\n      'id': this.config.id,\r\n      'class': this.getCssClasses(),\r\n      'role': this.config.role,\r\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\r\n    });\r\n\r\n    // Create the inner container element (the inner <div>) that will contain the components\r\n    let innerContainer = new DOM(this.config.tag, {\r\n      'class': this.prefixCss('container-wrapper'),\r\n    });\r\n    this.innerContainerElement = innerContainer;\r\n\r\n    for (let initialComponent of this.config.components) {\r\n      this.componentsToAdd.push(initialComponent);\r\n    }\r\n    this.updateComponents();\r\n\r\n    containerElement.append(innerContainer);\r\n\r\n    return containerElement;\r\n  }\r\n}","import {ContainerConfig, Container} from './container';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {UIUtils} from '../uiutils';\r\nimport {Spacer} from './spacer';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\nimport { BrowserUtils } from '../browserutils';\r\n\r\n/**\r\n * Configuration interface for the {@link ControlBar}.\r\n */\r\nexport interface ControlBarConfig extends ContainerConfig {\r\n  // nothing yet\r\n}\r\n\r\n/**\r\n * A container for main player control components, e.g. play toggle button, seek bar, volume control, fullscreen toggle\r\n * button.\r\n */\r\nexport class ControlBar extends Container<ControlBarConfig> {\r\n\r\n  constructor(config: ControlBarConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-controlbar',\r\n      hidden: true,\r\n      role: 'region',\r\n      ariaLabel: i18n.getLocalizer('controlBar'),\r\n    }, <ControlBarConfig>this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    // Counts how many components are hovered and block hiding of the control bar\r\n    let hoverStackCount = 0;\r\n\r\n    // only enabling this for non-mobile platforms without touch input. enabling this\r\n    // for touch devices causes the UI to not disappear after hideDelay seconds.\r\n    // Instead, it will stay visible until another manual interaction is performed.\r\n    if (uimanager.getConfig().disableAutoHideWhenHovered && !BrowserUtils.isMobile) {\r\n      // Track hover status of child components\r\n      UIUtils.traverseTree(this, (component) => {\r\n        // Do not track hover status of child containers or spacers, only of 'real' controls\r\n        if (component instanceof Container || component instanceof Spacer) {\r\n          return;\r\n        }\r\n\r\n        // Subscribe hover event and keep a count of the number of hovered children\r\n        component.onHoverChanged.subscribe((_, args) => {\r\n          if (args.hovered) {\r\n            hoverStackCount++;\r\n          } else {\r\n            hoverStackCount--;\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    uimanager.onControlsShow.subscribe(() => {\r\n      this.show();\r\n    });\r\n\r\n    uimanager.onPreviewControlsHide.subscribe((sender, args) => {\r\n      // Cancel the hide event if hovered child components block hiding\r\n      args.cancel = (hoverStackCount > 0);\r\n    });\r\n\r\n    uimanager.onControlsHide.subscribe(() => {\r\n      this.hide();\r\n    });\r\n  }\r\n}\r\n","import {ContainerConfig, Container} from './container';\r\nimport {Label, LabelConfig} from './label';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {TvNoiseCanvas} from './tvnoisecanvas';\r\nimport { ErrorUtils } from '../errorutils';\r\nimport { ErrorEvent, PlayerAPI, PlayerEventBase } from 'bitmovin-player';\r\nimport {\r\n  isMobileV3PlayerAPI,\r\n  MobileV3PlayerAPI, MobileV3PlayerErrorEvent, MobileV3PlayerEvent, MobileV3SourceErrorEvent,\r\n} from '../mobilev3playerapi';\r\n\r\nexport interface ErrorMessageTranslator {\r\n  (error: ErrorEvent | MobileV3PlayerErrorEvent): string;\r\n}\r\n\r\nexport interface ErrorMessageMap {\r\n  [code: number]: string | ErrorMessageTranslator;\r\n}\r\n\r\n/**\r\n * Configuration interface for the {@link ErrorMessageOverlay}.\r\n */\r\nexport interface ErrorMessageOverlayConfig extends ContainerConfig {\r\n  /**\r\n   * Allows overwriting of the error messages displayed in the overlay for customization and localization.\r\n   * This is either a function that receives any {@link ErrorEvent} as parameter and translates error messages,\r\n   * or a map of error codes that overwrites specific error messages with a plain string or a function that\r\n   * receives the {@link ErrorEvent} as parameter and returns a customized string.\r\n   * The translation functions can be used to extract data (e.g. parameters) from the original error message.\r\n   *\r\n   * Example 1 (catch-all translation function):\r\n   * <code>\r\n   * errorMessageOverlayConfig = {\r\n   *   messages: function(error) {\r\n   *     switch (error.code) {\r\n   *       // Overwrite error 1000 'Unknown error'\r\n   *       case 1000:\r\n   *         return 'Houston, we have a problem'\r\n   *\r\n   *       // Transform error 1201 'The downloaded manifest is invalid' to uppercase\r\n   *       case 1201:\r\n   *         var description = ErrorUtils.defaultErrorMessages[error.code];\r\n   *         return description.toUpperCase();\r\n   *\r\n   *       // Customize error 1207 'The manifest could not be loaded'\r\n   *       case 1207:\r\n   *         var statusCode = error.data.statusCode;\r\n   *         return 'Manifest loading failed with HTTP error ' + statusCode;\r\n   *     }\r\n   *     // Return unmodified error message for all other errors\r\n   *     return error.message;\r\n   *   }\r\n   * };\r\n   * </code>\r\n   *\r\n   * Example 2 (translating specific errors):\r\n   * <code>\r\n   * errorMessageOverlayConfig = {\r\n   *   messages: {\r\n   *     // Overwrite error 1000 'Unknown error'\r\n   *     1000: 'Houston, we have a problem',\r\n   *\r\n   *     // Transform error 1201 'Unsupported manifest format' to uppercase\r\n   *     1201: function(error) {\r\n   *       var description = ErrorUtils.defaultErrorMessages[error.code];\r\n   *       return description.toUpperCase();\r\n   *     },\r\n   *\r\n   *     // Customize error 1207 'The manifest could not be loaded'\r\n   *     1207: function(error) {\r\n   *       var statusCode = error.data.statusCode;\r\n   *       return 'Manifest loading failed with HTTP error ' + statusCode;\r\n   *     }\r\n   *   }\r\n   * };\r\n   * </code>\r\n   */\r\n  messages?: ErrorMessageMap | ErrorMessageTranslator;\r\n}\r\n\r\n/**\r\n * Overlays the player and displays error messages.\r\n */\r\nexport class ErrorMessageOverlay extends Container<ErrorMessageOverlayConfig> {\r\n\r\n  private errorLabel: Label<LabelConfig>;\r\n  private tvNoiseBackground: TvNoiseCanvas;\r\n\r\n  constructor(config: ErrorMessageOverlayConfig = {}) {\r\n    super(config);\r\n\r\n    this.errorLabel = new Label<LabelConfig>({ cssClass: 'ui-errormessage-label' });\r\n    this.tvNoiseBackground = new TvNoiseCanvas();\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-errormessage-overlay',\r\n      components: [this.tvNoiseBackground, this.errorLabel],\r\n      hidden: true,\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI | MobileV3PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let config = this.getConfig();\r\n\r\n    const handleErrorMessage = (\r\n      event: ErrorEvent | MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent,\r\n      message: string,\r\n    ) => {\r\n      const customizedMessage = customizeErrorMessage(uimanager.getConfig().errorMessages || config.messages, event);\r\n      if (customizedMessage) {\r\n        message = customizedMessage;\r\n      }\r\n\r\n      this.errorLabel.setText(message);\r\n      this.tvNoiseBackground.start();\r\n      this.show();\r\n    };\r\n\r\n    if (isMobileV3PlayerAPI(player)) {\r\n      const errorEventHandler = (event: MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent) => {\r\n        const message = ErrorUtils.defaultMobileV3ErrorMessageTranslator(event);\r\n        handleErrorMessage(event, message);\r\n      };\r\n\r\n      player.on(MobileV3PlayerEvent.PlayerError, errorEventHandler);\r\n      player.on(MobileV3PlayerEvent.SourceError, errorEventHandler);\r\n    } else {\r\n      player.on(player.exports.PlayerEvent.Error, (event: ErrorEvent) => {\r\n        let message = ErrorUtils.defaultWebErrorMessageTranslator(event);\r\n        handleErrorMessage(event, message);\r\n      });\r\n    }\r\n\r\n    player.on(player.exports.PlayerEvent.SourceLoaded, (event: PlayerEventBase) => {\r\n      if (this.isShown()) {\r\n        this.tvNoiseBackground.stop();\r\n        this.hide();\r\n      }\r\n    });\r\n  }\r\n\r\n  release(): void {\r\n    super.release();\r\n\r\n    // Canvas rendering must be explicitly stopped, else it just continues forever and hogs resources\r\n    this.tvNoiseBackground.stop();\r\n  }\r\n}\r\n\r\nfunction customizeErrorMessage(\r\n  errorMessages: ErrorMessageTranslator | ErrorMessageMap,\r\n  event: ErrorEvent | MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent,\r\n): string | undefined {\r\n  if (!errorMessages) {\r\n    return undefined;\r\n  }\r\n\r\n  // Process message vocabularies\r\n  if (typeof errorMessages === 'function') {\r\n    // Translation function for all errors\r\n    return errorMessages(event);\r\n  }\r\n  if (errorMessages[event.code]) {\r\n    // It's not a translation function, so it must be a map of strings or translation functions\r\n    const customMessage = errorMessages[event.code];\r\n\r\n    return typeof customMessage === 'string' ? customMessage : customMessage(event);\r\n  }\r\n}\r\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\r\nimport { UIInstanceManager } from '../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * A button that toggles the player between windowed and fullscreen view.\r\n */\r\nexport class FullscreenToggleButton extends ToggleButton<ToggleButtonConfig> {\r\n\r\n  constructor(config: ToggleButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-fullscreentogglebutton',\r\n      text: i18n.getLocalizer('fullscreen'),\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    const isFullScreenAvailable = () => {\r\n      return player.isViewModeAvailable(player.exports.ViewMode.Fullscreen);\r\n    };\r\n\r\n    const fullscreenStateHandler = () => {\r\n      player.getViewMode() === player.exports.ViewMode.Fullscreen ? this.on() : this.off();\r\n    };\r\n\r\n    const fullscreenAvailabilityChangedHandler = () => {\r\n      isFullScreenAvailable() ? this.show() : this.hide();\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.ViewModeChanged, fullscreenStateHandler);\r\n\r\n    // Available only in our native SDKs for now\r\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\r\n      player.on(\r\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\r\n        fullscreenAvailabilityChangedHandler,\r\n      );\r\n    }\r\n\r\n    uimanager.getConfig().events.onUpdated.subscribe(fullscreenAvailabilityChangedHandler);\r\n\r\n    this.onClick.subscribe(() => {\r\n      if (!isFullScreenAvailable()) {\r\n        if (console) {\r\n          console.log('Fullscreen unavailable');\r\n        }\r\n        return;\r\n      }\r\n\r\n      const targetViewMode =\r\n        player.getViewMode() === player.exports.ViewMode.Fullscreen\r\n          ? player.exports.ViewMode.Inline\r\n          : player.exports.ViewMode.Fullscreen;\r\n\r\n      player.setViewMode(targetViewMode);\r\n    });\r\n\r\n    // Startup init\r\n    fullscreenAvailabilityChangedHandler();\r\n    fullscreenStateHandler();\r\n  }\r\n}\r\n","import {ToggleButtonConfig} from './togglebutton';\r\nimport {PlaybackToggleButton} from './playbacktogglebutton';\r\nimport {DOM} from '../dom';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * A button that overlays the video and toggles between playback and pause.\r\n */\r\nexport class HugePlaybackToggleButton extends PlaybackToggleButton {\r\n\r\n  constructor(config: ToggleButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-hugeplaybacktogglebutton',\r\n      text: i18n.getLocalizer('playPause'),\r\n      role: 'button',\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    // Update button state through API events\r\n    super.configure(player, uimanager, false);\r\n\r\n    let togglePlayback = () => {\r\n      if (player.isPlaying() || this.isPlayInitiated) {\r\n        player.pause('ui');\r\n      } else {\r\n        player.play('ui');\r\n      }\r\n    };\r\n\r\n    let toggleFullscreen = () => {\r\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\r\n        player.setViewMode(player.exports.ViewMode.Inline);\r\n      } else {\r\n        player.setViewMode(player.exports.ViewMode.Fullscreen);\r\n      }\r\n    };\r\n\r\n    let firstPlay = true;\r\n    let clickTime = 0;\r\n    let doubleClickTime = 0;\r\n\r\n    /*\r\n     * YouTube-style toggle button handling\r\n     *\r\n     * The goal is to prevent a short pause or playback interval between a click, that toggles playback, and a\r\n     * double click, that toggles fullscreen. In this naive approach, the first click would e.g. start playback,\r\n     * the second click would be detected as double click and toggle to fullscreen, and as second normal click stop\r\n     * playback, which results is a short playback interval with max length of the double click detection\r\n     * period (usually 500ms).\r\n     *\r\n     * To solve this issue, we defer handling of the first click for 200ms, which is almost unnoticeable to the user,\r\n     * and just toggle playback if no second click (double click) has been registered during this period. If a double\r\n     * click is registered, we just toggle the fullscreen. In the first 200ms, undesired playback changes thus cannot\r\n     * happen. If a double click is registered within 500ms, we undo the playback change and switch fullscreen mode.\r\n     * In the end, this method basically introduces a 200ms observing interval in which playback changes are prevented\r\n     * if a double click happens.\r\n     */\r\n    this.onClick.subscribe(() => {\r\n      // Directly start playback on first click of the button.\r\n      // This is a required workaround for mobile browsers where video playback needs to be triggered directly\r\n      // by the user. A deferred playback start through the timeout below is not considered as user action and\r\n      // therefore ignored by mobile browsers.\r\n      if (firstPlay) {\r\n        // Try to start playback. Then we wait for Play and only when it arrives, we disable the firstPlay flag.\r\n        // If we disable the flag here, onClick was triggered programmatically instead of by a user interaction, and\r\n        // playback is blocked (e.g. on mobile devices due to the programmatic play() call), we loose the chance to\r\n        // ever start playback through a user interaction again with this button.\r\n        togglePlayback();\r\n        return;\r\n      }\r\n\r\n      let now = Date.now();\r\n\r\n      if (now - clickTime < 200) {\r\n        // We have a double click inside the 200ms interval, just toggle fullscreen mode\r\n        toggleFullscreen();\r\n        doubleClickTime = now;\r\n        return;\r\n      } else if (now - clickTime < 500) {\r\n        // We have a double click inside the 500ms interval, undo playback toggle and toggle fullscreen mode\r\n        toggleFullscreen();\r\n        togglePlayback();\r\n        doubleClickTime = now;\r\n        return;\r\n      }\r\n\r\n      clickTime = now;\r\n\r\n      setTimeout(() => {\r\n        if (Date.now() - doubleClickTime > 200) {\r\n          // No double click detected, so we toggle playback and wait what happens next\r\n          togglePlayback();\r\n        }\r\n      }, 200);\r\n    });\r\n\r\n    player.on(player.exports.PlayerEvent.Play, () => {\r\n      // Playback has really started, we can disable the flag to switch to normal toggle button handling\r\n      firstPlay = false;\r\n    });\r\n\r\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\r\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\r\n        // if playback could not be started, reset the first play flag as we need the user interaction to start\r\n        firstPlay = true;\r\n      }\r\n    });\r\n\r\n    const suppressPlayButtonTransitionAnimation = () => {\r\n      // Disable the current animation\r\n      this.setTransitionAnimationsEnabled(false);\r\n\r\n      // Enable the transition animations for the next state change\r\n      this.onToggle.subscribeOnce(() => {\r\n        this.setTransitionAnimationsEnabled(true);\r\n      });\r\n    };\r\n\r\n    // Hide the play button animation when the UI is loaded (it should only be animated on state changes)\r\n    suppressPlayButtonTransitionAnimation();\r\n\r\n    const isAutoplayEnabled = player.getConfig().playback && Boolean(player.getConfig().playback.autoplay);\r\n    // We only know if an autoplay attempt is upcoming if the player is not yet ready. It the player is already ready,\r\n    // the attempt might be upcoming or might have already happened, but we don't have to handle that because we can\r\n    // simply rely on isPlaying and the play state events.\r\n    const isAutoplayUpcoming = !player.getSource() && isAutoplayEnabled;\r\n\r\n    // Hide the play button when the player is already playing or autoplay is upcoming\r\n    if (player.isPlaying() || isAutoplayUpcoming) {\r\n      // Hide the play button (switch to playing state)\r\n      this.on();\r\n      // Disable the animation of the playing state switch\r\n      suppressPlayButtonTransitionAnimation();\r\n\r\n      // Show the play button without an animation if a play attempt is blocked\r\n      player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\r\n        if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\r\n          suppressPlayButtonTransitionAnimation();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    let buttonElement = super.toDomElement();\r\n\r\n    // Add child that contains the play button image\r\n    // Setting the image directly on the button does not work together with scaling animations, because the button\r\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\r\n    // to the size if the image, it can scale inside the player without overshooting.\r\n    buttonElement.append(new DOM('div', {\r\n      'class': this.prefixCss('image'),\r\n    }));\r\n\r\n    return buttonElement;\r\n  }\r\n\r\n  /**\r\n   * Enables or disables the play state transition animations of the play button image. Can be used to suppress\r\n   * animations.\r\n   * @param {boolean} enabled true to enable the animations (default), false to disable them\r\n   */\r\n  protected setTransitionAnimationsEnabled(enabled: boolean): void {\r\n    const noTransitionAnimationsClass = this.prefixCss('no-transition-animations');\r\n\r\n    if (enabled) {\r\n      this.getDomElement().removeClass(noTransitionAnimationsClass);\r\n    } else if (!this.getDomElement().hasClass(noTransitionAnimationsClass)) {\r\n      this.getDomElement().addClass(noTransitionAnimationsClass);\r\n    }\r\n  }\r\n}\r\n","import {ButtonConfig, Button} from './button';\r\nimport {DOM} from '../dom';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * A button to play/replay a video.\r\n */\r\nexport class HugeReplayButton extends Button<ButtonConfig> {\r\n\r\n  constructor(config: ButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-hugereplaybutton',\r\n      text: i18n.getLocalizer('replay'),\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.onClick.subscribe(() => {\r\n      player.play('ui');\r\n    });\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    let buttonElement = super.toDomElement();\r\n\r\n    // Add child that contains the play button image\r\n    // Setting the image directly on the button does not work together with scaling animations, because the button\r\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\r\n    // to the size if the image, it can scale inside the player without overshooting.\r\n    buttonElement.append(new DOM('div', {\r\n      'class': this.prefixCss('image'),\r\n    }));\r\n\r\n    return buttonElement;\r\n  }\r\n}","import {ListSelector, ListSelectorConfig} from './listselector';\r\nimport {DOM} from '../dom';\r\nimport { i18n } from '../localization/i18n';\r\n\r\nexport class ItemSelectionList extends ListSelector<ListSelectorConfig> {\r\n\r\n  private static readonly CLASS_SELECTED = 'selected';\r\n\r\n  private listElement: DOM;\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      tag: 'ul',\r\n      cssClass: 'ui-itemselectionlist',\r\n    }, this.config);\r\n  }\r\n\r\n  protected isActive(): boolean {\r\n    return this.items.length > 1;\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    let listElement = new DOM('ul', {\r\n      'id': this.config.id,\r\n      'class': this.getCssClasses(),\r\n    });\r\n\r\n    this.listElement = listElement;\r\n    this.updateDomItems();\r\n\r\n    return listElement;\r\n  }\r\n\r\n  protected updateDomItems(selectedValue: string = null) {\r\n    // Delete all children\r\n    this.listElement.empty();\r\n\r\n    let selectedListItem: DOM = null;\r\n\r\n    const selectItem = (listItem: DOM) => {\r\n      listItem.addClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\r\n    };\r\n\r\n    const deselectItem = (listItem: DOM) => {\r\n      listItem.removeClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\r\n    };\r\n\r\n    for (let item of this.items) {\r\n      let listItem = new DOM('li', {\r\n        'type': 'li',\r\n        'class': this.prefixCss('ui-selectionlistitem'),\r\n      }).append(new DOM('a', {\r\n      }).html(i18n.performLocalization(item.label)));\r\n\r\n      if (!selectedListItem) {\r\n        if (selectedValue == null) { // If there is no pre-selected value, select the first one\r\n          selectedListItem = listItem;\r\n        } else if (String(selectedValue) === item.key) { // convert selectedValue to string to catch 'null'/null case\r\n          selectedListItem = listItem;\r\n        }\r\n      }\r\n\r\n      // Handle list item selections\r\n      listItem.on('click', () => {\r\n        // Deselect the previous item (if there was a selected item)\r\n        if (selectedListItem) {\r\n          deselectItem(selectedListItem);\r\n        }\r\n\r\n        // Select the clicked item\r\n        selectedListItem = listItem;\r\n        selectItem(listItem);\r\n\r\n        // Fire the event\r\n        this.onItemSelectedEvent(item.key, false);\r\n      });\r\n\r\n      // Select default item\r\n      if (selectedListItem) {\r\n        selectItem(selectedListItem);\r\n      }\r\n\r\n      this.listElement.append(listItem);\r\n    }\r\n  }\r\n\r\n  protected onItemAddedEvent(value: string) {\r\n    super.onItemAddedEvent(value);\r\n    this.updateDomItems(this.selectedItem);\r\n  }\r\n\r\n  protected onItemRemovedEvent(value: string) {\r\n    super.onItemRemovedEvent(value);\r\n    this.updateDomItems(this.selectedItem);\r\n  }\r\n\r\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\r\n    super.onItemSelectedEvent(value);\r\n    if (updateDomItems) {\r\n      this.updateDomItems(value);\r\n    }\r\n  }\r\n}\r\n","import {ComponentConfig, Component} from './component';\r\nimport {DOM} from '../dom';\r\nimport {EventDispatcher, Event, NoArgs} from '../eventdispatcher';\r\nimport { LocalizableText, i18n } from '../localization/i18n';\r\n\r\n/**\r\n * Configuration interface for a {@link Label} component.\r\n */\r\nexport interface LabelConfig extends ComponentConfig {\r\n  /**\r\n   * The text as string or localize callback on the label.\r\n   */\r\n  text?: LocalizableText;\r\n\r\n  /**\r\n   * WCAG20 standard: Associate label to form control.\r\n   */\r\n  for?: string;\r\n}\r\n\r\n/**\r\n * A simple text label.\r\n *\r\n * DOM example:\r\n * <code>\r\n *     <span class='ui-label'>...some text...</span>\r\n * </code>\r\n */\r\nexport class Label<Config extends LabelConfig> extends Component<Config> {\r\n\r\n  private text: LocalizableText;\r\n\r\n  private labelEvents = {\r\n    onClick: new EventDispatcher<Label<Config>, NoArgs>(),\r\n    onTextChanged: new EventDispatcher<Label<Config>, string>(),\r\n  };\r\n\r\n  constructor(config: Config = {} as Config) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-label',\r\n    } as Config, this.config);\r\n    this.text = this.config.text;\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    const tagName = this.config.for != null ? 'label' : 'span';\r\n\r\n    let labelElement = new DOM(tagName, {\r\n      'id': this.config.id,\r\n      'for': this.config.for,\r\n      'class': this.getCssClasses(),\r\n    }).html(i18n.performLocalization(this.text));\r\n\r\n    labelElement.on('click', () => {\r\n      this.onClickEvent();\r\n    });\r\n\r\n    return labelElement;\r\n  }\r\n\r\n  /**\r\n   * Set the text on this label.\r\n   * @param text\r\n   */\r\n  setText(text: LocalizableText) {\r\n    if (text === this.text) {\r\n      return;\r\n    }\r\n\r\n    this.text = text;\r\n    const localizedText = i18n.performLocalization(text);\r\n    this.getDomElement().html(localizedText);\r\n    this.onTextChangedEvent(localizedText);\r\n  }\r\n\r\n  /**\r\n   * Gets the text on this label.\r\n   * @return {string} The text on the label\r\n   */\r\n  getText(): string {\r\n    return i18n.performLocalization(this.text);\r\n  }\r\n\r\n  /**\r\n   * Clears the text on this label.\r\n   */\r\n  clearText() {\r\n    this.getDomElement().html('');\r\n    this.onTextChangedEvent(null);\r\n  }\r\n\r\n  /**\r\n   * Tests if the label is empty and does not contain any text.\r\n   * @return {boolean} True if the label is empty, else false\r\n   */\r\n  isEmpty(): boolean {\r\n    return !this.text;\r\n  }\r\n\r\n  /**\r\n   * Fires the {@link #onClick} event.\r\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\r\n   * and calling the super method.\r\n   */\r\n  protected onClickEvent() {\r\n    this.labelEvents.onClick.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Fires the {@link #onClick} event.\r\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\r\n   * and calling the super method.\r\n   */\r\n  protected onTextChangedEvent(text: string) {\r\n    this.labelEvents.onTextChanged.dispatch(this, text);\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the label is clicked.\r\n   * @returns {Event<Label<LabelConfig>, NoArgs>}\r\n   */\r\n  get onClick(): Event<Label<LabelConfig>, NoArgs> {\r\n    return this.labelEvents.onClick.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the text on the label is changed.\r\n   * @returns {Event<Label<LabelConfig>, string>}\r\n   */\r\n  get onTextChanged(): Event<Label<LabelConfig>, string> {\r\n    return this.labelEvents.onTextChanged.getEvent();\r\n  }\r\n}\r\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\r\nimport { ListItem, ListSelector, ListSelectorConfig } from './listselector';\r\nimport {DOM} from '../dom';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { UIInstanceManager } from '../uimanager';\r\nimport { ArrayUtils } from '../arrayutils';\r\n\r\n/**\r\n * A element to select a single item out of a list of available items.\r\n *\r\n * DOM example:\r\n * <code>\r\n *   <div class='ui-listbox'>\r\n *     <button class='ui-listbox-button'>label</button>\r\n *     ...\r\n *   </div\r\n * </code>\r\n */\r\n// TODO: change ListSelector to extends container in v4 to improve usage of ListBox.\r\n//       Currently we are creating the dom element of the list box with child elements manually here.\r\n//       But this functionality is already covered within the Container component.\r\nexport class ListBox extends ListSelector<ListSelectorConfig> {\r\n  private listBoxElement: DOM;\r\n  private components: ListBoxItemButton[] = [];\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-listbox',\r\n    } as ListSelectorConfig, this.config);\r\n  }\r\n\r\n  public configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    // Subscribe before super call to receive initial events\r\n    this.onItemAdded.subscribe(this.addListBoxDomItem);\r\n    this.onItemRemoved.subscribe(this.removeListBoxDomItem);\r\n    this.onItemSelected.subscribe(this.refreshSelectedItem);\r\n\r\n    super.configure(player, uimanager);\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    let listBoxElement = new DOM('div', {\r\n      'id': this.config.id,\r\n      'class': this.getCssClasses(),\r\n    });\r\n\r\n    this.listBoxElement = listBoxElement;\r\n    this.createListBoxDomItems();\r\n    this.refreshSelectedItem();\r\n\r\n    return listBoxElement;\r\n  }\r\n\r\n  private createListBoxDomItems() {\r\n    // Delete all children\r\n    this.listBoxElement.empty();\r\n    this.components = [];\r\n\r\n    // Add updated children\r\n    for (let item of this.items) {\r\n      this.addListBoxDomItem(this, item.key);\r\n    }\r\n  }\r\n\r\n  private removeListBoxDomItem = (_: ListBox, key: string) => {\r\n    const component = this.getComponentForKey(key);\r\n    if (component) {\r\n      component.getDomElement().remove();\r\n      ArrayUtils.remove(this.components, component);\r\n    }\r\n  };\r\n\r\n  private addListBoxDomItem = (_: ListBox, key: string) => {\r\n    const component = this.getComponentForKey(key);\r\n    const newItem = this.getItemForKey(key);\r\n    if (component) {\r\n      // Update existing component\r\n      component.setText(newItem.label);\r\n    } else {\r\n      const listBoxItemButton = this.buildListBoxItemButton(newItem);\r\n\r\n      listBoxItemButton.onClick.subscribe(() => {\r\n        this.handleSelectionChange(listBoxItemButton);\r\n      });\r\n\r\n      this.components.push(listBoxItemButton);\r\n      this.listBoxElement.append(listBoxItemButton.getDomElement());\r\n    }\r\n  };\r\n\r\n  private refreshSelectedItem = () => {\r\n    // This gets called twice because the first time is triggered when the user clicks on the ListBoxItemButton. And the\r\n    // second call comes from the player event when the actual item is selected (Subtitle / AudioTrack in this case).\r\n    // As this is a generic component we can't prohibit this behaviour. We need to treat this component as it acts\r\n    // independent from PlayerEvents and on the other hand we need to react to PlayerEvents as it could be triggered\r\n    // from outside.\r\n\r\n    for (let item of this.items) {\r\n      const component = this.getComponentForKey(item.key);\r\n      if (component) {\r\n        String(component.key) === String(this.selectedItem) ? component.on() : component.off();\r\n      }\r\n    }\r\n  };\r\n\r\n  private buildListBoxItemButton(listItem: ListItem): ListBoxItemButton {\r\n    return new ListBoxItemButton({\r\n      key: listItem.key,\r\n      text: listItem.label,\r\n      ariaLabel: listItem.ariaLabel,\r\n    });\r\n  }\r\n\r\n  private getComponentForKey(key: string): ListBoxItemButton {\r\n    return this.components.find((c) => key === c.key);\r\n  }\r\n\r\n  private handleSelectionChange = (sender: ListBoxItemButton) => {\r\n    this.onItemSelectedEvent(sender.key);\r\n  };\r\n}\r\n\r\ninterface ListBoxItemButtonConfig extends ToggleButtonConfig {\r\n  /**\r\n   * key to identify selected item. Similar to the value attribute of an select option.\r\n   */\r\n  key: string;\r\n}\r\n\r\nclass ListBoxItemButton extends ToggleButton<ListBoxItemButtonConfig> {\r\n\r\n  constructor(config: ListBoxItemButtonConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-listbox-button',\r\n      onClass: 'selected',\r\n      offClass: '',\r\n    } as ListBoxItemButtonConfig, this.config);\r\n  }\r\n\r\n  get key(): string {\r\n    return (this.config as ListBoxItemButtonConfig).key;\r\n  }\r\n}\r\n","import {Component, ComponentConfig} from './component';\r\nimport {EventDispatcher, Event} from '../eventdispatcher';\r\nimport {ArrayUtils} from '../arrayutils';\r\nimport { LocalizableText, i18n } from '../localization/i18n';\r\n\r\n/**\r\n * A map of items (key/value -> label} for a {@link ListSelector} in a {@link ListSelectorConfig}.\r\n */\r\nexport interface ListItem {\r\n  key: string;\r\n  label: LocalizableText;\r\n  sortedInsert?: boolean;\r\n  ariaLabel?: string;\r\n}\r\n\r\n/**\r\n * Filter function that can be used to filter out list items added through {@link ListSelector.addItem}.\r\n *\r\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\r\n * via the player API, e.g. {@link SubtitleSelectBox}.\r\n */\r\nexport interface ListItemFilter {\r\n  /**\r\n   * Takes a list item and decides whether it should pass or be discarded.\r\n   * @param {ListItem} listItem the item to apply the filter to\r\n   * @returns {boolean} true to let the item pass through the filter, false to discard the item\r\n   */\r\n  (listItem: ListItem): boolean;\r\n}\r\n\r\n/**\r\n * Translator function to translate labels of list items added through {@link ListSelector.addItem}.\r\n *\r\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\r\n * via the player API, e.g. {@link SubtitleSelectBox}.\r\n */\r\nexport interface ListItemLabelTranslator {\r\n  /**\r\n   * Takes a list item, optionally changes the label, and returns the new label.\r\n   * @param {ListItem} listItem the item to translate\r\n   * @returns {string} the translated or original label\r\n   */\r\n  (listItem: ListItem): string;\r\n}\r\n\r\n/**\r\n * Configuration interface for a {@link ListSelector}.\r\n */\r\nexport interface ListSelectorConfig extends ComponentConfig {\r\n  items?: ListItem[];\r\n  filter?: ListItemFilter;\r\n  translator?: ListItemLabelTranslator;\r\n}\r\n\r\nexport abstract class ListSelector<Config extends ListSelectorConfig> extends Component<ListSelectorConfig> {\r\n\r\n  protected items: ListItem[];\r\n  protected selectedItem: string;\r\n\r\n  private listSelectorEvents = {\r\n    onItemAdded: new EventDispatcher<ListSelector<Config>, string>(),\r\n    onItemRemoved: new EventDispatcher<ListSelector<Config>, string>(),\r\n    onItemSelected: new EventDispatcher<ListSelector<Config>, string>(),\r\n  };\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      items: [],\r\n      cssClass: 'ui-listselector',\r\n    }, this.config);\r\n\r\n    this.items = this.config.items;\r\n  }\r\n\r\n  private getItemIndex(key: string): number {\r\n    for (let index in this.items) {\r\n      if (key === this.items[index].key) {\r\n        return parseInt(index);\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Returns all current items of this selector.\r\n   * * @returns {ListItem[]}\r\n   */\r\n  getItems(): ListItem[] {\r\n    return this.items;\r\n  }\r\n\r\n  /**\r\n   * Checks if the specified item is part of this selector.\r\n   * @param key the key of the item to check\r\n   * @returns {boolean} true if the item is part of this selector, else false\r\n   */\r\n  hasItem(key: string): boolean {\r\n    return this.getItemIndex(key) > -1;\r\n  }\r\n\r\n  /**\r\n   * Adds an item to this selector by doing a sorted insert or by appending the element to the end of the list of items.\r\n   * If an item with the specified key already exists, it is replaced.\r\n   * @param key the key of the item to add\r\n   * @param label the (human-readable) label of the item to add\r\n   * @param sortedInsert whether the item should be added respecting the order of keys\r\n   * @param ariaLabel custom aria label for the listItem\r\n   */\r\n  addItem(key: string, label: LocalizableText, sortedInsert = false, ariaLabel = '') {\r\n    const listItem = { key: key, label: i18n.performLocalization(label), ...(ariaLabel && { ariaLabel })};\r\n\r\n    // Apply filter function\r\n    if (this.config.filter && !this.config.filter(listItem)) {\r\n      return;\r\n    }\r\n\r\n    // Apply translator function\r\n    if (this.config.translator) {\r\n      listItem.label = this.config.translator(listItem);\r\n    }\r\n\r\n    // Try to remove key first to get overwrite behavior and avoid duplicate keys\r\n    this.removeItem(key); // This will trigger an ItemRemoved and an ItemAdded event\r\n\r\n    // Add the item to the list\r\n    if (sortedInsert) {\r\n      const index = this.items.findIndex(entry => entry.key > key);\r\n      if (index < 0) {\r\n        this.items.push(listItem);\r\n      } else {\r\n        this.items.splice(index, 0, listItem);\r\n      }\r\n    } else {\r\n      this.items.push(listItem);\r\n    }\r\n    this.onItemAddedEvent(key);\r\n  }\r\n\r\n  /**\r\n   * Removes an item from this selector.\r\n   * @param key the key of the item to remove\r\n   * @returns {boolean} true if removal was successful, false if the item is not part of this selector\r\n   */\r\n  removeItem(key: string): boolean {\r\n    let index = this.getItemIndex(key);\r\n    if (index > -1) {\r\n      ArrayUtils.remove(this.items, this.items[index]);\r\n      this.onItemRemovedEvent(key);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Selects an item from the items in this selector.\r\n   * @param key the key of the item to select\r\n   * @returns {boolean} true is the selection was successful, false if the selected item is not part of the selector\r\n   */\r\n  selectItem(key: string): boolean {\r\n    if (key === this.selectedItem) {\r\n      // itemConfig is already selected, suppress any further action\r\n      return true;\r\n    }\r\n\r\n    let index = this.getItemIndex(key);\r\n\r\n    if (index > -1) {\r\n      this.selectedItem = key;\r\n      this.onItemSelectedEvent(key);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns the key of the selected item.\r\n   * @returns {string} the key of the selected item or null if no item is selected\r\n   */\r\n  getSelectedItem(): string | null {\r\n    return this.selectedItem;\r\n  }\r\n\r\n  /**\r\n   * Returns the items for the given key or undefined if no item with the given key exists.\r\n   * @param key the key of the item to return\r\n   * @returns {ListItem} the item with the requested key. Undefined if no item with the given key exists.\r\n   */\r\n  getItemForKey(key: string): ListItem {\r\n    return this.items.find((item) => item.key === key);\r\n  }\r\n\r\n  /**\r\n   * Synchronize the current items of this selector with the given ones. This will remove and add items selectively.\r\n   * For each removed item the ItemRemovedEvent and for each added item the ItemAddedEvent will be triggered. Favour\r\n   * this method over using clearItems and adding all items again afterwards.\r\n   * @param newItems\r\n   */\r\n  synchronizeItems(newItems: ListItem[]): void {\r\n    newItems\r\n      .filter((item) => !this.hasItem(item.key))\r\n      .forEach((item) => this.addItem(item.key, item.label, item.sortedInsert, item.ariaLabel));\r\n\r\n    this.items\r\n      .filter((item) => newItems.filter((i) => i.key === item.key).length === 0)\r\n      .forEach((item) => this.removeItem(item.key));\r\n  }\r\n\r\n  /**\r\n   * Removes all items from this selector.\r\n   */\r\n  clearItems() {\r\n    // local copy for iteration after clear\r\n    let items = this.items;\r\n    // clear items\r\n    this.items = [];\r\n\r\n    // clear the selection as the selected item is also removed\r\n    this.selectedItem = null;\r\n\r\n    // fire events\r\n    for (let item of items) {\r\n      this.onItemRemovedEvent(item.key);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the number of items in this selector.\r\n   * @returns {number}\r\n   */\r\n  itemCount(): number {\r\n    return Object.keys(this.items).length;\r\n  }\r\n\r\n  protected onItemAddedEvent(key: string) {\r\n    this.listSelectorEvents.onItemAdded.dispatch(this, key);\r\n  }\r\n\r\n  protected onItemRemovedEvent(key: string) {\r\n    this.listSelectorEvents.onItemRemoved.dispatch(this, key);\r\n  }\r\n\r\n  protected onItemSelectedEvent(key: string) {\r\n    this.listSelectorEvents.onItemSelected.dispatch(this, key);\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when an item is added to the list of items.\r\n   * @returns {Event<ListSelector<Config>, string>}\r\n   */\r\n  get onItemAdded(): Event<ListSelector<Config>, string> {\r\n    return this.listSelectorEvents.onItemAdded.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when an item is removed from the list of items.\r\n   * @returns {Event<ListSelector<Config>, string>}\r\n   */\r\n  get onItemRemoved(): Event<ListSelector<Config>, string> {\r\n    return this.listSelectorEvents.onItemRemoved.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when an item is selected from the list of items.\r\n   * @returns {Event<ListSelector<Config>, string>}\r\n   */\r\n  get onItemSelected(): Event<ListSelector<Config>, string> {\r\n    return this.listSelectorEvents.onItemSelected.getEvent();\r\n  }\r\n}","import {LabelConfig, Label} from './label';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\n\r\n/**\r\n * Enumerates the types of content that the {@link MetadataLabel} can display.\r\n */\r\nexport enum MetadataLabelContent {\r\n  /**\r\n   * Title of the data source.\r\n   */\r\n  Title,\r\n  /**\r\n   * Description fo the data source.\r\n   */\r\n  Description,\r\n}\r\n\r\n/**\r\n * Configuration interface for {@link MetadataLabel}.\r\n */\r\nexport interface MetadataLabelConfig extends LabelConfig {\r\n  /**\r\n   * The type of content that should be displayed in the label.\r\n   */\r\n  content: MetadataLabelContent;\r\n}\r\n\r\n/**\r\n * A label that can be configured to display certain metadata.\r\n */\r\nexport class MetadataLabel extends Label<MetadataLabelConfig> {\r\n\r\n  constructor(config: MetadataLabelConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['label-metadata', 'label-metadata-' + MetadataLabelContent[config.content].toLowerCase()],\r\n    } as MetadataLabelConfig, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let config = this.getConfig();\r\n    let uiconfig = uimanager.getConfig();\r\n\r\n    let init = () => {\r\n      switch (config.content) {\r\n        case MetadataLabelContent.Title:\r\n          this.setText(uiconfig.metadata.title);\r\n          break;\r\n        case MetadataLabelContent.Description:\r\n          this.setText(uiconfig.metadata.description);\r\n          break;\r\n      }\r\n    };\r\n\r\n    let unload = () => {\r\n      this.setText(null);\r\n    };\r\n\r\n    // Init label\r\n    init();\r\n    // Clear labels when source is unloaded\r\n    player.on(player.exports.PlayerEvent.SourceUnloaded, unload);\r\n\r\n    uimanager.getConfig().events.onUpdated.subscribe(init);\r\n  }\r\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * A button that toggles Apple macOS picture-in-picture mode.\r\n */\r\nexport class PictureInPictureToggleButton extends ToggleButton<ToggleButtonConfig> {\r\n\r\n  constructor(config: ToggleButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-piptogglebutton',\r\n      text: i18n.getLocalizer('pictureInPicture'),\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    const isPictureInPictureAvailable = () => {\r\n      return player.isViewModeAvailable(player.exports.ViewMode.PictureInPicture);\r\n    };\r\n\r\n    const pictureInPictureStateHandler = () => {\r\n      player.getViewMode() === player.exports.ViewMode.PictureInPicture ? this.on() : this.off();\r\n    };\r\n\r\n    const pictureInPictureAvailabilityChangedHandler = () => {\r\n      isPictureInPictureAvailable() ? this.show() : this.hide();\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.ViewModeChanged, pictureInPictureStateHandler);\r\n\r\n    // Available only in our native SDKs for now\r\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\r\n      player.on(\r\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\r\n        pictureInPictureAvailabilityChangedHandler,\r\n      );\r\n    }\r\n\r\n    uimanager.getConfig().events.onUpdated.subscribe(pictureInPictureAvailabilityChangedHandler);\r\n\r\n    this.onClick.subscribe(() => {\r\n      if (!isPictureInPictureAvailable()) {\r\n        if (console) {\r\n          console.log('PIP unavailable');\r\n        }\r\n        return;\r\n      }\r\n\r\n      const targetViewMode =\r\n        player.getViewMode() === player.exports.ViewMode.PictureInPicture\r\n          ? player.exports.ViewMode.Inline\r\n          : player.exports.ViewMode.PictureInPicture;\r\n\r\n      player.setViewMode(targetViewMode);\r\n    });\r\n\r\n    // Startup init\r\n    pictureInPictureAvailabilityChangedHandler(); // Hide button if PIP not available\r\n    pictureInPictureStateHandler();\r\n  }\r\n}\r\n","import {SelectBox} from './selectbox';\r\nimport {ListSelectorConfig} from './listselector';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * A select box providing a selection of different playback speeds.\r\n */\r\nexport class PlaybackSpeedSelectBox extends SelectBox {\r\n  protected defaultPlaybackSpeeds: number[];\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n    this.defaultPlaybackSpeeds = [0.25, 0.5, 1, 1.5, 2];\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['ui-playbackspeedselectbox'],\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.addDefaultItems();\r\n\r\n    this.onItemSelected.subscribe((sender: PlaybackSpeedSelectBox, value: string) => {\r\n      player.setPlaybackSpeed(parseFloat(value));\r\n      this.selectItem(value);\r\n    });\r\n\r\n    const setDefaultValue = (): void => {\r\n      const playbackSpeed = player.getPlaybackSpeed();\r\n      this.setSpeed(playbackSpeed);\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.PlaybackSpeedChanged, setDefaultValue);\r\n    uimanager.getConfig().events.onUpdated.subscribe(setDefaultValue);\r\n  }\r\n\r\n  setSpeed(speed: number): void {\r\n    if (!this.selectItem(String(speed))) {\r\n      // a playback speed was set which is not in the list, add it to the list to show it to the user\r\n      this.clearItems();\r\n      this.addDefaultItems([speed]);\r\n      this.selectItem(String(speed));\r\n    }\r\n  }\r\n\r\n  addDefaultItems(customItems: number[] = []): void {\r\n    const sortedSpeeds = this.defaultPlaybackSpeeds.concat(customItems).sort();\r\n\r\n    sortedSpeeds.forEach(element => {\r\n      if (element !== 1) {\r\n        this.addItem(String(element), `${element}x`);\r\n      } else {\r\n        this.addItem(String(element), i18n.getLocalizer('normal'));\r\n      }\r\n    });\r\n  }\r\n\r\n  clearItems(): void {\r\n    this.items = [];\r\n    this.selectedItem = null;\r\n  }\r\n}","import {LabelConfig, Label} from './label';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\r\nimport {PlayerUtils} from '../playerutils';\r\nimport {StringUtils} from '../stringutils';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\nexport enum PlaybackTimeLabelMode {\r\n  /**\r\n   * Displays the current time\r\n   */\r\n  CurrentTime,\r\n  /**\r\n   * Displays the duration of the content\r\n   */\r\n  TotalTime,\r\n  /**\r\n   * Displays the current time and the duration of the content\r\n   * Format: ${currentTime} / ${totalTime}\r\n   */\r\n  CurrentAndTotalTime,\r\n  /**\r\n   * Displays the remaining time of the content\r\n   */\r\n  RemainingTime,\r\n}\r\n\r\nexport interface PlaybackTimeLabelConfig extends LabelConfig {\r\n  /**\r\n   * The type of which time should be displayed in the label.\r\n   * Default: PlaybackTimeLabelMode.CurrentAndTotalTime\r\n   */\r\n  timeLabelMode?: PlaybackTimeLabelMode;\r\n  /**\r\n   * Boolean if the label should be hidden in live playback\r\n   */\r\n  hideInLivePlayback?: boolean;\r\n}\r\n\r\n/**\r\n * A label that display the current playback time and the total time through {@link PlaybackTimeLabel#setTime setTime}\r\n * or any string through {@link PlaybackTimeLabel#setText setText}.\r\n */\r\nexport class PlaybackTimeLabel extends Label<PlaybackTimeLabelConfig> {\r\n\r\n  private timeFormat: string;\r\n\r\n  constructor(config: PlaybackTimeLabelConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, <PlaybackTimeLabelConfig>{\r\n      cssClass: 'ui-playbacktimelabel',\r\n      timeLabelMode: PlaybackTimeLabelMode.CurrentAndTotalTime,\r\n      hideInLivePlayback: false,\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let config = this.getConfig();\r\n    let live = false;\r\n    let liveCssClass = this.prefixCss('ui-playbacktimelabel-live');\r\n    let liveEdgeCssClass = this.prefixCss('ui-playbacktimelabel-live-edge');\r\n    let minWidth = 0;\r\n\r\n    let liveClickHandler = () => {\r\n      player.timeShift(0);\r\n    };\r\n\r\n    let updateLiveState = () => {\r\n      // Player is playing a live stream when the duration is infinite\r\n      live = player.isLive();\r\n\r\n      // Attach/detach live marker class\r\n      if (live) {\r\n        this.getDomElement().addClass(liveCssClass);\r\n        this.setText(i18n.getLocalizer('live'));\r\n        if (config.hideInLivePlayback) {\r\n          this.hide();\r\n        }\r\n        this.onClick.subscribe(liveClickHandler);\r\n        updateLiveTimeshiftState();\r\n      } else {\r\n        this.getDomElement().removeClass(liveCssClass);\r\n        this.getDomElement().removeClass(liveEdgeCssClass);\r\n        this.show();\r\n        this.onClick.unsubscribe(liveClickHandler);\r\n      }\r\n    };\r\n\r\n    let updateLiveTimeshiftState = () => {\r\n      if (!live) {\r\n        return;\r\n      }\r\n\r\n      // The player is only at the live edge iff the stream is not shifted and it is actually playing or playback has\r\n      // never been started (meaning it isn't paused). A player that is paused is always behind the live edge.\r\n      // An exception is made for live streams without a timeshift window, because here we \"stop\" playback instead\r\n      // of pausing it (from a UI perspective), so we keep the live edge indicator on because a play would always\r\n      // resume at the live edge.\r\n      const isTimeshifted = player.getTimeShift() < 0;\r\n      const isTimeshiftAvailable = player.getMaxTimeShift() < 0;\r\n      if (!isTimeshifted && (!player.isPaused() || !isTimeshiftAvailable)) {\r\n        this.getDomElement().addClass(liveEdgeCssClass);\r\n      } else {\r\n        this.getDomElement().removeClass(liveEdgeCssClass);\r\n      }\r\n    };\r\n\r\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\r\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\r\n      live = args.live;\r\n      updateLiveState();\r\n    });\r\n    liveStreamDetector.detect(); // Initial detection\r\n\r\n    let playbackTimeHandler = () => {\r\n      if (!live && player.getDuration() !== Infinity) {\r\n        this.setTime(\r\n          PlayerUtils.getCurrentTimeRelativeToSeekableRange(player),\r\n          player.getDuration());\r\n      }\r\n\r\n      // To avoid 'jumping' in the UI by varying label sizes due to non-monospaced fonts,\r\n      // we gradually increase the min-width with the content to reach a stable size.\r\n      let width = this.getDomElement().width();\r\n      if (width > minWidth) {\r\n        minWidth = width;\r\n        this.getDomElement().css({\r\n          'min-width': minWidth + 'px',\r\n        });\r\n      }\r\n    };\r\n\r\n    let updateTimeFormatBasedOnDuration = () => {\r\n      // Set time format depending on source duration\r\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\r\n      StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\r\n      playbackTimeHandler();\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackTimeHandler);\r\n    player.on(player.exports.PlayerEvent.Ready, updateTimeFormatBasedOnDuration);\r\n    player.on(player.exports.PlayerEvent.Seeked, playbackTimeHandler);\r\n\r\n    player.on(player.exports.PlayerEvent.TimeShift, updateLiveTimeshiftState);\r\n    player.on(player.exports.PlayerEvent.TimeShifted, updateLiveTimeshiftState);\r\n    player.on(player.exports.PlayerEvent.Playing, updateLiveTimeshiftState);\r\n    player.on(player.exports.PlayerEvent.Paused, updateLiveTimeshiftState);\r\n    player.on(player.exports.PlayerEvent.StallStarted, updateLiveTimeshiftState);\r\n    player.on(player.exports.PlayerEvent.StallEnded, updateLiveTimeshiftState);\r\n\r\n    let init = () => {\r\n      // Reset min-width when a new source is ready (especially for switching VOD/Live modes where the label content\r\n      // changes)\r\n      minWidth = 0;\r\n      this.getDomElement().css({\r\n        'min-width': null,\r\n      });\r\n\r\n      updateTimeFormatBasedOnDuration();\r\n    };\r\n    uimanager.getConfig().events.onUpdated.subscribe(init);\r\n\r\n    init();\r\n  }\r\n\r\n  /**\r\n   * Sets the current playback time and total duration.\r\n   * @param playbackSeconds the current playback time in seconds\r\n   * @param durationSeconds the total duration in seconds\r\n   */\r\n  setTime(playbackSeconds: number, durationSeconds: number) {\r\n    let currentTime = StringUtils.secondsToTime(playbackSeconds, this.timeFormat);\r\n    let totalTime = StringUtils.secondsToTime(durationSeconds, this.timeFormat);\r\n\r\n    switch ((<PlaybackTimeLabelConfig>this.config).timeLabelMode) {\r\n      case PlaybackTimeLabelMode.CurrentTime:\r\n        this.setText(`${currentTime}`);\r\n        break;\r\n      case PlaybackTimeLabelMode.TotalTime:\r\n        this.setText(`${totalTime}`);\r\n        break;\r\n      case PlaybackTimeLabelMode.CurrentAndTotalTime:\r\n        this.setText(`${currentTime} / ${totalTime}`);\r\n        break;\r\n      case PlaybackTimeLabelMode.RemainingTime:\r\n        let remainingTime = StringUtils.secondsToTime(durationSeconds - playbackSeconds, this.timeFormat);\r\n        this.setText(`${remainingTime}`);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the current time format\r\n   * @param timeFormat the time format\r\n   */\r\n  protected setTimeFormat(timeFormat: string): void {\r\n    this.timeFormat = timeFormat;\r\n  }\r\n}\r\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {PlayerUtils} from '../playerutils';\r\nimport { PlayerAPI, WarningEvent } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * A button that toggles between playback and pause.\r\n */\r\nexport class PlaybackToggleButton extends ToggleButton<ToggleButtonConfig> {\r\n\r\n  private static readonly CLASS_STOPTOGGLE = 'stoptoggle';\r\n  protected isPlayInitiated: boolean;\r\n\r\n  constructor(config: ToggleButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-playbacktogglebutton',\r\n      text: i18n.getLocalizer('play'),\r\n      onAriaLabel: i18n.getLocalizer('pause'),\r\n      offAriaLabel: i18n.getLocalizer('play'),\r\n    }, this.config);\r\n\r\n    this.isPlayInitiated = false;\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, handleClickEvent: boolean = true): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let isSeeking = false;\r\n\r\n    // Handler to update button state based on player state\r\n    let playbackStateHandler = () => {\r\n      // If the UI is currently seeking, playback is temporarily stopped but the buttons should\r\n      // not reflect that and stay as-is (e.g indicate playback while seeking).\r\n      if (isSeeking) {\r\n        return;\r\n      }\r\n\r\n      if (player.isPlaying() || this.isPlayInitiated) {\r\n        this.on();\r\n      } else {\r\n        this.off();\r\n      }\r\n    };\r\n\r\n    // Call handler upon these events\r\n    player.on(player.exports.PlayerEvent.Play, (e) => {\r\n      this.isPlayInitiated = true;\r\n      playbackStateHandler();\r\n    });\r\n\r\n    player.on(player.exports.PlayerEvent.Paused, (e) => {\r\n      this.isPlayInitiated = false;\r\n      playbackStateHandler();\r\n    });\r\n\r\n    player.on(player.exports.PlayerEvent.Playing, (e) => {\r\n      this.isPlayInitiated = false;\r\n      playbackStateHandler();\r\n    });\r\n    // after unloading + loading a new source, the player might be in a different playing state (from playing into stopped)\r\n    player.on(player.exports.PlayerEvent.SourceLoaded, playbackStateHandler);\r\n    uimanager.getConfig().events.onUpdated.subscribe(playbackStateHandler);\r\n    player.on(player.exports.PlayerEvent.SourceUnloaded, playbackStateHandler);\r\n    // when playback finishes, player turns to paused mode\r\n    player.on(player.exports.PlayerEvent.PlaybackFinished, playbackStateHandler);\r\n    player.on(player.exports.PlayerEvent.CastStarted, playbackStateHandler);\r\n\r\n    // When a playback attempt is rejected with warning 5008, we switch the button state back to off\r\n    // This is required for blocked autoplay, because there is no Paused event in such case\r\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\r\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\r\n        this.isPlayInitiated = false;\r\n        this.off();\r\n      }\r\n    });\r\n\r\n    const updateLiveState = () => {\r\n      const showStopToggle = player.isLive() && !PlayerUtils.isTimeShiftAvailable(player);\r\n\r\n      if (showStopToggle) {\r\n        this.getDomElement().addClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\r\n      } else {\r\n        this.getDomElement().removeClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\r\n      }\r\n    };\r\n\r\n    // Detect absence of timeshifting on live streams and add tagging class to convert button icons to play/stop\r\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\r\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\r\n\r\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(() => updateLiveState());\r\n    liveStreamDetector.onLiveChanged.subscribe(() => updateLiveState());\r\n\r\n    timeShiftDetector.detect(); // Initial detection\r\n    liveStreamDetector.detect();\r\n\r\n    if (handleClickEvent) {\r\n      // Control player by button events\r\n      // When a button event triggers a player API call, events are fired which in turn call the event handler\r\n      // above that updated the button state.\r\n      this.onClick.subscribe(() => {\r\n        if (player.isPlaying() || this.isPlayInitiated) {\r\n          player.pause('ui');\r\n        } else {\r\n          player.play('ui');\r\n        }\r\n      });\r\n    }\r\n\r\n    // Track UI seeking status\r\n    uimanager.onSeek.subscribe(() => {\r\n      isSeeking = true;\r\n    });\r\n    uimanager.onSeeked.subscribe(() => {\r\n      isSeeking = false;\r\n    });\r\n\r\n    // Startup init\r\n    playbackStateHandler();\r\n  }\r\n}\r\n","import {Container, ContainerConfig} from './container';\r\nimport {HugePlaybackToggleButton} from './hugeplaybacktogglebutton';\r\n\r\n/**\r\n * Overlays the player and displays error messages.\r\n */\r\nexport class PlaybackToggleOverlay extends Container<ContainerConfig> {\r\n\r\n  private playbackToggleButton: HugePlaybackToggleButton;\r\n\r\n  constructor(config: ContainerConfig = {}) {\r\n    super(config);\r\n\r\n    this.playbackToggleButton = new HugePlaybackToggleButton();\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-playbacktoggle-overlay',\r\n      components: [this.playbackToggleButton],\r\n    }, this.config);\r\n  }\r\n}","import {ContainerConfig, Container} from './container';\r\nimport {Component, ComponentConfig} from './component';\r\nimport {DOM} from '../dom';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {StringUtils} from '../stringutils';\r\nimport {HugeReplayButton} from './hugereplaybutton';\r\nimport { UIRecommendationConfig } from '../uiconfig';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\n\r\n/**\r\n * Overlays the player and displays recommended videos.\r\n */\r\nexport class RecommendationOverlay extends Container<ContainerConfig> {\r\n\r\n  private replayButton: HugeReplayButton;\r\n\r\n  constructor(config: ContainerConfig = {}) {\r\n    super(config);\r\n\r\n    this.replayButton = new HugeReplayButton();\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-recommendation-overlay',\r\n      hidden: true,\r\n      components: [this.replayButton],\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let clearRecommendations = () => {\r\n      for (let component of this.getComponents().slice()) {\r\n        if (component instanceof RecommendationItem) {\r\n          this.removeComponent(component);\r\n        }\r\n      }\r\n      this.updateComponents();\r\n      this.getDomElement().removeClass(this.prefixCss('recommendations'));\r\n    };\r\n\r\n    let setupRecommendations = () => {\r\n      clearRecommendations();\r\n\r\n      const recommendations = uimanager.getConfig().recommendations;\r\n\r\n      if (recommendations.length > 0) {\r\n        let index = 1;\r\n        for (let item of recommendations) {\r\n          this.addComponent(new RecommendationItem({\r\n            itemConfig: item,\r\n            cssClasses: ['recommendation-item-' + (index++)],\r\n          }));\r\n        }\r\n        this.updateComponents(); // create container DOM elements\r\n\r\n        this.getDomElement().addClass(this.prefixCss('recommendations'));\r\n      }\r\n    };\r\n\r\n    uimanager.getConfig().events.onUpdated.subscribe(setupRecommendations);\r\n    // Remove recommendations and hide overlay when source is unloaded\r\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\r\n      clearRecommendations();\r\n      this.hide();\r\n    });\r\n    // Display recommendations when playback has finished\r\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\r\n      this.show();\r\n    });\r\n    // Hide recommendations when playback starts, e.g. a restart\r\n    player.on(player.exports.PlayerEvent.Play, () => {\r\n      this.hide();\r\n    });\r\n\r\n    // Init on startup\r\n    setupRecommendations();\r\n  }\r\n}\r\n\r\n/**\r\n * Configuration interface for the {@link RecommendationItem}\r\n */\r\ninterface RecommendationItemConfig extends ComponentConfig {\r\n  itemConfig: UIRecommendationConfig;\r\n}\r\n\r\n/**\r\n * An item of the {@link RecommendationOverlay}. Used only internally in {@link RecommendationOverlay}.\r\n */\r\nclass RecommendationItem extends Component<RecommendationItemConfig> {\r\n\r\n  constructor(config: RecommendationItemConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-recommendation-item',\r\n      itemConfig: null, // this must be passed in from outside\r\n    }, this.config);\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    let config = this.config.itemConfig;\r\n\r\n    let itemElement = new DOM('a', {\r\n      'id': this.config.id,\r\n      'class': this.getCssClasses(),\r\n      'href': config.url,\r\n    }).css({ 'background-image': `url(${config.thumbnail})` });\r\n\r\n    let bgElement = new DOM('div', {\r\n      'class': this.prefixCss('background'),\r\n    });\r\n    itemElement.append(bgElement);\r\n\r\n    let titleElement = new DOM('span', {\r\n      'class': this.prefixCss('title'),\r\n    }).append(new DOM('span', {\r\n      'class': this.prefixCss('innertitle'),\r\n    }).html(config.title));\r\n    itemElement.append(titleElement);\r\n\r\n    let timeElement = new DOM('span', {\r\n      'class': this.prefixCss('duration'),\r\n    }).append(new DOM('span', {\r\n      'class': this.prefixCss('innerduration'),\r\n    }).html(config.duration ? StringUtils.secondsToTime(config.duration) : ''));\r\n    itemElement.append(timeElement);\r\n\r\n    return itemElement;\r\n  }\r\n}","import { Component, ComponentConfig } from './component';\r\nimport { DOM } from '../dom';\r\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\r\nimport { SeekBarLabel } from './seekbarlabel';\r\nimport { UIInstanceManager, SeekPreviewArgs } from '../uimanager';\r\nimport { Timeout } from '../timeout';\r\nimport { PlayerUtils } from '../playerutils';\r\nimport TimeShiftAvailabilityChangedArgs = PlayerUtils.TimeShiftAvailabilityChangedArgs;\r\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\r\nimport { TimelineMarker } from '../uiconfig';\r\nimport { PlayerAPI, PlayerEventBase } from 'bitmovin-player';\r\nimport { StringUtils } from '../stringutils';\r\nimport { SeekBarType, SeekBarController } from './seekbarcontroller';\r\nimport { i18n } from '../localization/i18n';\r\nimport { BrowserUtils } from '../browserutils';\r\nimport { TimelineMarkersHandler } from './timelinemarkershandler';\r\nimport { getMinBufferLevel } from './seekbarbufferlevel';\r\n\r\n/**\r\n * Configuration interface for the {@link SeekBar} component.\r\n */\r\nexport interface SeekBarConfig extends ComponentConfig {\r\n  /**\r\n   * The label above the seek position.\r\n   */\r\n  label?: SeekBarLabel;\r\n  /**\r\n   * Bar will be vertical instead of horizontal if set to true.\r\n   */\r\n  vertical?: boolean;\r\n  /**\r\n   * The interval in milliseconds in which the playback position on the seek bar will be updated. The shorter the\r\n   * interval, the smoother it looks and the more resource intense it is. The update interval will be kept as steady\r\n   * as possible to avoid jitter.\r\n   * Set to -1 to disable smooth updating and update it on player TimeChanged events instead.\r\n   * Default: 50 (50ms = 20fps).\r\n   */\r\n  smoothPlaybackPositionUpdateIntervalMs?: number;\r\n\r\n  /**\r\n   * Used for seekBar control increments and decrements\r\n   */\r\n  keyStepIncrements?: { leftRight: number, upDown: number };\r\n\r\n  /**\r\n   * Used for seekBar marker snapping range percentage\r\n   */\r\n  snappingRange?: number;\r\n\r\n  /**\r\n   * Used to enable/disable seek preview\r\n   */\r\n  enableSeekPreview?: boolean;\r\n}\r\n\r\n/**\r\n * Event argument interface for a seek preview event.\r\n */\r\nexport interface SeekPreviewEventArgs extends SeekPreviewArgs {\r\n  /**\r\n   * Tells if the seek preview event comes from a scrubbing.\r\n   */\r\n  scrubbing: boolean;\r\n}\r\n\r\nexport interface SeekBarMarker {\r\n  marker: TimelineMarker;\r\n  position: number;\r\n  duration?: number;\r\n  element?: DOM;\r\n}\r\n\r\n/**\r\n * A seek bar to seek within the player's media. It displays the current playback position, amount of buffed data, seek\r\n * target, and keeps status about an ongoing seek.\r\n *\r\n * The seek bar displays different 'bars':\r\n *  - the playback position, i.e. the position in the media at which the player current playback pointer is positioned\r\n *  - the buffer position, which usually is the playback position plus the time span that is already buffered ahead\r\n *  - the seek position, used to preview to where in the timeline a seek will jump to\r\n */\r\nexport class SeekBar extends Component<SeekBarConfig> {\r\n\r\n  public static readonly SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED = -1;\r\n\r\n  /**\r\n   * The CSS class that is added to the DOM element while the seek bar is in 'seeking' state.\r\n   */\r\n  private static readonly CLASS_SEEKING = 'seeking';\r\n\r\n  private seekBar: DOM;\r\n  private seekBarPlaybackPosition: DOM;\r\n  private seekBarPlaybackPositionMarker: DOM;\r\n  private seekBarBufferPosition: DOM;\r\n  private seekBarSeekPosition: DOM;\r\n  private seekBarBackdrop: DOM;\r\n\r\n  private label: SeekBarLabel;\r\n\r\n  private seekBarMarkersContainer: DOM;\r\n  private timelineMarkersHandler: TimelineMarkersHandler;\r\n\r\n  private player: PlayerAPI;\r\n\r\n  protected seekBarType: SeekBarType;\r\n\r\n  protected isUiShown: boolean;\r\n\r\n  /**\r\n   * Buffer of the the current playback position. The position must be buffered in case the element\r\n   * needs to be refreshed with {@link #refreshPlaybackPosition}.\r\n   * @type {number}\r\n   */\r\n  private playbackPositionPercentage = 0;\r\n\r\n  private smoothPlaybackPositionUpdater: Timeout;\r\n  private pausedTimeshiftUpdater: Timeout;\r\n\r\n  private isUserSeeking = false;\r\n\r\n  private seekBarEvents = {\r\n    /**\r\n     * Fired when a scrubbing seek operation is started.\r\n     */\r\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\r\n    /**\r\n     * Fired during a scrubbing seek to indicate that the seek preview (i.e. the video frame) should be updated.\r\n     */\r\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewEventArgs>(),\r\n    /**\r\n     * Fired when a scrubbing seek has finished or when a direct seek is issued.\r\n     */\r\n    onSeeked: new EventDispatcher<SeekBar, number>(),\r\n  };\r\n\r\n  constructor(config: SeekBarConfig = {}) {\r\n    super(config);\r\n\r\n    const keyStepIncrements = this.config.keyStepIncrements || {\r\n      leftRight: 1,\r\n      upDown: 5,\r\n    };\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-seekbar',\r\n      vertical: false,\r\n      smoothPlaybackPositionUpdateIntervalMs: 50,\r\n      keyStepIncrements,\r\n      ariaLabel: i18n.getLocalizer('seekBar'),\r\n      tabIndex: 0,\r\n      snappingRange: 1,\r\n      enableSeekPreview: true,\r\n    }, this.config);\r\n\r\n    this.label = this.config.label;\r\n  }\r\n\r\n  initialize(): void {\r\n    super.initialize();\r\n\r\n    if (this.hasLabel()) {\r\n      this.getLabel().initialize();\r\n    }\r\n  }\r\n\r\n  protected setAriaSliderMinMax(min: string, max: string) {\r\n    this.getDomElement().attr('aria-valuemin', min);\r\n    this.getDomElement().attr('aria-valuemax', max);\r\n  }\r\n\r\n  private setAriaSliderValues() {\r\n    if (this.seekBarType === SeekBarType.Live) {\r\n      const timeshiftValue = Math.ceil(this.player.getTimeShift()).toString();\r\n      this.getDomElement().attr('aria-valuenow', timeshiftValue);\r\n      this.getDomElement().attr('aria-valuetext', `${i18n.performLocalization(i18n.getLocalizer('seekBar.timeshift'))} ${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${timeshiftValue}`);\r\n    } else if (this.seekBarType === SeekBarType.Vod) {\r\n      const ariaValueText = `${StringUtils.secondsToText(this.player.getCurrentTime())} ${i18n.performLocalization(i18n.getLocalizer('seekBar.durationText'))} ${StringUtils.secondsToText(this.player.getDuration())}`;\r\n      this.getDomElement().attr('aria-valuenow', Math.floor(this.player.getCurrentTime()).toString());\r\n      this.getDomElement().attr('aria-valuetext', ariaValueText);\r\n    }\r\n  }\r\n\r\n  private getPlaybackPositionPercentage(): number {\r\n    if (this.player.isLive()) {\r\n      return 100 - (100 / this.player.getMaxTimeShift() * this.player.getTimeShift());\r\n    }\r\n\r\n    return 100 / this.player.getDuration() * this.getRelativeCurrentTime();\r\n  }\r\n\r\n  private updateBufferLevel(playbackPositionPercentage: number): void {\r\n\r\n    let bufferLoadedPercentageLevel: number;\r\n    if (this.player.isLive()) {\r\n      // Always show full buffer for live streams\r\n      bufferLoadedPercentageLevel = 100;\r\n    } else {\r\n      bufferLoadedPercentageLevel = playbackPositionPercentage + getMinBufferLevel(this.player);\r\n    }\r\n\r\n    this.setBufferPosition(bufferLoadedPercentageLevel);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, configureSeek: boolean = true): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.player = player;\r\n\r\n    // Apply scaling transform to the backdrop bar to have all bars rendered similarly\r\n    // (the call must be up here to be executed for the volume slider as well)\r\n    this.setPosition(this.seekBarBackdrop, 100);\r\n\r\n    // Add seekbar controls to the seekbar\r\n    const seekBarController = new SeekBarController(this.config.keyStepIncrements, player, uimanager.getConfig().volumeController);\r\n\r\n    seekBarController.setSeekBarControls(this.getDomElement(), () => this.seekBarType);\r\n\r\n    // The configureSeek flag can be used by subclasses to disable configuration as seek bar. E.g. the volume\r\n    // slider is reusing this component but adds its own functionality, and does not need the seek functionality.\r\n    // This is actually a hack, the proper solution would be for both seek bar and volume sliders to extend\r\n    // a common base slider component and implement their functionality there.\r\n    if (!configureSeek) {\r\n      this.seekBarType = SeekBarType.Volume;\r\n\r\n      return;\r\n    }\r\n\r\n    uimanager.onControlsShow.subscribe(() => {\r\n      this.isUiShown = true;\r\n    });\r\n\r\n    uimanager.onControlsHide.subscribe(() => {\r\n      this.isUiShown = false;\r\n    });\r\n\r\n    let isPlaying = false;\r\n    let scrubbing = false;\r\n    let isPlayerSeeking = false;\r\n\r\n    // Update playback and buffer positions\r\n    let playbackPositionHandler = (event: PlayerEventBase = null, forceUpdate: boolean = false) => {\r\n      if (this.isUserSeeking) {\r\n        // We caught a seek preview seek, do not update the seekbar\r\n        return;\r\n      }\r\n\r\n      let playbackPositionPercentage = this.getPlaybackPositionPercentage();\r\n\r\n      this.updateBufferLevel(playbackPositionPercentage);\r\n\r\n      // The segment request finished is used to help the playback position move, when the smooth playback position is not enabled.\r\n      // At the same time when the user is scrubbing, we also move the position of the seekbar to display a preview during scrubbing.\r\n      // When the user is scrubbing we do not record this as a user seek operation, as the user has yet to finish their seek,\r\n      // but we should not move the playback position to not create a jumping behaviour.\r\n      if (scrubbing && event.type === player.exports.PlayerEvent.SegmentRequestFinished && playbackPositionPercentage !== this.playbackPositionPercentage) {\r\n        playbackPositionPercentage = this.playbackPositionPercentage;\r\n      }\r\n\r\n      if (player.isLive()) {\r\n        if (player.getMaxTimeShift() === 0) {\r\n          // This case must be explicitly handled to avoid division by zero\r\n          this.setPlaybackPosition(100);\r\n        } else {\r\n          if (!this.isSeeking()) {\r\n            this.setPlaybackPosition(playbackPositionPercentage);\r\n          }\r\n\r\n          this.setAriaSliderMinMax(player.getMaxTimeShift().toString(), '0');\r\n        }\r\n      } else {\r\n        // Update playback position only in paused state or in the initial startup state where player is neither\r\n        // paused nor playing. Playback updates are handled in the Timeout below.\r\n        const isInInitialStartupState = this.config.smoothPlaybackPositionUpdateIntervalMs === SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED\r\n            || forceUpdate || player.isPaused();\r\n        const isNeitherPausedNorPlaying = player.isPaused() === player.isPlaying();\r\n\r\n        if ((isInInitialStartupState || isNeitherPausedNorPlaying) && !this.isSeeking()) {\r\n          this.setPlaybackPosition(playbackPositionPercentage);\r\n        }\r\n\r\n        this.setAriaSliderMinMax('0', player.getDuration().toString());\r\n      }\r\n\r\n      if (this.isUiShown) {\r\n        this.setAriaSliderValues();\r\n      }\r\n    };\r\n\r\n    // Update seekbar upon these events\r\n    // init playback position when the player is ready\r\n    player.on(player.exports.PlayerEvent.Ready, playbackPositionHandler);\r\n    // update playback position when it changes\r\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackPositionHandler);\r\n    // update bufferlevel when buffering is complete\r\n    player.on(player.exports.PlayerEvent.StallEnded, playbackPositionHandler);\r\n    // update playback position when a timeshift has finished\r\n    player.on(player.exports.PlayerEvent.TimeShifted, playbackPositionHandler);\r\n    // update bufferlevel when a segment has been downloaded\r\n    player.on(player.exports.PlayerEvent.SegmentRequestFinished, playbackPositionHandler);\r\n\r\n    this.configureLivePausedTimeshiftUpdater(player, uimanager, playbackPositionHandler);\r\n\r\n    // Seek handling\r\n    let onPlayerSeek = () => {\r\n      isPlayerSeeking = true;\r\n      this.setSeeking(true);\r\n      scrubbing = false;\r\n    };\r\n\r\n    let onPlayerSeeked = (event: PlayerEventBase = null, forceUpdate: boolean = false ) => {\r\n      isPlayerSeeking = false;\r\n      this.setSeeking(false);\r\n\r\n      // update playback position when a seek has finished\r\n      playbackPositionHandler(event, forceUpdate);\r\n    };\r\n\r\n    let restorePlayingState = function () {\r\n      // Continue playback after seek if player was playing when seek started\r\n      if (isPlaying) {\r\n        // use the same issuer here as in the pause on seek\r\n        player.play('ui-seek');\r\n      }\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.Seek, onPlayerSeek);\r\n    player.on(player.exports.PlayerEvent.Seeked, onPlayerSeeked);\r\n    player.on(player.exports.PlayerEvent.TimeShift, onPlayerSeek);\r\n    player.on(player.exports.PlayerEvent.TimeShifted, onPlayerSeeked);\r\n\r\n    this.onSeek.subscribe((sender) => {\r\n      this.isUserSeeking = true; // track seeking status so we can catch events from seek preview seeks\r\n\r\n      // Notify UI manager of started seek\r\n      uimanager.onSeek.dispatch(sender);\r\n\r\n      // Save current playback state before performing the seek\r\n      if (!isPlayerSeeking) {\r\n        isPlaying = player.isPlaying();\r\n\r\n        // Pause playback while seeking\r\n        if (isPlaying) {\r\n          // use a different issuer here, as play/pause on seek is not \"really\" triggerd by the user\r\n          player.pause('ui-seek');\r\n        }\r\n      }\r\n\r\n    });\r\n    this.onSeekPreview.subscribe((sender: SeekBar, args: SeekPreviewEventArgs) => {\r\n      // Notify UI manager of seek preview\r\n      uimanager.onSeekPreview.dispatch(sender, args);\r\n      scrubbing = args.scrubbing;\r\n    });\r\n\r\n    // Set enableSeekPreview if set in the uimanager config\r\n    if (typeof uimanager.getConfig().enableSeekPreview === 'boolean') {\r\n      this.config.enableSeekPreview = uimanager.getConfig().enableSeekPreview;\r\n    }\r\n\r\n    // Rate-limited scrubbing seek\r\n    if (this.config.enableSeekPreview) {\r\n      this.onSeekPreview.subscribeRateLimited(this.seekWhileScrubbing, 200);\r\n    }\r\n\r\n    this.onSeeked.subscribe((sender, percentage) => {\r\n      this.isUserSeeking = false;\r\n\r\n      // Do the seek\r\n      this.seek(percentage);\r\n\r\n      // Notify UI manager of finished seek\r\n      uimanager.onSeeked.dispatch(sender);\r\n\r\n      // Continue playback after seek if player was playing when seek started\r\n      restorePlayingState();\r\n    });\r\n\r\n    if (this.hasLabel()) {\r\n      // Configure a seekbar label that is internal to the seekbar)\r\n      this.getLabel().configure(player, uimanager);\r\n    }\r\n\r\n    // Hide seekbar for live sources without timeshift\r\n    let isLive = false;\r\n    let hasTimeShift = false;\r\n    let switchVisibility = (isLive: boolean, hasTimeShift: boolean) => {\r\n      if (isLive && !hasTimeShift) {\r\n        this.hide();\r\n      } else {\r\n        this.show();\r\n      }\r\n      playbackPositionHandler(null, true);\r\n      this.refreshPlaybackPosition();\r\n    };\r\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\r\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\r\n      isLive = args.live;\r\n      if (isLive && this.smoothPlaybackPositionUpdater != null) {\r\n        this.smoothPlaybackPositionUpdater.clear();\r\n        this.seekBarType = SeekBarType.Live;\r\n      } else {\r\n        this.seekBarType = SeekBarType.Vod;\r\n      }\r\n      switchVisibility(isLive, hasTimeShift);\r\n    });\r\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\r\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe((sender, args: TimeShiftAvailabilityChangedArgs) => {\r\n      hasTimeShift = args.timeShiftAvailable;\r\n      switchVisibility(isLive, hasTimeShift);\r\n    });\r\n    // Initial detection\r\n    liveStreamDetector.detect();\r\n    timeShiftDetector.detect();\r\n\r\n    // Refresh the playback position when the player resized or the UI is configured. The playback position marker\r\n    // is positioned absolutely and must therefore be updated when the size of the seekbar changes.\r\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\r\n      this.refreshPlaybackPosition();\r\n    });\r\n    // Additionally, when this code is called, the seekbar is not part of the UI yet and therefore does not have a size,\r\n    // resulting in a wrong initial position of the marker. Refreshing it once the UI is configured solved this issue.\r\n    uimanager.onConfigured.subscribe(() => {\r\n      this.refreshPlaybackPosition();\r\n    });\r\n    // It can also happen when a new source is loaded\r\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\r\n      this.refreshPlaybackPosition();\r\n    });\r\n    // Add markers when a source is loaded or update when a marker is added or removed\r\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\r\n      playbackPositionHandler();\r\n    });\r\n\r\n    // Set the snappingRange if set in the uimanager config\r\n    if (typeof uimanager.getConfig().seekbarSnappingRange === 'number') {\r\n      this.config.snappingRange = uimanager.getConfig().seekbarSnappingRange;\r\n    }\r\n\r\n    // Initialize seekbar\r\n    playbackPositionHandler(); // Set the playback position\r\n    this.setBufferPosition(0);\r\n    this.setSeekPosition(0);\r\n    if (this.config.smoothPlaybackPositionUpdateIntervalMs !== SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED) {\r\n      this.configureSmoothPlaybackPositionUpdater(player, uimanager);\r\n    }\r\n\r\n    // Initialize markers\r\n    this.initializeTimelineMarkers(player, uimanager);\r\n  }\r\n\r\n  private initializeTimelineMarkers(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    const timelineMarkerConfig = {\r\n      cssPrefix: this.config.cssPrefix,\r\n      snappingRange: this.config.snappingRange,\r\n    };\r\n    this.timelineMarkersHandler = new TimelineMarkersHandler(timelineMarkerConfig, () => this.seekBar.width(), this.seekBarMarkersContainer);\r\n    this.timelineMarkersHandler.initialize(player, uimanager);\r\n  }\r\n\r\n  private seekWhileScrubbing = (sender: SeekBar, args: SeekPreviewEventArgs) => {\r\n    if (args.scrubbing) {\r\n      this.seek(args.position);\r\n    }\r\n  };\r\n\r\n  private seek = (percentage: number) => {\r\n    if (this.player.isLive()) {\r\n      const maxTimeShift = this.player.getMaxTimeShift();\r\n      this.player.timeShift(maxTimeShift - (maxTimeShift * (percentage / 100)), 'ui');\r\n    } else {\r\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\r\n      const relativeSeekTarget = this.player.getDuration() * (percentage / 100);\r\n      const absoluteSeekTarget = relativeSeekTarget + seekableRangeStart;\r\n      this.player.seek(absoluteSeekTarget, 'ui');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Update seekbar while a live stream with DVR window is paused.\r\n   * The playback position stays still and the position indicator visually moves towards the back.\r\n   */\r\n  private configureLivePausedTimeshiftUpdater(\r\n    player: PlayerAPI,\r\n    uimanager: UIInstanceManager,\r\n    playbackPositionHandler: () => void,\r\n  ): void {\r\n    // Regularly update the playback position while the timeout is active\r\n    this.pausedTimeshiftUpdater = new Timeout(1000, playbackPositionHandler, true);\r\n\r\n    // Start updater when a live stream with timeshift window is paused\r\n    player.on(player.exports.PlayerEvent.Paused, () => {\r\n      if (player.isLive() && player.getMaxTimeShift() < 0) {\r\n        this.pausedTimeshiftUpdater.start();\r\n      }\r\n    });\r\n\r\n    // Stop updater when playback continues (no matter if the updater was started before)\r\n    player.on(player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\r\n  }\r\n\r\n  private configureSmoothPlaybackPositionUpdater(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    /*\r\n     * Playback position update\r\n     *\r\n     * We do not update the position directly from the TimeChanged event, because it arrives very jittery and\r\n     * results in a jittery position indicator since the CSS transition time is statically set.\r\n     * To work around this issue, we maintain a local playback position that is updated in a stable regular interval\r\n     * and kept in sync with the player.\r\n     */\r\n    let currentTimeSeekBar = 0;\r\n    let currentTimePlayer = 0;\r\n    let updateIntervalMs = 50;\r\n    let currentTimeUpdateDeltaSecs = updateIntervalMs / 1000;\r\n\r\n    this.smoothPlaybackPositionUpdater = new Timeout(updateIntervalMs, () => {\r\n      if (this.isSeeking()) {\r\n        return;\r\n      }\r\n\r\n      currentTimeSeekBar += currentTimeUpdateDeltaSecs;\r\n\r\n      try {\r\n        currentTimePlayer = this.getRelativeCurrentTime();\r\n      } catch (error) {\r\n        // Detect if the player has been destroyed and stop updating if so\r\n        if (error instanceof player.exports.PlayerAPINotAvailableError) {\r\n          this.smoothPlaybackPositionUpdater.clear();\r\n        }\r\n\r\n        // If the current time cannot be read it makes no sense to continue\r\n        return;\r\n      }\r\n\r\n      // Sync currentTime of seekbar to player\r\n      let currentTimeDelta = currentTimeSeekBar - currentTimePlayer;\r\n      // If the delta is larger that 2 secs, directly jump the seekbar to the\r\n      // player time instead of smoothly fast forwarding/rewinding.\r\n      if (Math.abs(currentTimeDelta) > 2) {\r\n        currentTimeSeekBar = currentTimePlayer;\r\n      }\r\n      // If currentTimeDelta is negative and below the adjustment threshold,\r\n      // the player is ahead of the seekbar and we 'fast forward' the seekbar\r\n      else if (currentTimeDelta <= -currentTimeUpdateDeltaSecs) {\r\n        currentTimeSeekBar += currentTimeUpdateDeltaSecs;\r\n      }\r\n      // If currentTimeDelta is positive and above the adjustment threshold,\r\n      // the player is behind the seekbar and we 'rewind' the seekbar\r\n      else if (currentTimeDelta >= currentTimeUpdateDeltaSecs) {\r\n        currentTimeSeekBar -= currentTimeUpdateDeltaSecs;\r\n      }\r\n\r\n      let playbackPositionPercentage = 100 / player.getDuration() * currentTimeSeekBar;\r\n      this.setPlaybackPosition(playbackPositionPercentage);\r\n    }, true);\r\n\r\n    let startSmoothPlaybackPositionUpdater = () => {\r\n      if (!player.isLive()) {\r\n        currentTimeSeekBar = this.getRelativeCurrentTime();\r\n        this.smoothPlaybackPositionUpdater.start();\r\n      }\r\n    };\r\n\r\n    let stopSmoothPlaybackPositionUpdater = () => {\r\n      this.smoothPlaybackPositionUpdater.clear();\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.Play, startSmoothPlaybackPositionUpdater);\r\n    player.on(player.exports.PlayerEvent.Playing, startSmoothPlaybackPositionUpdater);\r\n    player.on(player.exports.PlayerEvent.Paused, stopSmoothPlaybackPositionUpdater);\r\n    player.on(player.exports.PlayerEvent.PlaybackFinished, stopSmoothPlaybackPositionUpdater);\r\n    player.on(player.exports.PlayerEvent.Seeked, () => {\r\n      currentTimeSeekBar = this.getRelativeCurrentTime();\r\n    });\r\n    player.on(player.exports.PlayerEvent.SourceUnloaded, stopSmoothPlaybackPositionUpdater);\r\n\r\n    if (player.isPlaying()) {\r\n      startSmoothPlaybackPositionUpdater();\r\n    }\r\n  }\r\n\r\n  private getRelativeCurrentTime(): number {\r\n    return PlayerUtils.getCurrentTimeRelativeToSeekableRange(this.player);\r\n  }\r\n\r\n  release(): void {\r\n    super.release();\r\n\r\n    if (this.smoothPlaybackPositionUpdater) { // object must not necessarily exist, e.g. in volume slider subclass\r\n      this.smoothPlaybackPositionUpdater.clear();\r\n    }\r\n\r\n    if (this.pausedTimeshiftUpdater) {\r\n      this.pausedTimeshiftUpdater.clear();\r\n    }\r\n\r\n    if (this.config.enableSeekPreview) {\r\n      this.onSeekPreview.unsubscribe(this.seekWhileScrubbing);\r\n    }\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    if (this.config.vertical) {\r\n      this.config.cssClasses.push('vertical');\r\n    }\r\n\r\n    let seekBarContainer = new DOM('div', {\r\n      'id': this.config.id,\r\n      'class': this.getCssClasses(),\r\n      'role': 'slider',\r\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\r\n      'tabindex': this.config.tabIndex.toString(),\r\n    });\r\n\r\n    let seekBar = new DOM('div', {\r\n      'class': this.prefixCss('seekbar'),\r\n    });\r\n    this.seekBar = seekBar;\r\n\r\n    // Indicator that shows the buffer fill level\r\n    let seekBarBufferLevel = new DOM('div', {\r\n      'class': this.prefixCss('seekbar-bufferlevel'),\r\n    });\r\n    this.seekBarBufferPosition = seekBarBufferLevel;\r\n\r\n    // Indicator that shows the current playback position\r\n    let seekBarPlaybackPosition = new DOM('div', {\r\n      'class': this.prefixCss('seekbar-playbackposition'),\r\n    });\r\n    this.seekBarPlaybackPosition = seekBarPlaybackPosition;\r\n\r\n    // A marker of the current playback position, e.g. a dot or line\r\n    let seekBarPlaybackPositionMarker = new DOM('div', {\r\n      'class': this.prefixCss('seekbar-playbackposition-marker'),\r\n    });\r\n    this.seekBarPlaybackPositionMarker = seekBarPlaybackPositionMarker;\r\n\r\n    // Indicator that show where a seek will go to\r\n    let seekBarSeekPosition = new DOM('div', {\r\n      'class': this.prefixCss('seekbar-seekposition'),\r\n    });\r\n    this.seekBarSeekPosition = seekBarSeekPosition;\r\n\r\n    // Indicator that shows the full seekbar\r\n    let seekBarBackdrop = new DOM('div', {\r\n      'class': this.prefixCss('seekbar-backdrop'),\r\n    });\r\n    this.seekBarBackdrop = seekBarBackdrop;\r\n\r\n    let seekBarChapterMarkersContainer = new DOM('div', {\r\n      'class': this.prefixCss('seekbar-markers'),\r\n    });\r\n    this.seekBarMarkersContainer = seekBarChapterMarkersContainer;\r\n\r\n    seekBar.append(this.seekBarBackdrop, this.seekBarBufferPosition, this.seekBarSeekPosition,\r\n      this.seekBarPlaybackPosition, this.seekBarMarkersContainer, this.seekBarPlaybackPositionMarker);\r\n\r\n    let seeking = false;\r\n\r\n    // Define handler functions so we can attach/remove them later\r\n    let mouseTouchMoveHandler = (e: MouseEvent | TouchEvent) => {\r\n      e.preventDefault();\r\n      // Avoid propagation to VR handler\r\n      if (this.player.vr != null) {\r\n        e.stopPropagation();\r\n      }\r\n\r\n      let targetPercentage = 100 * this.getOffset(e);\r\n      this.setSeekPosition(targetPercentage);\r\n      this.setPlaybackPosition(targetPercentage);\r\n      this.onSeekPreviewEvent(targetPercentage, true);\r\n    };\r\n\r\n    let mouseTouchUpHandler = (e: MouseEvent | TouchEvent) => {\r\n      e.preventDefault();\r\n\r\n      // Remove handlers, seek operation is finished\r\n      new DOM(document).off('touchmove mousemove', mouseTouchMoveHandler);\r\n      new DOM(document).off('touchend mouseup', mouseTouchUpHandler);\r\n\r\n      let targetPercentage = 100 * this.getOffset(e);\r\n      let snappedChapter = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(targetPercentage);\r\n\r\n      this.setSeeking(false);\r\n      seeking = false;\r\n\r\n      // Fire seeked event\r\n      this.onSeekedEvent(snappedChapter ? snappedChapter.position : targetPercentage);\r\n    };\r\n\r\n    // A seek always start with a touchstart or mousedown directly on the seekbar.\r\n    // To track a mouse seek also outside the seekbar (for touch events this works automatically),\r\n    // so the user does not need to take care that the mouse always stays on the seekbar, we attach the mousemove\r\n    // and mouseup handlers to the whole document. A seek is triggered when the user lifts the mouse key.\r\n    // A seek mouse gesture is thus basically a click with a long time frame between down and up events.\r\n    seekBar.on('touchstart mousedown', (e: MouseEvent | TouchEvent) => {\r\n      let isTouchEvent = BrowserUtils.isTouchSupported && this.isTouchEvent(e);\r\n\r\n      // Prevent selection of DOM elements (also prevents mousedown if current event is touchstart)\r\n      e.preventDefault();\r\n      // Avoid propagation to VR handler\r\n      if (this.player.vr != null) {\r\n        e.stopPropagation();\r\n      }\r\n\r\n      this.setSeeking(true); // Set seeking class on DOM element\r\n      seeking = true; // Set seek tracking flag\r\n\r\n      // Fire seeked event\r\n      this.onSeekEvent();\r\n\r\n      // Add handler to track the seek operation over the whole document\r\n      new DOM(document).on(isTouchEvent ? 'touchmove' : 'mousemove', mouseTouchMoveHandler);\r\n      new DOM(document).on(isTouchEvent ? 'touchend' : 'mouseup', mouseTouchUpHandler);\r\n    });\r\n\r\n    // Display seek target indicator when mouse hovers or finger slides over seekbar\r\n    seekBar.on('touchmove mousemove', (e: MouseEvent | TouchEvent) => {\r\n      e.preventDefault();\r\n\r\n      if (seeking) {\r\n        mouseTouchMoveHandler(e);\r\n      }\r\n\r\n      let position = 100 * this.getOffset(e);\r\n      this.setSeekPosition(position);\r\n\r\n      this.onSeekPreviewEvent(position, false);\r\n\r\n      if (this.hasLabel() && this.getLabel().isHidden()) {\r\n        this.getLabel().show();\r\n      }\r\n    });\r\n\r\n    // Hide seek target indicator when mouse or finger leaves seekbar\r\n    seekBar.on('touchend mouseleave', (e: MouseEvent | TouchEvent) => {\r\n      e.preventDefault();\r\n\r\n      this.setSeekPosition(0);\r\n\r\n      if (this.hasLabel()) {\r\n        this.getLabel().hide();\r\n      }\r\n    });\r\n\r\n    seekBarContainer.append(seekBar);\r\n\r\n    if (this.label) {\r\n      seekBarContainer.append(this.label.getDomElement());\r\n    }\r\n\r\n    return seekBarContainer;\r\n  }\r\n\r\n  /**\r\n   * Gets the horizontal offset of a mouse/touch event point from the left edge of the seek bar.\r\n   * @param eventPageX the pageX coordinate of an event to calculate the offset from\r\n   * @returns {number} a number in the range of [0, 1], where 0 is the left edge and 1 is the right edge\r\n   */\r\n  private getHorizontalOffset(eventPageX: number): number {\r\n    let elementOffsetPx = this.seekBar.offset().left;\r\n    let widthPx = this.seekBar.width();\r\n    let offsetPx = eventPageX - elementOffsetPx;\r\n    let offset = 1 / widthPx * offsetPx;\r\n\r\n    return this.sanitizeOffset(offset);\r\n  }\r\n\r\n  /**\r\n   * Gets the vertical offset of a mouse/touch event point from the bottom edge of the seek bar.\r\n   * @param eventPageY the pageX coordinate of an event to calculate the offset from\r\n   * @returns {number} a number in the range of [0, 1], where 0 is the bottom edge and 1 is the top edge\r\n   */\r\n  private getVerticalOffset(eventPageY: number): number {\r\n    let elementOffsetPx = this.seekBar.offset().top;\r\n    let widthPx = this.seekBar.height();\r\n    let offsetPx = eventPageY - elementOffsetPx;\r\n    let offset = 1 / widthPx * offsetPx;\r\n\r\n    return 1 - this.sanitizeOffset(offset);\r\n  }\r\n\r\n  /**\r\n   * Gets the mouse or touch event offset for the current configuration (horizontal or vertical).\r\n   * @param e the event to calculate the offset from\r\n   * @returns {number} a number in the range of [0, 1]\r\n   * @see #getHorizontalOffset\r\n   * @see #getVerticalOffset\r\n   */\r\n  private getOffset(e: MouseEvent | TouchEvent): number {\r\n    if (BrowserUtils.isTouchSupported && this.isTouchEvent(e)) {\r\n      if (this.config.vertical) {\r\n        return this.getVerticalOffset(e.type === 'touchend' ? e.changedTouches[0].pageY : e.touches[0].pageY);\r\n      } else {\r\n        return this.getHorizontalOffset(e.type === 'touchend' ? e.changedTouches[0].pageX : e.touches[0].pageX);\r\n      }\r\n    }\r\n    else if (e instanceof MouseEvent) {\r\n      if (this.config.vertical) {\r\n        return this.getVerticalOffset(e.pageY);\r\n      } else {\r\n        return this.getHorizontalOffset(e.pageX);\r\n      }\r\n    }\r\n    else {\r\n      if (console) {\r\n        console.warn('invalid event');\r\n      }\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sanitizes the mouse offset to the range of [0, 1].\r\n   *\r\n   * When tracking the mouse outside the seek bar, the offset can be outside the desired range and this method\r\n   * limits it to the desired range. E.g. a mouse event left of the left edge of a seek bar yields an offset below\r\n   * zero, but to display the seek target on the seek bar, we need to limit it to zero.\r\n   *\r\n   * @param offset the offset to sanitize\r\n   * @returns {number} the sanitized offset.\r\n   */\r\n  private sanitizeOffset(offset: number) {\r\n    // Since we track mouse moves over the whole document, the target can be outside the seek range,\r\n    // and we need to limit it to the [0, 1] range.\r\n    if (offset < 0) {\r\n      offset = 0;\r\n    } else if (offset > 1) {\r\n      offset = 1;\r\n    }\r\n\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n   * Sets the position of the playback position indicator.\r\n   * @param percent a number between 0 and 100 as returned by the player\r\n   */\r\n  setPlaybackPosition(percent: number) {\r\n    this.playbackPositionPercentage = percent;\r\n\r\n    // Set position of the bar\r\n    this.setPosition(this.seekBarPlaybackPosition, percent);\r\n\r\n    // Set position of the marker\r\n    let totalSize = (this.config.vertical ? (this.seekBar.height() - this.seekBarPlaybackPositionMarker.height()) : this.seekBar.width());\r\n    let px = (totalSize) / 100 * percent;\r\n    if (this.config.vertical) {\r\n      px = this.seekBar.height() - px - this.seekBarPlaybackPositionMarker.height();\r\n    }\r\n\r\n    let style = this.config.vertical ?\r\n      // -ms-transform required for IE9\r\n      // -webkit-transform required for Android 4.4 WebView\r\n      {\r\n        'transform': 'translateY(' + px + 'px)',\r\n        '-ms-transform': 'translateY(' + px + 'px)',\r\n        '-webkit-transform': 'translateY(' + px + 'px)',\r\n      } :\r\n      {\r\n        'transform': 'translateX(' + px + 'px)',\r\n        '-ms-transform': 'translateX(' + px + 'px)',\r\n        '-webkit-transform': 'translateX(' + px + 'px)',\r\n      };\r\n    this.seekBarPlaybackPositionMarker.css(style);\r\n  }\r\n\r\n  /**\r\n   * Refreshes the playback position. Can be used by subclasses to refresh the position when\r\n   * the size of the component changes.\r\n   */\r\n  protected refreshPlaybackPosition() {\r\n    this.setPlaybackPosition(this.playbackPositionPercentage);\r\n  }\r\n\r\n  /**\r\n   * Sets the position until which media is buffered.\r\n   * @param percent a number between 0 and 100\r\n   */\r\n  setBufferPosition(percent: number) {\r\n    this.setPosition(this.seekBarBufferPosition, percent);\r\n  }\r\n\r\n  /**\r\n   * Sets the position where a seek, if executed, would jump to.\r\n   * @param percent a number between 0 and 100\r\n   */\r\n  setSeekPosition(percent: number) {\r\n    this.setPosition(this.seekBarSeekPosition, percent);\r\n  }\r\n\r\n  /**\r\n   * Set the actual position (width or height) of a DOM element that represent a bar in the seek bar.\r\n   * @param element the element to set the position for\r\n   * @param percent a number between 0 and 100\r\n   */\r\n  private setPosition(element: DOM, percent: number) {\r\n    let scale = percent / 100;\r\n\r\n    // When the scale is exactly 1 or very near 1 (and the browser internally rounds it to 1), browsers seem to render\r\n    // the elements differently and the height gets slightly off, leading to mismatching heights when e.g. the buffer\r\n    // level bar has a width of 1 and the playback position bar has a width < 1. A jittering buffer level around 1\r\n    // leads to an even worse flickering effect.\r\n    // Various changes in CSS styling and DOM hierarchy did not solve the issue so the workaround is to avoid a scale\r\n    // of exactly 1.\r\n    if (scale >= 0.99999 && scale <= 1.00001) {\r\n      scale = 0.99999;\r\n    }\r\n\r\n    let style = this.config.vertical ?\r\n      // -ms-transform required for IE9\r\n      // -webkit-transform required for Android 4.4 WebView\r\n      {\r\n        'transform': 'scaleY(' + scale + ')',\r\n        '-ms-transform': 'scaleY(' + scale + ')',\r\n        '-webkit-transform': 'scaleY(' + scale + ')',\r\n      } :\r\n      {\r\n        'transform': 'scaleX(' + scale + ')',\r\n        '-ms-transform': 'scaleX(' + scale + ')',\r\n        '-webkit-transform': 'scaleX(' + scale + ')',\r\n      };\r\n    element.css(style);\r\n  }\r\n\r\n  /**\r\n   * Puts the seek bar into or out of seeking state by adding/removing a class to the DOM element. This can be used\r\n   * to adjust the styling while seeking.\r\n   *\r\n   * @param seeking should be true when entering seek state, false when exiting the seek state\r\n   */\r\n  setSeeking(seeking: boolean) {\r\n    if (seeking) {\r\n      this.getDomElement().addClass(this.prefixCss(SeekBar.CLASS_SEEKING));\r\n    } else {\r\n      this.getDomElement().removeClass(this.prefixCss(SeekBar.CLASS_SEEKING));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the seek bar is currently in the seek state.\r\n   * @returns {boolean} true if in seek state, else false\r\n   */\r\n  isSeeking(): boolean {\r\n    return this.getDomElement().hasClass(this.prefixCss(SeekBar.CLASS_SEEKING));\r\n  }\r\n\r\n  /**\r\n   * Checks if the seek bar has a {@link SeekBarLabel}.\r\n   * @returns {boolean} true if the seek bar has a label, else false\r\n   */\r\n  hasLabel(): boolean {\r\n    return this.label != null;\r\n  }\r\n\r\n  /**\r\n   * Gets the label of this seek bar.\r\n   * @returns {SeekBarLabel} the label if this seek bar has a label, else null\r\n   */\r\n  getLabel(): SeekBarLabel | null {\r\n    return this.label;\r\n  }\r\n\r\n  protected onSeekEvent() {\r\n    this.seekBarEvents.onSeek.dispatch(this);\r\n  }\r\n\r\n  protected onSeekPreviewEvent(percentage: number, scrubbing: boolean) {\r\n    let snappedMarker = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(percentage);\r\n\r\n    let seekPositionPercentage = percentage;\r\n\r\n    if (snappedMarker) {\r\n      if (snappedMarker.duration > 0) {\r\n        if (percentage < snappedMarker.position) {\r\n          // Snap the position to the start of the interval if the seek is within the left snap margin\r\n          // We know that we are within a snap margin when we are outside the marker interval but still\r\n          // have a snappedMarker\r\n          seekPositionPercentage = snappedMarker.position;\r\n        } else if (percentage > snappedMarker.position + snappedMarker.duration) {\r\n          // Snap the position to the end of the interval if the seek is within the right snap margin\r\n          seekPositionPercentage = snappedMarker.position + snappedMarker.duration;\r\n        }\r\n      } else {\r\n        // Position markers always snap to their marker position\r\n        seekPositionPercentage = snappedMarker.position;\r\n      }\r\n    }\r\n\r\n    if (this.label) {\r\n      this.label.getDomElement().css({\r\n        'left': seekPositionPercentage + '%',\r\n      });\r\n    }\r\n\r\n    this.seekBarEvents.onSeekPreview.dispatch(this, {\r\n      scrubbing: scrubbing,\r\n      position: seekPositionPercentage,\r\n      marker: snappedMarker,\r\n    });\r\n  }\r\n\r\n  protected onSeekedEvent(percentage: number) {\r\n    this.seekBarEvents.onSeeked.dispatch(this, percentage);\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when a scrubbing seek operation is started.\r\n   * @returns {Event<SeekBar, NoArgs>}\r\n   */\r\n  get onSeek(): Event<SeekBar, NoArgs> {\r\n    return this.seekBarEvents.onSeek.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired during a scrubbing seek (to indicate that the seek preview, i.e. the video frame,\r\n   * should be updated), or during a normal seek preview when the seek bar is hovered (and the seek target,\r\n   * i.e. the seek bar label, should be updated).\r\n   * @returns {Event<SeekBar, SeekPreviewEventArgs>}\r\n   */\r\n  get onSeekPreview(): Event<SeekBar, SeekPreviewEventArgs> {\r\n    return this.seekBarEvents.onSeekPreview.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when a scrubbing seek has finished or when a direct seek is issued.\r\n   * @returns {Event<SeekBar, number>}\r\n   */\r\n  get onSeeked(): Event<SeekBar, number> {\r\n    return this.seekBarEvents.onSeeked.getEvent();\r\n  }\r\n\r\n\r\n  protected onShowEvent(): void {\r\n    super.onShowEvent();\r\n\r\n    // Refresh the position of the playback position when the seek bar becomes visible. To correctly set the position,\r\n    // the DOM element must be fully initialized an have its size calculated, because the position is set as an absolute\r\n    // value calculated from the size. This required size is not known when it is hidden.\r\n    // For such cases, we refresh the position here in onShow because here it is guaranteed that the component knows\r\n    // its size and can set the position correctly.\r\n    this.refreshPlaybackPosition();\r\n  }\r\n\r\n /**\r\n   * Checks if TouchEvent is supported.\r\n   * @returns {boolean} true if TouchEvent not undefined, else false\r\n   */\r\n  isTouchEvent(e: UIEvent): e is TouchEvent {\r\n    return window.TouchEvent && e instanceof TouchEvent;\r\n  }\r\n}\r\n","import {PlayerAPI} from 'bitmovin-player';\r\n\r\nexport function getMinBufferLevel(player: PlayerAPI): number {\r\n\r\n    const playerDuration = player.getDuration();\r\n\r\n    const videoBufferLength = player.getVideoBufferLength();\r\n    const audioBufferLength = player.getAudioBufferLength();\r\n    // Calculate the buffer length which is the smaller length of the audio and video buffers. If one of these\r\n    // buffers is not available, we set it's value to MAX_VALUE to make sure that the other real value is taken\r\n    // as the buffer length.\r\n    let bufferLength = Math.min(\r\n        videoBufferLength != null ? videoBufferLength : Number.MAX_VALUE,\r\n        audioBufferLength != null ? audioBufferLength : Number.MAX_VALUE);\r\n    // If both buffer lengths are missing, we set the buffer length to zero\r\n    if (bufferLength === Number.MAX_VALUE) {\r\n        bufferLength = 0;\r\n    }\r\n\r\n    return 100 / playerDuration * bufferLength;\r\n}\r\n","import { UIUtils } from '../uiutils';\r\nimport { DOM } from '../dom';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { VolumeController } from '../volumecontroller';\r\n\r\nexport enum SeekBarType {\r\n  Vod,\r\n  Live,\r\n  Volume,\r\n}\r\n\r\ninterface Range {\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\ninterface KeyStepIncrementsConfig {\r\n  leftRight: number;\r\n  upDown: number;\r\n}\r\n\r\nconst coerceValueIntoRange = (\r\n  value: number,\r\n  range: Range,\r\n  cb: (value: number) => void,\r\n) => {\r\n  if (value < range.min) {\r\n    cb(range.min);\r\n  } else if (value > range.max) {\r\n    cb(range.max);\r\n  } else {\r\n    cb(value);\r\n  }\r\n};\r\n\r\nexport class SeekBarController {\r\n  protected keyStepIncrements: KeyStepIncrementsConfig;\r\n  protected player: PlayerAPI;\r\n  protected volumeController: VolumeController;\r\n\r\n  constructor(\r\n    keyStepIncrements: KeyStepIncrementsConfig,\r\n    player: PlayerAPI,\r\n    volumeController: VolumeController,\r\n  ) {\r\n    this.keyStepIncrements = keyStepIncrements;\r\n    this.player = player;\r\n    this.volumeController = volumeController;\r\n  }\r\n\r\n  protected arrowKeyControls(\r\n    currentValue: number,\r\n    range: Range,\r\n    valueUpdate: (value: number) => void,\r\n  ) {\r\n    const controlValue = Math.floor(currentValue);\r\n\r\n    return {\r\n      left: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.leftRight, range, valueUpdate),\r\n      right: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.leftRight, range, valueUpdate),\r\n      up: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.upDown, range, valueUpdate),\r\n      down: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.upDown, range, valueUpdate),\r\n      home: () => coerceValueIntoRange(range.min, range, valueUpdate),\r\n      end: () => coerceValueIntoRange(range.max, range, valueUpdate),\r\n    };\r\n  }\r\n\r\n  protected seekBarControls(type: SeekBarType) {\r\n    if (type === SeekBarType.Live) {\r\n      return this.arrowKeyControls(this.player.getTimeShift(), { min: this.player.getMaxTimeShift(), max: 0 }, this.player.timeShift);\r\n    } else if (type === SeekBarType.Vod) {\r\n      return this.arrowKeyControls(this.player.getCurrentTime(), { min: 0, max: this.player.getDuration() }, this.player.seek);\r\n    } else if (type === SeekBarType.Volume && this.volumeController != null) {\r\n      const volumeTransition = this.volumeController.startTransition();\r\n      return this.arrowKeyControls(this.player.getVolume(), { min: 0, max: 100 }, volumeTransition.finish.bind(volumeTransition));\r\n    }\r\n  }\r\n\r\n  public setSeekBarControls(domElement: DOM, type: () => SeekBarType) {\r\n    domElement.on('keydown', (e: KeyboardEvent) => {\r\n      const controls = this.seekBarControls(type());\r\n      switch (e.keyCode) {\r\n        case UIUtils.KeyCode.LeftArrow: {\r\n          controls.left();\r\n          e.preventDefault();\r\n          break;\r\n        }\r\n        case UIUtils.KeyCode.RightArrow: {\r\n          controls.right();\r\n          e.preventDefault();\r\n          break;\r\n        }\r\n        case UIUtils.KeyCode.UpArrow: {\r\n          controls.up();\r\n          e.preventDefault();\r\n          break;\r\n        }\r\n        case UIUtils.KeyCode.DownArrow: {\r\n          controls.down();\r\n          e.preventDefault();\r\n          break;\r\n        }\r\n        case UIUtils.KeyCode.Home: {\r\n          controls.home();\r\n          e.preventDefault();\r\n          break;\r\n        }\r\n        case UIUtils.KeyCode.End: {\r\n          controls.end();\r\n          e.preventDefault();\r\n          break;\r\n        }\r\n        case UIUtils.KeyCode.Space: {\r\n          this.player.isPlaying() ? this.player.pause() : this.player.play();\r\n          e.preventDefault();\r\n          break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n}","import {Container, ContainerConfig} from './container';\r\nimport {Label, LabelConfig} from './label';\r\nimport {Component, ComponentConfig} from './component';\r\nimport { UIInstanceManager } from '../uimanager';\r\nimport {StringUtils} from '../stringutils';\r\nimport {ImageLoader} from '../imageloader';\r\nimport {CssProperties} from '../dom';\r\nimport { PlayerAPI, Thumbnail } from 'bitmovin-player';\r\nimport { SeekBar, SeekPreviewEventArgs } from './seekbar';\r\nimport { PlayerUtils } from '../playerutils';\r\n\r\n/**\r\n * Configuration interface for a {@link SeekBarLabel}.\r\n */\r\nexport interface SeekBarLabelConfig extends ContainerConfig {\r\n  // nothing yet\r\n}\r\n\r\n/**\r\n * A label for a {@link SeekBar} that can display the seek target time, a thumbnail, and title (e.g. chapter title).\r\n */\r\nexport class SeekBarLabel extends Container<SeekBarLabelConfig> {\r\n\r\n  private timeLabel: Label<LabelConfig>;\r\n  private titleLabel: Label<LabelConfig>;\r\n  private thumbnail: Component<ComponentConfig>;\r\n\r\n  private thumbnailImageLoader: ImageLoader;\r\n\r\n  private timeFormat: string;\r\n\r\n  private appliedMarkerCssClasses: string[] = [];\r\n  private player: PlayerAPI;\r\n  private uiManager: UIInstanceManager;\r\n\r\n  constructor(config: SeekBarLabelConfig = {}) {\r\n    super(config);\r\n\r\n    this.timeLabel = new Label({ cssClasses: ['seekbar-label-time'] });\r\n    this.titleLabel = new Label({ cssClasses: ['seekbar-label-title'] });\r\n    this.thumbnail = new Component({ cssClasses: ['seekbar-thumbnail'], role: 'img' });\r\n    this.thumbnailImageLoader = new ImageLoader();\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-seekbar-label',\r\n      components: [new Container({\r\n        components: [\r\n          this.thumbnail,\r\n          new Container({\r\n            components: [this.titleLabel, this.timeLabel],\r\n            cssClass: 'seekbar-label-metadata',\r\n          })],\r\n        cssClass: 'seekbar-label-inner',\r\n      })],\r\n      hidden: true,\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.player = player;\r\n    this.uiManager = uimanager;\r\n    uimanager.onSeekPreview.subscribeRateLimited(this.handleSeekPreview, 100);\r\n\r\n    let init = () => {\r\n      // Set time format depending on source duration\r\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\r\n        StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\r\n      // Set initial state of title and thumbnail to handle sourceLoaded when switching to a live-stream\r\n      this.setTitleText(null);\r\n      this.setThumbnail(null);\r\n    };\r\n\r\n    uimanager.getConfig().events.onUpdated.subscribe(init);\r\n    init();\r\n  }\r\n\r\n  private handleSeekPreview = (sender: SeekBar, args: SeekPreviewEventArgs) => {\r\n    if (this.player.isLive()) {\r\n      let maxTimeShift = this.player.getMaxTimeShift();\r\n      let timeShiftPreview = maxTimeShift - maxTimeShift * (args.position / 100);\r\n\r\n      this.setTime(timeShiftPreview);\r\n\r\n      // In case of a live stream the player expects the time passed into the getThumbnail as a wallClockTime and not\r\n      // as a relative timeShift value.\r\n      const convertTimeShiftPreviewToWallClockTime = (targetTimeShift: number): number => {\r\n        const currentTimeShift = this.player.getTimeShift();\r\n        const currentTime = this.player.getCurrentTime();\r\n\r\n        const wallClockTimeOfLiveEdge = currentTime - currentTimeShift;\r\n        return wallClockTimeOfLiveEdge + targetTimeShift;\r\n      };\r\n\r\n      const wallClockTime = convertTimeShiftPreviewToWallClockTime(timeShiftPreview);\r\n      this.setThumbnail(this.player.getThumbnail(wallClockTime));\r\n\r\n    } else {\r\n      let time = this.player.getDuration() * (args.position / 100);\r\n      this.setTime(time);\r\n\r\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\r\n      const absoluteSeekTarget = time + seekableRangeStart;\r\n      this.setThumbnail(this.player.getThumbnail(absoluteSeekTarget));\r\n    }\r\n\r\n    if (args.marker) {\r\n      this.setTitleText(args.marker.marker.title);\r\n    } else {\r\n      this.setTitleText(null);\r\n    }\r\n\r\n    // Remove CSS classes from previous marker\r\n    if (this.appliedMarkerCssClasses.length > 0) {\r\n      this.getDomElement().removeClass(this.appliedMarkerCssClasses.join(' '));\r\n      this.appliedMarkerCssClasses = [];\r\n    }\r\n\r\n    // Add CSS classes of current marker\r\n    if (args.marker) {\r\n      const cssClasses = (args.marker.marker.cssClasses || []).map(cssClass => this.prefixCss(cssClass));\r\n      this.getDomElement().addClass(cssClasses.join(' '));\r\n      this.appliedMarkerCssClasses = cssClasses;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Sets arbitrary text on the label.\r\n   * @param text the text to show on the label\r\n   */\r\n  setText(text: string) {\r\n    this.timeLabel.setText(text);\r\n  }\r\n\r\n  /**\r\n   * Sets a time to be displayed on the label.\r\n   * @param seconds the time in seconds to display on the label\r\n   */\r\n  setTime(seconds: number) {\r\n    this.setText(StringUtils.secondsToTime(seconds, this.timeFormat));\r\n  }\r\n\r\n  /**\r\n   * Sets the text on the title label.\r\n   * @param text the text to show on the label\r\n   */\r\n  setTitleText(text = '') {\r\n    this.titleLabel.setText(text);\r\n  }\r\n\r\n  /**\r\n   * Sets or removes a thumbnail on the label.\r\n   * @param thumbnail the thumbnail to display on the label or null to remove a displayed thumbnail\r\n   */\r\n  setThumbnail(thumbnail: Thumbnail = null) {\r\n    let thumbnailElement = this.thumbnail.getDomElement();\r\n\r\n    if (thumbnail == null) {\r\n      thumbnailElement.css({\r\n        'background-image': null,\r\n        'display': null,\r\n        'width': null,\r\n        'height': null,\r\n      });\r\n    }\r\n    else {\r\n      // We use the thumbnail image loader to make sure the thumbnail is loaded and it's size is known before be can\r\n      // calculate the CSS properties and set them on the element.\r\n      this.thumbnailImageLoader.load(thumbnail.url, (url, width, height) => {\r\n        // can be checked like that because x/y/w/h are either all present or none\r\n        // https://www.w3.org/TR/media-frags/#naming-space\r\n        if (thumbnail.x !== undefined) {\r\n          thumbnailElement.css(this.thumbnailCssSprite(thumbnail, width, height));\r\n        } else {\r\n          thumbnailElement.css(this.thumbnailCssSingleImage(thumbnail, width, height));\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private thumbnailCssSprite(thumbnail: Thumbnail, width: number, height: number): CssProperties {\r\n    let thumbnailCountX = width / thumbnail.width;\r\n    let thumbnailCountY = height / thumbnail.height;\r\n\r\n    let thumbnailIndexX = thumbnail.x / thumbnail.width;\r\n    let thumbnailIndexY = thumbnail.y / thumbnail.height;\r\n\r\n    let sizeX = 100 * thumbnailCountX;\r\n    let sizeY = 100 * thumbnailCountY;\r\n\r\n    let offsetX = 100 * thumbnailIndexX;\r\n    let offsetY = 100 * thumbnailIndexY;\r\n\r\n    let aspectRatio = 1 / thumbnail.width * thumbnail.height;\r\n\r\n    // The thumbnail size is set by setting the CSS 'width' and 'padding-bottom' properties. 'padding-bottom' is\r\n    // used because it is relative to the width and can be used to set the aspect ratio of the thumbnail.\r\n    // A default value for width is set in the stylesheet and can be overwritten from there or anywhere else.\r\n    return {\r\n      'display': 'inherit',\r\n      'background-image': `url(${thumbnail.url})`,\r\n      'padding-bottom': `${100 * aspectRatio}%`,\r\n      'background-size': `${sizeX}% ${sizeY}%`,\r\n      'background-position': `-${offsetX}% -${offsetY}%`,\r\n    };\r\n  }\r\n\r\n  private thumbnailCssSingleImage(thumbnail: Thumbnail, width: number, height: number): CssProperties {\r\n    let aspectRatio = 1 / width * height;\r\n\r\n    return {\r\n      'display': 'inherit',\r\n      'background-image': `url(${thumbnail.url})`,\r\n      'padding-bottom': `${100 * aspectRatio}%`,\r\n      'background-size': `100% 100%`,\r\n      'background-position': `0 0`,\r\n    };\r\n  }\r\n\r\n  release(): void {\r\n    super.release();\r\n\r\n    this.uiManager.onSeekPreview.unsubscribe(this.handleSeekPreview);\r\n  }\r\n}\r\n","import {ListSelector, ListSelectorConfig} from './listselector';\r\nimport {DOM} from '../dom';\r\nimport { i18n, LocalizableText } from '../localization/i18n';\r\n\r\n/**\r\n * A simple select box providing the possibility to select a single item out of a list of available items.\r\n *\r\n * DOM example:\r\n * <code>\r\n *     <select class='ui-selectbox'>\r\n *         <option value='key'>label</option>\r\n *         ...\r\n *     </select>\r\n * </code>\r\n */\r\n\r\nexport class SelectBox extends ListSelector<ListSelectorConfig> {\r\n\r\n  private selectElement: DOM;\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-selectbox',\r\n    }, this.config);\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    let selectElement = new DOM('select', {\r\n      'id': this.config.id,\r\n      'class': this.getCssClasses(),\r\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\r\n    });\r\n\r\n    this.selectElement = selectElement;\r\n    this.updateDomItems();\r\n\r\n    selectElement.on('change', () => {\r\n      let value = selectElement.val();\r\n      this.onItemSelectedEvent(value, false);\r\n    });\r\n\r\n    return selectElement;\r\n  }\r\n\r\n  protected updateDomItems(selectedValue: string = null) {\r\n    // Delete all children\r\n    this.selectElement.empty();\r\n\r\n    // Add updated children\r\n    for (let item of this.items) {\r\n      let optionElement = new DOM('option', {\r\n        'value': String(item.key),\r\n      }).html(i18n.performLocalization(item.label));\r\n\r\n      if (item.key === String(selectedValue)) { // convert selectedValue to string to catch 'null'/null case\r\n        optionElement.attr('selected', 'selected');\r\n      }\r\n\r\n      this.selectElement.append(optionElement);\r\n    }\r\n  }\r\n\r\n  protected onItemAddedEvent(value: string) {\r\n    super.onItemAddedEvent(value);\r\n    this.updateDomItems(this.selectedItem);\r\n  }\r\n\r\n  protected onItemRemovedEvent(value: string) {\r\n    super.onItemRemovedEvent(value);\r\n    this.updateDomItems(this.selectedItem);\r\n  }\r\n\r\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\r\n    super.onItemSelectedEvent(value);\r\n    if (updateDomItems) {\r\n      this.updateDomItems(value);\r\n    }\r\n  }\r\n}\r\n","import { Container, ContainerConfig } from './container';\r\nimport { SelectBox } from './selectbox';\r\nimport { UIInstanceManager } from '../uimanager';\r\nimport { Timeout } from '../timeout';\r\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\r\nimport { SettingsPanelPage } from './settingspanelpage';\r\nimport { SettingsPanelItem } from './settingspanelitem';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { Component, ComponentConfig } from './component';\r\n\r\n/**\r\n * Configuration interface for a {@link SettingsPanel}.\r\n */\r\nexport interface SettingsPanelConfig extends ContainerConfig {\r\n  /**\r\n   * The delay in milliseconds after which the settings panel will be hidden when there is no user interaction.\r\n   * Set to -1 to disable automatic hiding.\r\n   * Default: 3 seconds (3000)\r\n   */\r\n  hideDelay?: number;\r\n\r\n  /**\r\n   * Flag to specify if there should be an animation when switching SettingsPanelPages.\r\n   * Default: true\r\n   */\r\n  pageTransitionAnimation?: boolean;\r\n}\r\n\r\nenum NavigationDirection {\r\n  Forwards,\r\n  Backwards,\r\n}\r\n\r\n/**\r\n * A panel containing a list of {@link SettingsPanelPage items}.\r\n *\r\n * To configure pages just pass them in the components array.\r\n *\r\n * Example:\r\n *  let settingsPanel = new SettingsPanel({\r\n *    hidden: true,\r\n *  });\r\n *\r\n *  let settingsPanelPage = new SettingsPanelPage({\r\n *    components: […]\r\n *  });\r\n *\r\n *  let secondSettingsPanelPage = new SettingsPanelPage({\r\n *    components: […]\r\n *  });\r\n *\r\n *  settingsPanel.addComponent(settingsPanelPage);\r\n *  settingsPanel.addComponent(secondSettingsPanelPage);\r\n *\r\n * For an example how to navigate between pages @see SettingsPanelPageNavigatorButton\r\n */\r\nexport class SettingsPanel extends Container<SettingsPanelConfig> {\r\n\r\n  private static readonly CLASS_ACTIVE_PAGE = 'active';\r\n\r\n  // navigation handling\r\n  private activePage: SettingsPanelPage;\r\n  private navigationStack: SettingsPanelPage[] = [];\r\n\r\n  private settingsPanelEvents = {\r\n    onSettingsStateChanged: new EventDispatcher<SettingsPanel, NoArgs>(),\r\n  };\r\n\r\n  private hideTimeout: Timeout;\r\n\r\n  constructor(config: SettingsPanelConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-settings-panel',\r\n      hideDelay: 3000,\r\n      pageTransitionAnimation: true,\r\n    } as SettingsPanelConfig, this.config);\r\n\r\n    this.activePage = this.getRootPage();\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let config = this.getConfig();\r\n\r\n    uimanager.onControlsHide.subscribe(() => this.hideHoveredSelectBoxes());\r\n\r\n    if (config.hideDelay > -1) {\r\n      this.hideTimeout = new Timeout(config.hideDelay, () => {\r\n        this.hide();\r\n        this.hideHoveredSelectBoxes();\r\n      });\r\n      this.getDomElement().on('mouseenter', () => {\r\n        // On mouse enter clear the timeout\r\n        this.hideTimeout.clear();\r\n      });\r\n      this.getDomElement().on('mouseleave', () => {\r\n        // On mouse leave activate the timeout\r\n        this.hideTimeout.reset();\r\n      });\r\n      this.getDomElement().on('focusin', () => {\r\n        this.hideTimeout.clear();\r\n      });\r\n      this.getDomElement().on('focusout', () => {\r\n        this.hideTimeout.reset();\r\n      });\r\n    }\r\n\r\n    this.onHide.subscribe(() => {\r\n      if (config.hideDelay > -1) {\r\n        // Clear timeout when hidden from outside\r\n        this.hideTimeout.clear();\r\n      }\r\n\r\n      // Since we don't reset the actual navigation here we need to simulate a onInactive event in case some panel\r\n      // needs to do something when they become invisible / inactive.\r\n      this.activePage.onInactiveEvent();\r\n    });\r\n\r\n    this.onShow.subscribe(() => {\r\n      // Reset navigation when te panel gets visible to avoid a weird animation when hiding\r\n      this.resetNavigation(true);\r\n      // Since we don't need to navigate to the root page again we need to fire the onActive event when the settings\r\n      // panel gets visible.\r\n      this.activePage.onActiveEvent();\r\n\r\n      if (config.hideDelay > -1) {\r\n        // Activate timeout when shown\r\n        this.hideTimeout.start();\r\n      }\r\n    });\r\n\r\n    // pass event from root page through\r\n    this.getRootPage().onSettingsStateChanged.subscribe(() => {\r\n      this.onSettingsStateChangedEvent();\r\n    });\r\n\r\n    this.updateActivePageClass();\r\n  }\r\n\r\n  /**\r\n   * Returns the current active / visible page\r\n   * @return {SettingsPanelPage}\r\n   */\r\n  getActivePage(): SettingsPanelPage {\r\n    return this.activePage;\r\n  }\r\n\r\n  /**\r\n   * Sets the\r\n   * @deprecated Use {@link setActivePage} instead\r\n   * @param index\r\n   */\r\n  setActivePageIndex(index: number): void {\r\n    this.setActivePage(this.getPages()[index]);\r\n  }\r\n\r\n  /**\r\n   * Adds the passed page to the navigation stack and makes it visible.\r\n   * Use {@link popSettingsPanelPage} to navigate backwards.\r\n   *\r\n   * Results in no-op if the target page is the current page.\r\n   * @params page\r\n   */\r\n  setActivePage(targetPage: SettingsPanelPage): void {\r\n    if (targetPage === this.getActivePage()) {\r\n      console.warn('Page is already the current one ... skipping navigation');\r\n      return;\r\n    }\r\n\r\n    this.navigateToPage(\r\n      targetPage,\r\n      this.getActivePage(),\r\n      NavigationDirection.Forwards,\r\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resets the navigation stack by navigating back to the root page and displaying it.\r\n   */\r\n  popToRootSettingsPanelPage(): void {\r\n    this.resetNavigation((this.config as SettingsPanelConfig).pageTransitionAnimation);\r\n  }\r\n\r\n  /**\r\n   * Removes the current page from the navigation stack and makes the previous one visible.\r\n   * Results in a no-op if we are already on the root page.\r\n   */\r\n  popSettingsPanelPage() {\r\n    if (this.navigationStack.length === 0) {\r\n      console.warn('Already on the root page ... skipping navigation');\r\n      return;\r\n    }\r\n\r\n    let targetPage = this.navigationStack[this.navigationStack.length - 2];\r\n    // The root part isn't part of the navigation stack so handle it explicitly here\r\n    if (!targetPage) {\r\n      targetPage = this.getRootPage();\r\n    }\r\n\r\n    this.navigateToPage(\r\n      targetPage,\r\n      this.activePage,\r\n      NavigationDirection.Backwards,\r\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks if there are active settings within the root page of the settings panel.\r\n   * An active setting is a setting that is visible and enabled, which the user can interact with.\r\n   * @returns {boolean} true if there are active settings, false if the panel is functionally empty to a user\r\n   */\r\n  rootPageHasActiveSettings(): boolean {\r\n    return this.getRootPage().hasActiveSettings();\r\n  }\r\n\r\n  /**\r\n   * Return all configured pages\r\n   * @returns {SettingsPanelPage[]}\r\n   */\r\n  getPages(): SettingsPanelPage[] {\r\n    return <SettingsPanelPage[]>this.config.components.filter(component => component instanceof SettingsPanelPage);\r\n  }\r\n\r\n  get onSettingsStateChanged(): Event<SettingsPanel, NoArgs> {\r\n    return this.settingsPanelEvents.onSettingsStateChanged.getEvent();\r\n  }\r\n\r\n  release(): void {\r\n    super.release();\r\n    if (this.hideTimeout) {\r\n      this.hideTimeout.clear();\r\n    }\r\n  }\r\n\r\n  // Support adding settingsPanelPages after initialization\r\n  addComponent(component: Component<ComponentConfig>) {\r\n    if (this.getPages().length === 0 && component instanceof SettingsPanelPage) {\r\n      this.activePage = component;\r\n    }\r\n    super.addComponent(component);\r\n  }\r\n\r\n  private updateActivePageClass(): void {\r\n    this.getPages().forEach((page: SettingsPanelPage) => {\r\n      if (page === this.activePage) {\r\n        page.getDomElement().addClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\r\n      } else {\r\n        page.getDomElement().removeClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\r\n      }\r\n    });\r\n  }\r\n\r\n  private resetNavigation(resetNavigationOnShow: boolean): void {\r\n    const sourcePage = this.getActivePage();\r\n    const rootPage = this.getRootPage();\r\n    if (sourcePage) {\r\n      // Since the onInactiveEvent was already fired in the onHide we need to suppress it here\r\n      if (!resetNavigationOnShow) {\r\n        sourcePage.onInactiveEvent();\r\n      }\r\n    }\r\n    this.navigationStack = [];\r\n    this.animateNavigation(rootPage, sourcePage, resetNavigationOnShow);\r\n    this.activePage = rootPage;\r\n    this.updateActivePageClass();\r\n  }\r\n\r\n  private navigateToPage(\r\n    targetPage: SettingsPanelPage,\r\n    sourcePage: SettingsPanelPage,\r\n    direction: NavigationDirection,\r\n    skipAnimation: boolean,\r\n  ): void {\r\n    this.activePage = targetPage;\r\n\r\n    if (direction === NavigationDirection.Forwards) {\r\n      this.navigationStack.push(targetPage);\r\n    } else {\r\n      this.navigationStack.pop();\r\n    }\r\n\r\n    this.animateNavigation(targetPage, sourcePage, skipAnimation);\r\n\r\n    this.updateActivePageClass();\r\n    targetPage.onActiveEvent();\r\n    sourcePage.onInactiveEvent();\r\n  }\r\n\r\n  /**\r\n   * @param targetPage\r\n   * @param sourcePage\r\n   * @param skipAnimation This is just an internal flag if we want to have an animation. It is set true when we reset\r\n   * the navigation within the onShow callback of the settingsPanel. In this case we don't want an actual animation but\r\n   * the recalculation of the dimension of the settingsPanel.\r\n   * This is independent of the pageTransitionAnimation flag.\r\n   */\r\n  private animateNavigation(targetPage: SettingsPanelPage, sourcePage: SettingsPanelPage, skipAnimation: boolean) {\r\n    if (!(this.config as SettingsPanelConfig).pageTransitionAnimation) {\r\n      return;\r\n    }\r\n\r\n    const settingsPanelDomElement = this.getDomElement();\r\n    const settingsPanelHTMLElement = this.getDomElement().get(0);\r\n\r\n    // get current dimension\r\n    const settingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\r\n    const settingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\r\n\r\n    // calculate target size of the settings panel\r\n    sourcePage.getDomElement().css('display', 'none');\r\n    this.getDomElement().css({ width: '', height: '' }); // let css auto settings kick in again\r\n\r\n    const targetPageHtmlElement = targetPage.getDomElement().get(0);\r\n    // clone the targetPage DOM element so that we can calculate the width / height how they will be after\r\n    // switching the page. We are using a clone to prevent (mostly styling) side-effects on the real DOM element\r\n    const clone = targetPageHtmlElement.cloneNode(true) as HTMLElement;\r\n    // append to parent so we get the 'real' size\r\n    const containerWrapper = targetPageHtmlElement.parentNode;\r\n    containerWrapper.appendChild(clone);\r\n    // set clone visible\r\n    clone.style.display = 'block';\r\n\r\n    // collect target dimension\r\n    const targetSettingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\r\n    const targetSettingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\r\n\r\n    // remove clone from the DOM\r\n    clone.parentElement.removeChild(clone); // .remove() is not working in IE\r\n    sourcePage.getDomElement().css('display', '');\r\n\r\n    // set the values back to the current ones that the browser animates it (browsers don't animate 'auto' values)\r\n    settingsPanelDomElement.css({\r\n      width: settingsPanelWidth + 'px',\r\n      height: settingsPanelHeight + 'px',\r\n    });\r\n\r\n    if (!skipAnimation) {\r\n      // We need to force the browser to reflow between setting the width and height that we actually get a animation\r\n      this.forceBrowserReflow();\r\n    }\r\n\r\n    // set the values to the target dimension\r\n    settingsPanelDomElement.css({\r\n      width: targetSettingsPanelWidth + 'px',\r\n      height: targetSettingsPanelHeight + 'px',\r\n    });\r\n  }\r\n\r\n  private forceBrowserReflow(): void {\r\n    // Force the browser to reflow the layout\r\n    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a\r\n    this.getDomElement().get(0).offsetLeft;\r\n  }\r\n\r\n  /**\r\n   * Hack for IE + Firefox\r\n   * when the settings panel fades out while an item of a select box is still hovered, the select box will not fade out\r\n   * while the settings panel does. This would leave a floating select box, which is just weird\r\n   */\r\n  private hideHoveredSelectBoxes(): void {\r\n    this.getComputedItems().forEach((item: SettingsPanelItem) => {\r\n      if (item.isActive() && (item as any).setting instanceof SelectBox) {\r\n        const selectBox = (item as any).setting as SelectBox;\r\n        const oldDisplay = selectBox.getDomElement().css('display');\r\n        if (oldDisplay === 'none') {\r\n          // if oldDisplay is already 'none', no need to set to 'none' again. It could lead to race condition\r\n          // wherein the display is irreversibly set to 'none' when browser tab/window is not active because\r\n          // requestAnimationFrame is either delayed or paused in some browsers in inactive state\r\n          return;\r\n        }\r\n\r\n        // updating the display to none marks the select-box as inactive, so it will be hidden with the rest\r\n        // we just have to make sure to reset this as soon as possible\r\n        selectBox.getDomElement().css('display', 'none');\r\n        if (window.requestAnimationFrame) {\r\n          requestAnimationFrame(() => {\r\n            selectBox.getDomElement().css('display', oldDisplay);\r\n          });\r\n        } else {\r\n          // IE9 has no requestAnimationFrame, set the value directly. It has no optimization about ignoring DOM-changes\r\n          // between animationFrames\r\n          selectBox.getDomElement().css('display', oldDisplay);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // collect all items from all pages (see hideHoveredSelectBoxes)\r\n  private getComputedItems(): SettingsPanelItem[] {\r\n    const allItems: SettingsPanelItem[] = [];\r\n    for (let page of this.getPages()) {\r\n      allItems.push(...page.getItems());\r\n    }\r\n    return allItems;\r\n  }\r\n\r\n  private getRootPage(): SettingsPanelPage {\r\n    return this.getPages()[0];\r\n  }\r\n\r\n  protected onSettingsStateChangedEvent() {\r\n    this.settingsPanelEvents.onSettingsStateChanged.dispatch(this);\r\n  }\r\n}\r\n","import {Container, ContainerConfig} from './container';\r\nimport {Component, ComponentConfig} from './component';\r\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\r\nimport { Label, LabelConfig } from './label';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {SelectBox} from './selectbox';\r\nimport {ListBox} from './listbox';\r\nimport {VideoQualitySelectBox} from './videoqualityselectbox';\r\nimport {AudioQualitySelectBox} from './audioqualityselectbox';\r\nimport {PlaybackSpeedSelectBox} from './playbackspeedselectbox';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { LocalizableText } from '../localization/i18n';\r\n\r\n/**\r\n * An item for a {@link SettingsPanelPage},\r\n * Containing an optional {@link Label} and a component that configures a setting.\r\n * If the components is a {@link SelectBox} it will handle the logic of displaying it or not\r\n */\r\nexport class SettingsPanelItem extends Container<ContainerConfig> {\r\n\r\n  private label: Component<ComponentConfig>;\r\n  private setting: Component<ComponentConfig>;\r\n\r\n  private settingsPanelItemEvents = {\r\n    onActiveChanged: new EventDispatcher<SettingsPanelItem, NoArgs>(),\r\n  };\r\n\r\n  constructor(label: LocalizableText | Component<ComponentConfig>, setting: Component<ComponentConfig>, config: ContainerConfig = {}) {\r\n    super(config);\r\n\r\n    this.setting = setting;\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-settings-panel-item',\r\n      role: 'menuitem',\r\n    }, this.config);\r\n\r\n    if (label !== null) {\r\n      if (label instanceof Component) {\r\n        this.label = label;\r\n      } else {\r\n        this.label = new Label({ text: label, for: this.setting.getConfig().id } as LabelConfig);\r\n      }\r\n      this.addComponent(this.label);\r\n    }\r\n\r\n    this.addComponent(this.setting);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    if (this.setting instanceof SelectBox || this.setting instanceof ListBox) {\r\n      let handleConfigItemChanged = () => {\r\n        if (!(this.setting instanceof SelectBox) && !(this.setting instanceof ListBox)) {\r\n          return;\r\n        }\r\n        // The minimum number of items that must be available for the setting to be displayed\r\n        // By default, at least two items must be available, else a selection is not possible\r\n        let minItemsToDisplay = 2;\r\n        // Audio/video quality select boxes contain an additional 'auto' mode, which in combination with a single\r\n        // available quality also does not make sense\r\n        if ((this.setting instanceof VideoQualitySelectBox && this.setting.hasAutoItem())\r\n          || this.setting instanceof AudioQualitySelectBox) {\r\n          minItemsToDisplay = 3;\r\n        }\r\n\r\n        if (this.setting.itemCount() < minItemsToDisplay) {\r\n          // Hide the setting if no meaningful choice is available\r\n          this.hide();\r\n        } else if (this.setting instanceof PlaybackSpeedSelectBox\r\n          && !uimanager.getConfig().playbackSpeedSelectionEnabled) {\r\n          // Hide the PlaybackSpeedSelectBox if disabled in config\r\n          this.hide();\r\n        } else {\r\n          this.show();\r\n        }\r\n\r\n        // Visibility might have changed and therefore the active state might have changed so we fire the event\r\n        // TODO fire only when state has really changed (e.g. check if visibility has really changed)\r\n        this.onActiveChangedEvent();\r\n\r\n        this.getDomElement().attr('aria-haspopup', 'true');\r\n      };\r\n\r\n      this.setting.onItemAdded.subscribe(handleConfigItemChanged);\r\n      this.setting.onItemRemoved.subscribe(handleConfigItemChanged);\r\n\r\n      // Initialize hidden state\r\n      handleConfigItemChanged();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if this settings panel item is active, i.e. visible and enabled and a user can interact with it.\r\n   * @returns {boolean} true if the panel is active, else false\r\n   */\r\n  isActive(): boolean {\r\n    return this.isShown();\r\n  }\r\n\r\n  protected onActiveChangedEvent() {\r\n    this.settingsPanelItemEvents.onActiveChanged.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the 'active' state of this item changes.\r\n   * @see #isActive\r\n   * @returns {Event<SettingsPanelItem, NoArgs>}\r\n   */\r\n  get onActiveChanged(): Event<SettingsPanelItem, NoArgs> {\r\n    return this.settingsPanelItemEvents.onActiveChanged.getEvent();\r\n  }\r\n}\r\n","import {Container, ContainerConfig} from './container';\r\nimport {SettingsPanelItem} from './settingspanelitem';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { BrowserUtils } from '../browserutils';\r\n\r\n/**\r\n * A panel containing a list of {@link SettingsPanelItem items} that represent labelled settings.\r\n */\r\nexport class SettingsPanelPage extends Container<ContainerConfig> {\r\n\r\n  private static readonly CLASS_LAST = 'last';\r\n\r\n  private settingsPanelPageEvents = {\r\n    onSettingsStateChanged: new EventDispatcher<SettingsPanelPage, NoArgs>(),\r\n    onActive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\r\n    onInactive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\r\n  };\r\n\r\n  constructor(config: ContainerConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig<ContainerConfig>(config, {\r\n      cssClass: 'ui-settings-panel-page',\r\n      role: 'menu',\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    // Fire event when the state of a settings-item has changed\r\n    let settingsStateChangedHandler = () => {\r\n      this.onSettingsStateChangedEvent();\r\n\r\n      // Attach marker class to last visible item\r\n      let lastShownItem = null;\r\n      for (let component of this.getItems()) {\r\n        component.getDomElement().removeClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\r\n        if (component.isShown()) {\r\n          lastShownItem = component;\r\n        }\r\n      }\r\n      if (lastShownItem) {\r\n        lastShownItem.getDomElement().addClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\r\n      }\r\n    };\r\n    for (let component of this.getItems()) {\r\n      component.onActiveChanged.subscribe(settingsStateChangedHandler);\r\n    }\r\n  }\r\n\r\n  hasActiveSettings(): boolean {\r\n    for (let component of this.getItems()) {\r\n      if (component.isActive()) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getItems(): SettingsPanelItem[] {\r\n    return <SettingsPanelItem[]>this.config.components.filter(component => component instanceof SettingsPanelItem);\r\n  }\r\n\r\n  onSettingsStateChangedEvent() {\r\n    this.settingsPanelPageEvents.onSettingsStateChanged.dispatch(this);\r\n  }\r\n\r\n  get onSettingsStateChanged(): Event<SettingsPanelPage, NoArgs> {\r\n    return this.settingsPanelPageEvents.onSettingsStateChanged.getEvent();\r\n  }\r\n\r\n  onActiveEvent() {\r\n    const activeItems = this.getItems().filter((item) => item.isActive());\r\n\r\n    this.settingsPanelPageEvents.onActive.dispatch(this);\r\n    // Disable focus for iOS and iPadOS 13. They open select boxes automatically on focus and we want to avoid that.\r\n    if (activeItems.length > 0 && !BrowserUtils.isIOS && !(BrowserUtils.isMacIntel && BrowserUtils.isTouchSupported)) {\r\n      activeItems[0].getDomElement().focusToFirstInput();\r\n    }\r\n  }\r\n\r\n  get onActive(): Event<SettingsPanelPage, NoArgs> {\r\n    return this.settingsPanelPageEvents.onActive.getEvent();\r\n  }\r\n\r\n  onInactiveEvent() {\r\n    this.settingsPanelPageEvents.onInactive.dispatch(this);\r\n  }\r\n\r\n  get onInactive(): Event<SettingsPanelPage, NoArgs> {\r\n    return this.settingsPanelPageEvents.onInactive.getEvent();\r\n  }\r\n}\r\n","import {UIInstanceManager} from '../uimanager';\r\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\n\r\nexport class SettingsPanelPageBackButton extends SettingsPanelPageNavigatorButton {\r\n\r\n  constructor(config: SettingsPanelPageNavigatorConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-settingspanelpagebackbutton',\r\n      text: 'back',\r\n    } as SettingsPanelPageNavigatorConfig, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.onClick.subscribe(() => {\r\n      this.popPage();\r\n    });\r\n  }\r\n}\r\n","import {Button, ButtonConfig} from './button';\r\nimport {SettingsPanel} from './settingspanel';\r\nimport {SettingsPanelPage} from './settingspanelpage';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { UIInstanceManager } from '../uimanager';\r\n\r\n/**\r\n * Configuration interface for a {@link SettingsPanelPageNavigatorButton}\r\n */\r\nexport interface SettingsPanelPageNavigatorConfig extends ButtonConfig {\r\n  /**\r\n   * Container `SettingsPanel` where the navigation takes place\r\n   */\r\n  container: SettingsPanel;\r\n  /**\r\n   * Page where the button should navigate to\r\n   * If empty it will navigate to the root page (not intended to use as navigate back behavior)\r\n   */\r\n  targetPage?: SettingsPanelPage;\r\n\r\n  /**\r\n   * WCAG20 standard: Establishes relationships between objects and their label(s)\r\n   */\r\n  ariaLabelledBy?: string;\r\n}\r\n\r\n/**\r\n * Can be used to navigate between SettingsPanelPages\r\n *\r\n * Example:\r\n *  let settingPanelNavigationButton = new SettingsPanelPageNavigatorButton({\r\n *    container: settingsPanel,\r\n *    targetPage: settingsPanelPage,\r\n *  });\r\n *\r\n *  settingsPanelPage.addComponent(settingPanelNavigationButton);\r\n *\r\n * Don't forget to add the settingPanelNavigationButton to the settingsPanelPage.\r\n */\r\nexport class SettingsPanelPageNavigatorButton extends Button<SettingsPanelPageNavigatorConfig> {\r\n  private readonly container: SettingsPanel;\r\n  private readonly targetPage?: SettingsPanelPage;\r\n\r\n  constructor(config: SettingsPanelPageNavigatorConfig) {\r\n    super(config);\r\n    this.config = this.mergeConfig(config, {} as SettingsPanelPageNavigatorConfig, this.config);\r\n\r\n    this.container = (this.config as SettingsPanelPageNavigatorConfig).container;\r\n    this.targetPage = (this.config as SettingsPanelPageNavigatorConfig).targetPage;\r\n  }\r\n\r\n  /**\r\n   * navigate one level back\r\n   */\r\n  popPage() {\r\n    this.container.popSettingsPanelPage();\r\n  }\r\n\r\n  /**\r\n   * navigate to the target page\r\n   */\r\n  pushTargetPage() {\r\n    this.container.setActivePage(this.targetPage);\r\n  }\r\n}\r\n","import {UIInstanceManager} from '../uimanager';\r\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\nexport class SettingsPanelPageOpenButton extends SettingsPanelPageNavigatorButton {\r\n  constructor(config: SettingsPanelPageNavigatorConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-settingspanelpageopenbutton',\r\n      text: i18n.getLocalizer('open'),\r\n      role: 'menuitem',\r\n    } as SettingsPanelPageNavigatorConfig, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.getDomElement().attr('aria-haspopup', 'true');\r\n    this.getDomElement().attr('aria-owns', this.config.targetPage.getConfig().id);\r\n\r\n    this.onClick.subscribe(() => {\r\n      this.pushTargetPage();\r\n    });\r\n  }\r\n}\r\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\r\nimport {SettingsPanel} from './settingspanel';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {Component, ComponentConfig} from './component';\r\nimport {ArrayUtils} from '../arrayutils';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * Configuration interface for the {@link SettingsToggleButton}.\r\n */\r\nexport interface SettingsToggleButtonConfig extends ToggleButtonConfig {\r\n  /**\r\n   * The settings panel whose visibility the button should toggle.\r\n   */\r\n  settingsPanel: SettingsPanel;\r\n\r\n  /**\r\n   * Decides if the button should be automatically hidden when the settings panel does not contain any active settings.\r\n   * Default: true\r\n   */\r\n  autoHideWhenNoActiveSettings?: boolean;\r\n}\r\n\r\n/**\r\n * A button that toggles visibility of a settings panel.\r\n */\r\nexport class SettingsToggleButton extends ToggleButton<SettingsToggleButtonConfig> {\r\n\r\n  private visibleSettingsPanels: SettingsPanel[] = [];\r\n\r\n  constructor(config: SettingsToggleButtonConfig) {\r\n    super(config);\r\n\r\n    if (!config.settingsPanel) {\r\n      throw new Error('Required SettingsPanel is missing');\r\n    }\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-settingstogglebutton',\r\n      text: i18n.getLocalizer('settings'),\r\n      settingsPanel: null,\r\n      autoHideWhenNoActiveSettings: true,\r\n      role: 'pop-up button',\r\n    }, <SettingsToggleButtonConfig>this.config);\r\n\r\n    /**\r\n     * WCAG20 standard defines which popup menu (element id) is owned by the button\r\n     */\r\n    this.getDomElement().attr('aria-owns', config.settingsPanel.getActivePage().getConfig().id);\r\n\r\n    /**\r\n     * WCAG20 standard defines that a button has a popup menu bound to it\r\n     */\r\n    this.getDomElement().attr('aria-haspopup', 'true');\r\n\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let config = this.getConfig();\r\n    let settingsPanel = config.settingsPanel;\r\n\r\n    this.onClick.subscribe(() => {\r\n      // only hide other `SettingsPanel`s if a new one will be opened\r\n      if (!settingsPanel.isShown()) {\r\n        // Hide all open SettingsPanels before opening this button's panel\r\n        // (We need to iterate a copy because hiding them will automatically remove themselves from the array\r\n        // due to the subscribeOnce above)\r\n        this.visibleSettingsPanels.slice().forEach(settingsPanel => settingsPanel.hide());\r\n      }\r\n      settingsPanel.toggleHidden();\r\n    });\r\n    settingsPanel.onShow.subscribe(() => {\r\n      // Set toggle status to on when the settings panel shows\r\n      this.on();\r\n    });\r\n    settingsPanel.onHide.subscribe(() => {\r\n      // Set toggle status to off when the settings panel hides\r\n      this.off();\r\n    });\r\n\r\n    // Ensure that only one `SettingPanel` is visible at once\r\n    // Keep track of shown SettingsPanels\r\n    uimanager.onComponentShow.subscribe((sender: Component<ComponentConfig>) => {\r\n      if (sender instanceof SettingsPanel) {\r\n        this.visibleSettingsPanels.push(sender);\r\n        sender.onHide.subscribeOnce(() => ArrayUtils.remove(this.visibleSettingsPanels, sender));\r\n      }\r\n    });\r\n\r\n    // Handle automatic hiding of the button if there are no settings for the user to interact with\r\n    if (config.autoHideWhenNoActiveSettings) {\r\n      // Setup handler to show/hide button when the settings change\r\n      let settingsPanelItemsChangedHandler = () => {\r\n        if (settingsPanel.rootPageHasActiveSettings()) {\r\n          if (this.isHidden()) {\r\n            this.show();\r\n          }\r\n        } else {\r\n          if (this.isShown()) {\r\n            this.hide();\r\n          }\r\n        }\r\n      };\r\n      // Wire the handler to the event\r\n      settingsPanel.onSettingsStateChanged.subscribe(settingsPanelItemsChangedHandler);\r\n      // Call handler for first init at startup\r\n      settingsPanelItemsChangedHandler();\r\n    }\r\n  }\r\n}\r\n","import {Component, ComponentConfig} from './component';\r\n\r\n/**\r\n * A dummy component that just reserves some space and does nothing else.\r\n */\r\nexport class Spacer extends Component<ComponentConfig> {\r\n\r\n  constructor(config: ComponentConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-spacer',\r\n    }, this.config);\r\n  }\r\n\r\n\r\n  protected onShowEvent(): void {\r\n    // disable event firing by overwriting and not calling super\r\n  }\r\n\r\n  protected onHideEvent(): void {\r\n    // disable event firing by overwriting and not calling super\r\n  }\r\n\r\n  protected onHoverChangedEvent(hovered: boolean): void {\r\n    // disable event firing by overwriting and not calling super\r\n  }\r\n}","import {ListBox} from './listbox';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {SubtitleSwitchHandler} from '../subtitleutils';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\n\r\n/**\r\n * A element that is similar to a select box where the user can select a subtitle\r\n */\r\nexport class SubtitleListBox extends ListBox {\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    new SubtitleSwitchHandler(player, this, uimanager);\r\n  }\r\n}\r\n","import { Container, ContainerConfig } from './container';\r\nimport { UIInstanceManager } from '../uimanager';\r\nimport { Label, LabelConfig } from './label';\r\nimport { ComponentConfig, Component } from './component';\r\nimport { ControlBar } from './controlbar';\r\nimport { EventDispatcher } from '../eventdispatcher';\r\nimport { DOM, Size } from '../dom';\r\nimport { PlayerAPI, SubtitleCueEvent } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\nimport { VttUtils } from '../vttutils';\r\nimport { VTTProperties } from 'bitmovin-player/types/subtitles/vtt/API';\r\n\r\n/**\r\n * Overlays the player to display subtitles.\r\n */\r\nexport class SubtitleOverlay extends Container<ContainerConfig> {\r\n\r\n  private subtitleManager: ActiveSubtitleManager;\r\n  private previewSubtitleActive: boolean;\r\n  private previewSubtitle: SubtitleLabel;\r\n\r\n  private preprocessLabelEventCallback = new EventDispatcher<SubtitleCueEvent, SubtitleLabel>();\r\n  private subtitleContainerManager: SubtitleRegionContainerManager;\r\n\r\n  private static readonly CLASS_CONTROLBAR_VISIBLE = 'controlbar-visible';\r\n  private static readonly CLASS_CEA_608 = 'cea608';\r\n\r\n  // The number of rows in a cea608 grid\r\n  private static readonly CEA608_NUM_ROWS = 15;\r\n  // The number of columns in a cea608 grid\r\n  private static readonly CEA608_NUM_COLUMNS = 32;\r\n  // The offset in percent for one row (which is also the height of a row)\r\n  private static readonly CEA608_ROW_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_ROWS;\r\n  // The offset in percent for one column (which is also the width of a column)\r\n  private static readonly CEA608_COLUMN_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_COLUMNS;\r\n\r\n  constructor(config: ContainerConfig = {}) {\r\n    super(config);\r\n\r\n    this.previewSubtitleActive = false;\r\n    this.previewSubtitle = new SubtitleLabel({ text: i18n.getLocalizer('subtitle.example') });\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-subtitle-overlay',\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let subtitleManager = new ActiveSubtitleManager();\r\n    this.subtitleManager = subtitleManager;\r\n\r\n    this.subtitleContainerManager = new SubtitleRegionContainerManager(this);\r\n\r\n    player.on(player.exports.PlayerEvent.CueEnter, (event: SubtitleCueEvent) => {\r\n      const label = this.generateLabel(event);\r\n      subtitleManager.cueEnter(event, label);\r\n\r\n      this.preprocessLabelEventCallback.dispatch(event, label);\r\n\r\n      if (this.previewSubtitleActive) {\r\n        this.subtitleContainerManager.removeLabel(this.previewSubtitle);\r\n      }\r\n\r\n      this.show();\r\n\r\n      this.subtitleContainerManager.addLabel(label, this.getDomElement().size());\r\n      this.updateComponents();\r\n    });\r\n\r\n    player.on(player.exports.PlayerEvent.CueUpdate, (event: SubtitleCueEvent) => {\r\n      const label = this.generateLabel(event);\r\n      const labelToReplace = subtitleManager.cueUpdate(event, label);\r\n\r\n      this.preprocessLabelEventCallback.dispatch(event, label);\r\n\r\n      if (labelToReplace) {\r\n        this.subtitleContainerManager.replaceLabel(labelToReplace, label);\r\n      }\r\n    });\r\n\r\n    player.on(player.exports.PlayerEvent.CueExit, (event: SubtitleCueEvent) => {\r\n      let labelToRemove = subtitleManager.cueExit(event);\r\n\r\n      if (labelToRemove) {\r\n        this.subtitleContainerManager.removeLabel(labelToRemove);\r\n        this.updateComponents();\r\n      }\r\n\r\n      if (!subtitleManager.hasCues) {\r\n        if (!this.previewSubtitleActive) {\r\n          this.hide();\r\n        } else {\r\n          this.subtitleContainerManager.addLabel(this.previewSubtitle);\r\n          this.updateComponents();\r\n        }\r\n      }\r\n    });\r\n\r\n    let subtitleClearHandler = () => {\r\n      this.hide();\r\n      this.subtitleContainerManager.clear();\r\n      subtitleManager.clear();\r\n      this.removeComponents();\r\n      this.updateComponents();\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.AudioChanged, subtitleClearHandler);\r\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, subtitleClearHandler);\r\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, subtitleClearHandler);\r\n    player.on(player.exports.PlayerEvent.Seek, subtitleClearHandler);\r\n    player.on(player.exports.PlayerEvent.TimeShift, subtitleClearHandler);\r\n    player.on(player.exports.PlayerEvent.PlaybackFinished, subtitleClearHandler);\r\n    player.on(player.exports.PlayerEvent.SourceUnloaded, subtitleClearHandler);\r\n\r\n    uimanager.onComponentShow.subscribe((component: Component<ComponentConfig>) => {\r\n      if (component instanceof ControlBar) {\r\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\r\n      }\r\n    });\r\n    uimanager.onComponentHide.subscribe((component: Component<ComponentConfig>) => {\r\n      if (component instanceof ControlBar) {\r\n        this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\r\n      }\r\n    });\r\n\r\n    this.configureCea608Captions(player, uimanager);\r\n    // Init\r\n    subtitleClearHandler();\r\n  }\r\n\r\n  generateLabel(event: SubtitleCueEvent): SubtitleLabel {\r\n    // Sanitize cue data (must be done before the cue ID is generated in subtitleManager.cueEnter / update)\r\n    if (event.position) {\r\n      // Sometimes the positions are undefined, we assume them to be zero\r\n      event.position.row = event.position.row || 0;\r\n      event.position.column = event.position.column || 0;\r\n    }\r\n\r\n    const label = new SubtitleLabel({\r\n      // Prefer the HTML subtitle text if set, else try generating a image tag as string from the image attribute,\r\n      // else use the plain text\r\n      text: event.html || ActiveSubtitleManager.generateImageTagText(event.image) || event.text,\r\n      vtt: event.vtt,\r\n      region: event.region,\r\n      regionStyle: event.regionStyle,\r\n    });\r\n\r\n    return label;\r\n  }\r\n\r\n  configureCea608Captions(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    // The calculated font size\r\n    let fontSize = 0;\r\n    // The required letter spacing spread the text characters evenly across the grid\r\n    let fontLetterSpacing = 0;\r\n    // Flag telling if a font size calculation is required of if the current values are valid\r\n    let fontSizeCalculationRequired = true;\r\n    // Flag telling if the CEA-608 mode is enabled\r\n    let enabled = false;\r\n\r\n    const updateCEA608FontSize = () => {\r\n      const dummyLabel = new SubtitleLabel({ text: 'X' });\r\n      dummyLabel.getDomElement().css({\r\n        // By using a large font size we do not need to use multiple letters and can get still an\r\n        // accurate measurement even though the returned size is an integer value\r\n        'font-size': '200px',\r\n        'line-height': '200px',\r\n        'visibility': 'hidden',\r\n      });\r\n      this.addComponent(dummyLabel);\r\n      this.updateComponents();\r\n      this.show();\r\n\r\n      const dummyLabelCharWidth = dummyLabel.getDomElement().width();\r\n      const dummyLabelCharHeight = dummyLabel.getDomElement().height();\r\n      const fontSizeRatio = dummyLabelCharWidth / dummyLabelCharHeight;\r\n\r\n      this.removeComponent(dummyLabel);\r\n      this.updateComponents();\r\n      if (!this.subtitleManager.hasCues) {\r\n        this.hide();\r\n      }\r\n\r\n      // We subtract 1px here to avoid line breaks at the right border of the subtitle overlay that can happen\r\n      // when texts contain whitespaces. It's probably some kind of pixel rounding issue in the browser's\r\n      // layouting, but the actual reason could not be determined. Aiming for a target width - 1px would work in\r\n      // most browsers, but Safari has a \"quantized\" font size rendering with huge steps in between so we need\r\n      // to subtract some more pixels to avoid line breaks there as well.\r\n      const subtitleOverlayWidth = this.getDomElement().width() - 10;\r\n      const subtitleOverlayHeight = this.getDomElement().height();\r\n\r\n      // The size ratio of the letter grid\r\n      const fontGridSizeRatio = (dummyLabelCharWidth * SubtitleOverlay.CEA608_NUM_COLUMNS) /\r\n        (dummyLabelCharHeight * SubtitleOverlay.CEA608_NUM_ROWS);\r\n      // The size ratio of the available space for the grid\r\n      const subtitleOverlaySizeRatio = subtitleOverlayWidth / subtitleOverlayHeight;\r\n\r\n      if (subtitleOverlaySizeRatio > fontGridSizeRatio) {\r\n        // When the available space is wider than the text grid, the font size is simply\r\n        // determined by the height of the available space.\r\n        fontSize = subtitleOverlayHeight / SubtitleOverlay.CEA608_NUM_ROWS;\r\n\r\n        // Calculate the additional letter spacing required to evenly spread the text across the grid's width\r\n        const gridSlotWidth = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS;\r\n        const fontCharWidth = fontSize * fontSizeRatio;\r\n        fontLetterSpacing = gridSlotWidth - fontCharWidth;\r\n      } else {\r\n        // When the available space is not wide enough, texts would vertically overlap if we take\r\n        // the height as a base for the font size, so we need to limit the height. We do that\r\n        // by determining the font size by the width of the available space.\r\n        fontSize = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS / fontSizeRatio;\r\n        fontLetterSpacing = 0;\r\n      }\r\n\r\n      // Update font-size of all active subtitle labels\r\n      for (let label of this.getComponents()) {\r\n        if (label instanceof SubtitleLabel) {\r\n          label.getDomElement().css({\r\n            'font-size': `${fontSize}px`,\r\n            'letter-spacing': `${fontLetterSpacing}px`,\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\r\n      if (enabled) {\r\n        updateCEA608FontSize();\r\n      } else {\r\n        fontSizeCalculationRequired = true;\r\n      }\r\n    });\r\n\r\n    this.preprocessLabelEventCallback.subscribe((event: SubtitleCueEvent, label: SubtitleLabel) => {\r\n      const isCEA608 = event.position != null;\r\n      if (!isCEA608) {\r\n        // Skip all non-CEA608 cues\r\n        return;\r\n      }\r\n\r\n      if (!enabled) {\r\n        enabled = true;\r\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\r\n\r\n        // We conditionally update the font size by this flag here to avoid updating every time a subtitle\r\n        // is added into an empty overlay. Because we reset the overlay when all subtitles are gone, this\r\n        // would trigger an unnecessary update every time, but it's only required under certain conditions,\r\n        // e.g. after the player size has changed.\r\n        if (fontSizeCalculationRequired) {\r\n          updateCEA608FontSize();\r\n          fontSizeCalculationRequired = false;\r\n        }\r\n      }\r\n\r\n      label.getDomElement().css({\r\n        'left': `${event.position.column * SubtitleOverlay.CEA608_COLUMN_OFFSET}%`,\r\n        'top': `${event.position.row * SubtitleOverlay.CEA608_ROW_OFFSET}%`,\r\n        'font-size': `${fontSize}px`,\r\n        'letter-spacing': `${fontLetterSpacing}px`,\r\n      });\r\n    });\r\n\r\n    const reset = () => {\r\n      this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\r\n      enabled = false;\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.CueExit, () => {\r\n      if (!this.subtitleManager.hasCues) {\r\n        // Disable CEA-608 mode when all subtitles are gone (to allow correct formatting and\r\n        // display of other types of subtitles, e.g. the formatting preview subtitle)\r\n        reset();\r\n      }\r\n    });\r\n\r\n    player.on(player.exports.PlayerEvent.SourceUnloaded, reset);\r\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, reset);\r\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, reset);\r\n  }\r\n\r\n  enablePreviewSubtitleLabel(): void {\r\n    if (!this.subtitleManager.hasCues) {\r\n      this.previewSubtitleActive = true;\r\n      this.subtitleContainerManager.addLabel(this.previewSubtitle);\r\n      this.updateComponents();\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  removePreviewSubtitleLabel(): void {\r\n    if (this.previewSubtitleActive) {\r\n      this.previewSubtitleActive = false;\r\n      this.subtitleContainerManager.removeLabel(this.previewSubtitle);\r\n      this.updateComponents();\r\n    }\r\n  }\r\n}\r\n\r\ninterface ActiveSubtitleCue {\r\n  event: SubtitleCueEvent;\r\n  label: SubtitleLabel;\r\n}\r\n\r\ninterface ActiveSubtitleCueMap {\r\n  [id: string]: ActiveSubtitleCue[];\r\n}\r\n\r\ninterface SubtitleLabelConfig extends LabelConfig {\r\n  vtt?: VTTProperties;\r\n  region?: string;\r\n  regionStyle?: string;\r\n}\r\n\r\nexport class SubtitleLabel extends Label<SubtitleLabelConfig> {\r\n\r\n  constructor(config: SubtitleLabelConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-subtitle-label',\r\n    }, this.config);\r\n  }\r\n\r\n  get vtt(): VTTProperties {\r\n    return this.config.vtt;\r\n  }\r\n\r\n  get region(): string {\r\n    return this.config.region;\r\n  }\r\n\r\n  get regionStyle(): string {\r\n    return this.config.regionStyle;\r\n  }\r\n}\r\n\r\nclass ActiveSubtitleManager {\r\n\r\n  private activeSubtitleCueMap: ActiveSubtitleCueMap;\r\n  private activeSubtitleCueCount: number;\r\n\r\n  constructor() {\r\n    this.activeSubtitleCueMap = {};\r\n    this.activeSubtitleCueCount = 0;\r\n  }\r\n\r\n  /**\r\n   * Calculates a unique ID for a subtitle cue, which is needed to associate an CueEnter with its CueExit\r\n   * event so we can remove the correct subtitle in CueExit when multiple subtitles are active at the same time.\r\n   * The start time plus the text should make a unique identifier, and in the only case where a collision\r\n   * can happen, two similar texts will be displayed at a similar time and a similar position (or without position).\r\n   * The start time should always be known, because it is required to schedule the CueEnter event. The end time\r\n   * must not necessarily be known and therefore cannot be used for the ID.\r\n   * @param event\r\n   * @return {string}\r\n   */\r\n  private static calculateId(event: SubtitleCueEvent): string {\r\n    let id = event.start + '-' + event.text;\r\n\r\n    if (event.position) {\r\n      id += '-' + event.position.row + '-' + event.position.column;\r\n    }\r\n\r\n    return id;\r\n  }\r\n\r\n  cueEnter(event: SubtitleCueEvent, label: SubtitleLabel): void {\r\n    this.addCueToMap(event, label);\r\n  }\r\n\r\n  cueUpdate(event: SubtitleCueEvent, label: SubtitleLabel): SubtitleLabel | undefined {\r\n    const labelToReplace = this.popCueFromMap(event);\r\n\r\n    if (labelToReplace) {\r\n      this.addCueToMap(event, label);\r\n      return labelToReplace;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private addCueToMap(event: SubtitleCueEvent, label: SubtitleLabel): void {\r\n    let id = ActiveSubtitleManager.calculateId(event);\r\n\r\n    // Create array for id if it does not exist\r\n    this.activeSubtitleCueMap[id] = this.activeSubtitleCueMap[id] || [];\r\n\r\n    // Add cue\r\n    this.activeSubtitleCueMap[id].push({ event, label });\r\n    this.activeSubtitleCueCount++;\r\n  }\r\n\r\n  private popCueFromMap(event: SubtitleCueEvent): SubtitleLabel | undefined {\r\n    let id = ActiveSubtitleManager.calculateId(event);\r\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\r\n\r\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\r\n      // Remove cue\r\n      /* We apply the FIFO approach here and remove the oldest cue from the associated id. When there are multiple cues\r\n       * with the same id, there is no way to know which one of the cues is to be deleted, so we just hope that FIFO\r\n       * works fine. Theoretically it can happen that two cues with colliding ids are removed at different times, in\r\n       * the wrong order. This rare case has yet to be observed. If it ever gets an issue, we can take the unstable\r\n       * cue end time (which can change between CueEnter and CueExit IN CueUpdate) and use it as an\r\n       * additional hint to try and remove the correct one of the colliding cues.\r\n       */\r\n      let activeSubtitleCue = activeSubtitleCues.shift();\r\n      this.activeSubtitleCueCount--;\r\n\r\n      return activeSubtitleCue.label;\r\n    }\r\n  }\r\n\r\n  static generateImageTagText(imageData: string): string | undefined {\r\n    if (!imageData) {\r\n      return;\r\n    }\r\n\r\n    const imgTag = new DOM('img', {\r\n      src: imageData,\r\n    });\r\n    imgTag.css('width', '100%');\r\n    return imgTag.get(0).outerHTML; // return the html as string\r\n  }\r\n\r\n  /**\r\n   * Returns the label associated with an already added cue.\r\n   * @param event\r\n   * @return {SubtitleLabel}\r\n   */\r\n  getCues(event: SubtitleCueEvent): SubtitleLabel[] | undefined {\r\n    let id = ActiveSubtitleManager.calculateId(event);\r\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\r\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\r\n      return activeSubtitleCues.map((cue) => cue.label);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the subtitle cue from the manager and returns the label that should be removed from the subtitle overlay,\r\n   * or null if there is no associated label existing (e.g. because all labels have been {@link #clear cleared}.\r\n   * @param event\r\n   * @return {SubtitleLabel|null}\r\n   */\r\n  cueExit(event: SubtitleCueEvent): SubtitleLabel {\r\n    return this.popCueFromMap(event);\r\n  }\r\n\r\n  /**\r\n   * Returns the number of active subtitle cues.\r\n   * @return {number}\r\n   */\r\n  get cueCount(): number {\r\n    // We explicitly count the cues to save an Array.reduce on every cueCount call (which can happen frequently)\r\n    return this.activeSubtitleCueCount;\r\n  }\r\n\r\n  /**\r\n   * Returns true if there are active subtitle cues, else false.\r\n   * @return {boolean}\r\n   */\r\n  get hasCues(): boolean {\r\n    return this.cueCount > 0;\r\n  }\r\n\r\n  /**\r\n   * Removes all subtitle cues from the manager.\r\n   */\r\n  clear(): void {\r\n    this.activeSubtitleCueMap = {};\r\n    this.activeSubtitleCueCount = 0;\r\n  }\r\n}\r\n\r\nexport class SubtitleRegionContainerManager {\r\n  private subtitleRegionContainers: { [regionName: string]: SubtitleRegionContainer } = {};\r\n\r\n  /**\r\n   * @param subtitleOverlay Reference to the subtitle overlay for adding and removing the containers.\r\n   */\r\n  constructor(private subtitleOverlay: SubtitleOverlay) {\r\n    this.subtitleOverlay = subtitleOverlay;\r\n  }\r\n\r\n  private getRegion(label: SubtitleLabel): { regionContainerId: string, regionName: string } {\r\n    if (label.vtt) {\r\n      return {\r\n        regionContainerId: label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt',\r\n        regionName: 'vtt',\r\n      };\r\n    }\r\n\r\n    return {\r\n      regionContainerId: label.region || 'default',\r\n      regionName: label.region || 'default',\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Creates and wraps a subtitle label into a container div based on the subtitle region.\r\n   * If the subtitle has positioning information it is added to the container.\r\n   * @param label The subtitle label to wrap\r\n   */\r\n  addLabel(label: SubtitleLabel, overlaySize?: Size): void {\r\n    const { regionContainerId, regionName } = this.getRegion(label);\r\n    const cssClasses = [`subtitle-position-${regionName}`];\r\n\r\n    if (label.vtt && label.vtt.region) {\r\n      cssClasses.push(`vtt-region-${label.vtt.region.id}`);\r\n    }\r\n\r\n    if (!this.subtitleRegionContainers[regionContainerId]) {\r\n      const regionContainer = new SubtitleRegionContainer({\r\n        cssClasses,\r\n      });\r\n\r\n      this.subtitleRegionContainers[regionContainerId] = regionContainer;\r\n\r\n      if (label.regionStyle) {\r\n        regionContainer.getDomElement().attr('style', label.regionStyle);\r\n      } else if (label.vtt && !label.vtt.region) {\r\n        /**\r\n         * If there is no region present to wrap the Cue Box, the Cue box becomes the\r\n         * region itself. Therefore the positioning values have to come from the box.\r\n         */\r\n        regionContainer.getDomElement().css('position', 'static');\r\n      } else {\r\n        // getDomElement needs to be called at least once to ensure the component exists\r\n        regionContainer.getDomElement();\r\n      }\r\n\r\n      for (const regionContainerId in this.subtitleRegionContainers) {\r\n        this.subtitleOverlay.addComponent(this.subtitleRegionContainers[regionContainerId]);\r\n      }\r\n    }\r\n\r\n    this.subtitleRegionContainers[regionContainerId].addLabel(label, overlaySize);\r\n  }\r\n\r\n  replaceLabel(previousLabel: SubtitleLabel, newLabel: SubtitleLabel): void {\r\n    const { regionContainerId } = this.getRegion(previousLabel);\r\n\r\n    this.subtitleRegionContainers[regionContainerId].removeLabel(previousLabel);\r\n    this.subtitleRegionContainers[regionContainerId].addLabel(newLabel);\r\n  }\r\n\r\n  /**\r\n   * Removes a subtitle label from a container.\r\n   */\r\n  removeLabel(label: SubtitleLabel): void {\r\n    let regionContainerId;\r\n\r\n    if (label.vtt) {\r\n      regionContainerId = label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt';\r\n    } else {\r\n      regionContainerId = label.region || 'default';\r\n    }\r\n\r\n    this.subtitleRegionContainers[regionContainerId].removeLabel(label);\r\n\r\n    // Remove container if no more labels are displayed\r\n    if (this.subtitleRegionContainers[regionContainerId].isEmpty()) {\r\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionContainerId]);\r\n      delete this.subtitleRegionContainers[regionContainerId];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all subtitle containers.\r\n   */\r\n  clear(): void {\r\n    for (const regionName in this.subtitleRegionContainers) {\r\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionName]);\r\n    }\r\n\r\n    this.subtitleRegionContainers = {};\r\n  }\r\n}\r\n\r\nexport class SubtitleRegionContainer extends Container<ContainerConfig> {\r\n  private labelCount = 0;\r\n\r\n  constructor(config: ContainerConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'subtitle-region-container',\r\n    }, this.config);\r\n  }\r\n\r\n  addLabel(labelToAdd: SubtitleLabel, overlaySize?: Size) {\r\n    this.labelCount++;\r\n\r\n    if (labelToAdd.vtt) {\r\n      if (labelToAdd.vtt.region && overlaySize) {\r\n        VttUtils.setVttRegionStyles(this, labelToAdd.vtt.region, overlaySize);\r\n      }\r\n\r\n      VttUtils.setVttCueBoxStyles(labelToAdd, overlaySize);\r\n    }\r\n\r\n    this.addComponent(labelToAdd);\r\n    this.updateComponents();\r\n  }\r\n\r\n  removeLabel(labelToRemove: SubtitleLabel): void {\r\n    this.labelCount--;\r\n    this.removeComponent(labelToRemove);\r\n    this.updateComponents();\r\n  }\r\n\r\n  public isEmpty(): boolean {\r\n    return this.labelCount === 0;\r\n  }\r\n}\r\n","import {SelectBox} from './selectbox';\r\nimport {ListSelectorConfig} from './listselector';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {SubtitleSwitchHandler} from '../subtitleutils';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * A select box providing a selection between available subtitle and caption tracks.\r\n */\r\nexport class SubtitleSelectBox extends SelectBox {\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['ui-subtitleselectbox'],\r\n      ariaLabel: i18n.getLocalizer('subtitle.select'),\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    new SubtitleSwitchHandler(player, this, uimanager);\r\n  }\r\n}\r\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\r\nimport {UIInstanceManager} from '../../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../../localization/i18n';\r\n\r\n/**\r\n * A select box providing a selection of different background colors.\r\n */\r\nexport class BackgroundColorSelectBox extends SubtitleSettingSelectBox {\r\n\r\n  constructor(config: SubtitleSettingSelectBoxConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['ui-subtitlesettingsbackgroundcolorselectbox'],\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.addItem(null, i18n.getLocalizer('default'));\r\n    this.addItem('white', i18n.getLocalizer('colors.white'));\r\n    this.addItem('black', i18n.getLocalizer('colors.black'));\r\n    this.addItem('red', i18n.getLocalizer('colors.red'));\r\n    this.addItem('green', i18n.getLocalizer('colors.green'));\r\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\r\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\r\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\r\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\r\n\r\n    let setColorAndOpacity = () => {\r\n      if (this.settingsManager.backgroundColor.isSet() && this.settingsManager.backgroundOpacity.isSet()) {\r\n        this.toggleOverlayClass(\r\n          'bgcolor-' + this.settingsManager.backgroundColor.value + this.settingsManager.backgroundOpacity.value);\r\n      } else {\r\n        this.toggleOverlayClass(null);\r\n      }\r\n    };\r\n\r\n    this.onItemSelected.subscribe((sender, key: string) => {\r\n      this.settingsManager.backgroundColor.value = key;\r\n    });\r\n\r\n    this.settingsManager.backgroundColor.onChanged.subscribe((sender, property) => {\r\n      // Color and opacity go together, so we need to...\r\n      if (!this.settingsManager.backgroundColor.isSet()) {\r\n        // ... clear the opacity when the color is not set\r\n        this.settingsManager.backgroundOpacity.clear();\r\n      } else if (!this.settingsManager.backgroundOpacity.isSet()) {\r\n        // ... set an opacity when the color is set\r\n        this.settingsManager.backgroundOpacity.value = '100';\r\n      }\r\n      this.selectItem(property.value);\r\n      setColorAndOpacity();\r\n    });\r\n\r\n    this.settingsManager.backgroundOpacity.onChanged.subscribe(() => {\r\n      setColorAndOpacity();\r\n    });\r\n\r\n    // Load initial value\r\n    if (this.settingsManager.backgroundColor.isSet()) {\r\n      this.selectItem(this.settingsManager.backgroundColor.value);\r\n    }\r\n  }\r\n}\r\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\r\nimport {UIInstanceManager} from '../../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../../localization/i18n';\r\n\r\n/**\r\n * A select box providing a selection of different background opacity.\r\n */\r\nexport class BackgroundOpacitySelectBox extends SubtitleSettingSelectBox {\r\n\r\n  constructor(config: SubtitleSettingSelectBoxConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['ui-subtitlesettingsbackgroundopacityselectbox'],\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.addItem(null, i18n.getLocalizer('default'));\r\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\r\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\r\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\r\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\r\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\r\n\r\n    this.onItemSelected.subscribe((sender, key: string) => {\r\n      this.settingsManager.backgroundOpacity.value = key;\r\n\r\n      // Color and opacity go together, so we need to...\r\n      if (!this.settingsManager.backgroundOpacity.isSet()) {\r\n        // ... clear the color when the opacity is not set\r\n        this.settingsManager.backgroundColor.clear();\r\n      } else if (!this.settingsManager.backgroundColor.isSet()) {\r\n        // ... set a color when the opacity is set\r\n        this.settingsManager.backgroundColor.value = 'black';\r\n      }\r\n    });\r\n\r\n    // Update selected item when value is set from somewhere else\r\n    this.settingsManager.backgroundOpacity.onChanged.subscribe((sender, property) => {\r\n      this.selectItem(property.value);\r\n    });\r\n\r\n    // Load initial value\r\n    if (this.settingsManager.backgroundOpacity.isSet()) {\r\n      this.selectItem(this.settingsManager.backgroundOpacity.value);\r\n    }\r\n  }\r\n}\r\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\r\nimport {UIInstanceManager} from '../../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../../localization/i18n';\r\n\r\n/**\r\n * A select box providing a selection of different character edge.\r\n */\r\nexport class CharacterEdgeSelectBox extends SubtitleSettingSelectBox {\r\n\r\n  constructor(config: SubtitleSettingSelectBoxConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['ui-subtitlesettingscharacteredgeselectbox'],\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.addItem(null, i18n.getLocalizer('default'));\r\n    this.addItem('raised', i18n.getLocalizer('settings.subtitles.characterEdge.raised'));\r\n    this.addItem('depressed', i18n.getLocalizer('settings.subtitles.characterEdge.depressed'));\r\n    this.addItem('uniform', i18n.getLocalizer('settings.subtitles.characterEdge.uniform'));\r\n    this.addItem('dropshadowed', i18n.getLocalizer('settings.subtitles.characterEdge.dropshadowed'));\r\n\r\n    this.settingsManager.characterEdge.onChanged.subscribe((sender, property) => {\r\n      if (property.isSet()) {\r\n        this.toggleOverlayClass('characteredge-' + property.value);\r\n      } else {\r\n        this.toggleOverlayClass(null);\r\n      }\r\n\r\n      // Select the item in case the property was set from outside\r\n      this.selectItem(property.value);\r\n    });\r\n\r\n    this.onItemSelected.subscribe((sender, key: string) => {\r\n      this.settingsManager.characterEdge.value = key;\r\n    });\r\n\r\n    // Load initial value\r\n    if (this.settingsManager.characterEdge.isSet()) {\r\n      this.selectItem(this.settingsManager.characterEdge.value);\r\n    }\r\n  }\r\n}\r\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\r\nimport {UIInstanceManager} from '../../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../../localization/i18n';\r\n\r\n/**\r\n * A select box providing a selection of different font colors.\r\n */\r\nexport class FontColorSelectBox extends SubtitleSettingSelectBox {\r\n\r\n  constructor(config: SubtitleSettingSelectBoxConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['ui-subtitlesettingsfontcolorselectbox'],\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.addItem(null, i18n.getLocalizer('default'));\r\n    this.addItem('white', i18n.getLocalizer('colors.white'));\r\n    this.addItem('black', i18n.getLocalizer('colors.black'));\r\n    this.addItem('red', i18n.getLocalizer('colors.red'));\r\n    this.addItem('green', i18n.getLocalizer('colors.green'));\r\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\r\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\r\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\r\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\r\n\r\n    let setColorAndOpacity = () => {\r\n      if (this.settingsManager.fontColor.isSet() && this.settingsManager.fontOpacity.isSet()) {\r\n        this.toggleOverlayClass(\r\n          'fontcolor-' + this.settingsManager.fontColor.value + this.settingsManager.fontOpacity.value);\r\n      } else {\r\n        this.toggleOverlayClass(null);\r\n      }\r\n    };\r\n\r\n    this.onItemSelected.subscribe((sender, key: string) => {\r\n      this.settingsManager.fontColor.value = key;\r\n    });\r\n\r\n    this.settingsManager.fontColor.onChanged.subscribe((sender, property) => {\r\n      // Color and opacity go together, so we need to...\r\n      if (!this.settingsManager.fontColor.isSet()) {\r\n        // ... clear the opacity when the color is not set\r\n        this.settingsManager.fontOpacity.clear();\r\n      } else if (!this.settingsManager.fontOpacity.isSet()) {\r\n        // ... set an opacity when the color is set\r\n        this.settingsManager.fontOpacity.value = '100';\r\n      }\r\n      this.selectItem(property.value);\r\n      setColorAndOpacity();\r\n    });\r\n\r\n    this.settingsManager.fontOpacity.onChanged.subscribe(() => {\r\n      setColorAndOpacity();\r\n    });\r\n\r\n    // Load initial value\r\n    if (this.settingsManager.fontColor.isSet()) {\r\n      this.selectItem(this.settingsManager.fontColor.value);\r\n    }\r\n  }\r\n}\r\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\r\nimport {UIInstanceManager} from '../../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../../localization/i18n';\r\n\r\n/**\r\n * A select box providing a selection of different font family.\r\n */\r\nexport class FontFamilySelectBox extends SubtitleSettingSelectBox {\r\n\r\n  constructor(config: SubtitleSettingSelectBoxConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['ui-subtitlesettingsfontfamilyselectbox'],\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.addItem(null, i18n.getLocalizer('default'));\r\n    this.addItem('monospacedserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedserif'));\r\n    this.addItem('proportionalserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\r\n    this.addItem('monospacedsansserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedsansserif'));\r\n    this.addItem('proportionalsansserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\r\n    this.addItem('casual', i18n.getLocalizer('settings.subtitles.font.family.casual'));\r\n    this.addItem('cursive', i18n.getLocalizer('settings.subtitles.font.family.cursive'));\r\n    this.addItem('smallcapital', i18n.getLocalizer('settings.subtitles.font.family.smallcapital'));\r\n\r\n    this.settingsManager.fontFamily.onChanged.subscribe((sender, property) => {\r\n      if (property.isSet()) {\r\n        this.toggleOverlayClass('fontfamily-' + property.value);\r\n      } else {\r\n        this.toggleOverlayClass(null);\r\n      }\r\n\r\n      // Select the item in case the property was set from outside\r\n      this.selectItem(property.value);\r\n    });\r\n\r\n    this.onItemSelected.subscribe((sender, key: string) => {\r\n      this.settingsManager.fontFamily.value = key;\r\n    });\r\n\r\n    // Load initial value\r\n    if (this.settingsManager.fontFamily.isSet()) {\r\n      this.selectItem(this.settingsManager.fontFamily.value);\r\n    }\r\n  }\r\n}\r\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\r\nimport {UIInstanceManager} from '../../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../../localization/i18n';\r\n\r\n/**\r\n * A select box providing a selection of different font colors.\r\n */\r\nexport class FontOpacitySelectBox extends SubtitleSettingSelectBox {\r\n\r\n  constructor(config: SubtitleSettingSelectBoxConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['ui-subtitlesettingsfontopacityselectbox'],\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.addItem(null, i18n.getLocalizer('default'));\r\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\r\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\r\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\r\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\r\n\r\n    this.onItemSelected.subscribe((sender, key: string) => {\r\n      this.settingsManager.fontOpacity.value = key;\r\n\r\n      // Color and opacity go together, so we need to...\r\n      if (!this.settingsManager.fontOpacity.isSet()) {\r\n        // ... clear the color when the opacity is not set\r\n        this.settingsManager.fontColor.clear();\r\n      } else if (!this.settingsManager.fontColor.isSet()) {\r\n        // ... set a color when the opacity is set\r\n        this.settingsManager.fontColor.value = 'white';\r\n      }\r\n    });\r\n\r\n    // Update selected item when value is set from somewhere else\r\n    this.settingsManager.fontOpacity.onChanged.subscribe((sender, property) => {\r\n      this.selectItem(property.value);\r\n    });\r\n\r\n    // Load initial value\r\n    if (this.settingsManager.fontOpacity.isSet()) {\r\n      this.selectItem(this.settingsManager.fontOpacity.value);\r\n    }\r\n  }\r\n}\r\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\r\nimport {UIInstanceManager} from '../../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../../localization/i18n';\r\n\r\n/**\r\n * A select box providing a selection of different font colors.\r\n */\r\nexport class FontSizeSelectBox extends SubtitleSettingSelectBox {\r\n\r\n  constructor(config: SubtitleSettingSelectBoxConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['ui-subtitlesettingsfontsizeselectbox'],\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.addItem(null, i18n.getLocalizer('default'));\r\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\r\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\r\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\r\n    this.addItem('150', i18n.getLocalizer('percent', { value: 150 }));\r\n    this.addItem('200', i18n.getLocalizer('percent', { value: 200 }));\r\n    this.addItem('300', i18n.getLocalizer('percent', { value: 300 }));\r\n    this.addItem('400', i18n.getLocalizer('percent', { value: 400 }));\r\n\r\n    this.settingsManager.fontSize.onChanged.subscribe((sender, property) => {\r\n      if (property.isSet()) {\r\n        this.toggleOverlayClass('fontsize-' + property.value);\r\n      } else {\r\n        this.toggleOverlayClass(null);\r\n      }\r\n\r\n      // Select the item in case the property was set from outside\r\n      this.selectItem(property.value);\r\n    });\r\n\r\n    this.onItemSelected.subscribe((sender, key: string) => {\r\n      this.settingsManager.fontSize.value = key;\r\n    });\r\n\r\n    // Load initial value\r\n    if (this.settingsManager.fontSize.isSet()) {\r\n      this.selectItem(this.settingsManager.fontSize.value);\r\n    }\r\n  }\r\n}\r\n","import {SubtitleOverlay} from '../subtitleoverlay';\r\nimport {ListSelectorConfig} from '../listselector';\r\nimport {SelectBox} from '../selectbox';\r\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\r\n\r\nexport interface SubtitleSettingSelectBoxConfig extends ListSelectorConfig {\r\n  overlay: SubtitleOverlay;\r\n  settingsManager: SubtitleSettingsManager;\r\n}\r\n\r\n/**\r\n * Base class for all subtitles settings select box\r\n **/\r\nexport class SubtitleSettingSelectBox extends SelectBox {\r\n\r\n  protected settingsManager: SubtitleSettingsManager;\r\n  protected overlay: SubtitleOverlay;\r\n  private currentCssClass: string;\r\n\r\n  constructor(config: SubtitleSettingSelectBoxConfig) {\r\n    super(config);\r\n\r\n    this.settingsManager = config.settingsManager;\r\n    this.overlay = config.overlay;\r\n  }\r\n\r\n  /**\r\n   * Removes a previously set class and adds the passed in class.\r\n   * @param cssClass The new class to replace the previous class with or null to just remove the previous class\r\n   */\r\n  protected toggleOverlayClass(cssClass: string): void {\r\n    // Remove previous class if existing\r\n    if (this.currentCssClass) {\r\n      this.overlay.getDomElement().removeClass(this.currentCssClass);\r\n      this.currentCssClass = null;\r\n    }\r\n\r\n    // Add new class if specified. If the new class is null, we don't add anything.\r\n    if (cssClass) {\r\n      this.currentCssClass = this.prefixCss(cssClass);\r\n      this.overlay.getDomElement().addClass(this.currentCssClass);\r\n    }\r\n  }\r\n}\r\n","import {LabelConfig} from '../label';\r\nimport {Container, ContainerConfig} from '../container';\r\nimport {DOM} from '../../dom';\r\nimport {SettingsPanelPageOpenButton} from '../settingspanelpageopenbutton';\r\nimport { LocalizableText, i18n } from '../../localization/i18n';\r\n\r\nexport interface SubtitleSettingsLabelConfig extends LabelConfig {\r\n  opener: SettingsPanelPageOpenButton;\r\n}\r\n\r\nexport class SubtitleSettingsLabel extends Container<ContainerConfig> {\r\n\r\n  private opener: SettingsPanelPageOpenButton;\r\n\r\n  private text: LocalizableText;\r\n\r\n  private for: string;\r\n\r\n  constructor(config: SubtitleSettingsLabelConfig) {\r\n    super(config);\r\n\r\n    this.opener = config.opener;\r\n    this.text = config.text;\r\n    this.for = config.for;\r\n\r\n    this.config = this.mergeConfig(<ContainerConfig>config, {\r\n      cssClass: 'ui-label',\r\n      components: [\r\n        this.opener,\r\n      ],\r\n    }, this.config);\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    let labelElement = new DOM('label', {\r\n      'id': this.config.id,\r\n      'class': this.getCssClasses(),\r\n      'for': this.for,\r\n    }).append(\r\n      new DOM('span', {}).html(i18n.performLocalization(this.text)),\r\n      this.opener.getDomElement(),\r\n    );\r\n\r\n    return labelElement;\r\n  }\r\n}\r\n","import {StorageUtils} from '../../storageutils';\r\nimport {Component, ComponentConfig} from '../component';\r\nimport {EventDispatcher, Event} from '../../eventdispatcher';\r\n\r\ninterface SubtitleSettings {\r\n  fontColor?: string;\r\n  fontOpacity?: string;\r\n  fontFamily?: string;\r\n  fontSize?: string;\r\n  characterEdge?: string;\r\n  backgroundColor?: string;\r\n  backgroundOpacity?: string;\r\n  windowColor?: string;\r\n  windowOpacity?: string;\r\n}\r\n\r\ninterface Properties {\r\n  [name: string]: SubtitleSettingsProperty<string>;\r\n}\r\n\r\nexport class SubtitleSettingsManager {\r\n\r\n  private userSettings: SubtitleSettings;\r\n  private localStorageKey: string;\r\n\r\n  private _properties: Properties = {\r\n    fontColor: new SubtitleSettingsProperty<string>(this),\r\n    fontOpacity: new SubtitleSettingsProperty<string>(this),\r\n    fontFamily: new SubtitleSettingsProperty<string>(this),\r\n    fontSize: new SubtitleSettingsProperty<string>(this),\r\n    characterEdge: new SubtitleSettingsProperty<string>(this),\r\n    backgroundColor: new SubtitleSettingsProperty<string>(this),\r\n    backgroundOpacity: new SubtitleSettingsProperty<string>(this),\r\n    windowColor: new SubtitleSettingsProperty<string>(this),\r\n    windowOpacity: new SubtitleSettingsProperty<string>(this),\r\n  };\r\n\r\n  constructor() {\r\n    this.userSettings = {};\r\n    this.localStorageKey = DummyComponent.instance().prefixCss('subtitlesettings');\r\n\r\n    for (let propertyName in this._properties) {\r\n      this._properties[propertyName].onChanged.subscribe((sender, property) => {\r\n        if (property.isSet()) {\r\n          (<any>this.userSettings)[propertyName] = property.value;\r\n        } else {\r\n          // Delete the property from the settings object if unset to avoid serialization of null values\r\n          delete (<any>this.userSettings)[propertyName];\r\n        }\r\n\r\n        // Save the settings object when a property has changed\r\n        this.save();\r\n      });\r\n    }\r\n\r\n    this.load();\r\n  }\r\n\r\n  public reset(): void {\r\n    for (let propertyName in this._properties) {\r\n      this._properties[propertyName].clear();\r\n    }\r\n  }\r\n\r\n  public get fontColor(): SubtitleSettingsProperty<string> {\r\n    return this._properties.fontColor;\r\n  }\r\n\r\n  public get fontOpacity(): SubtitleSettingsProperty<string> {\r\n    return this._properties.fontOpacity;\r\n  }\r\n\r\n  public get fontFamily(): SubtitleSettingsProperty<string> {\r\n    return this._properties.fontFamily;\r\n  }\r\n\r\n  public get fontSize(): SubtitleSettingsProperty<string> {\r\n    return this._properties.fontSize;\r\n  }\r\n\r\n  public get characterEdge(): SubtitleSettingsProperty<string> {\r\n    return this._properties.characterEdge;\r\n  }\r\n\r\n  public get backgroundColor(): SubtitleSettingsProperty<string> {\r\n    return this._properties.backgroundColor;\r\n  }\r\n\r\n  public get backgroundOpacity(): SubtitleSettingsProperty<string> {\r\n    return this._properties.backgroundOpacity;\r\n  }\r\n\r\n  public get windowColor(): SubtitleSettingsProperty<string> {\r\n    return this._properties.windowColor;\r\n  }\r\n\r\n  public get windowOpacity(): SubtitleSettingsProperty<string> {\r\n    return this._properties.windowOpacity;\r\n  }\r\n\r\n  /**\r\n   * Saves the settings to local storage.\r\n   */\r\n  public save(): void {\r\n    StorageUtils.setObject(this.localStorageKey, this.userSettings);\r\n  }\r\n\r\n  /**\r\n   * Loads the settings from local storage\r\n   */\r\n  public load(): void {\r\n    this.userSettings = StorageUtils.getObject<SubtitleSettings>(this.localStorageKey) || {};\r\n\r\n    // Apply the loaded settings\r\n    for (let property in this.userSettings) {\r\n      this._properties[property].value = (<any>this.userSettings)[property];\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * A dummy component whose sole purpose is to expose the {@link #prefixCss} method to the\r\n * {@link SubtitleSettingsManager}.\r\n */\r\nclass DummyComponent extends Component<ComponentConfig> {\r\n\r\n  private static _instance: DummyComponent;\r\n\r\n  public static instance(): DummyComponent {\r\n    if (!DummyComponent._instance) {\r\n      DummyComponent._instance = new DummyComponent();\r\n    }\r\n\r\n    return DummyComponent._instance;\r\n  }\r\n\r\n  public prefixCss(cssClassOrId: string): string {\r\n    return super.prefixCss(cssClassOrId);\r\n  }\r\n}\r\n\r\nexport class SubtitleSettingsProperty<T> {\r\n\r\n  private _manager: SubtitleSettingsManager;\r\n  private _onChanged: EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>;\r\n  private _value: T;\r\n\r\n  constructor(manager: SubtitleSettingsManager) {\r\n    this._manager = manager;\r\n    this._onChanged = new EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>();\r\n  }\r\n\r\n  public isSet(): boolean {\r\n    return this._value != null;\r\n  }\r\n\r\n  public clear(): void {\r\n    this._value = null;\r\n    this.onChangedEvent(null);\r\n  }\r\n\r\n  public get value(): T {\r\n    return this._value;\r\n  }\r\n\r\n  public set value(value: T) {\r\n    if (typeof value === 'string' && value === 'null') {\r\n      value = null;\r\n    }\r\n\r\n    this._value = value;\r\n    this.onChangedEvent(value);\r\n  }\r\n\r\n  protected onChangedEvent(value: T) {\r\n    this._onChanged.dispatch(this._manager, this);\r\n  }\r\n\r\n  public get onChanged(): Event<SubtitleSettingsManager, SubtitleSettingsProperty<T>> {\r\n    return this._onChanged.getEvent();\r\n  }\r\n}","import {SettingsPanelPage} from '../settingspanelpage';\r\nimport {SettingsPanel} from '../settingspanel';\r\nimport {SubtitleOverlay} from '../subtitleoverlay';\r\nimport {ContainerConfig} from '../container';\r\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\r\nimport {Component, ComponentConfig} from '../component';\r\nimport {FontSizeSelectBox} from './fontsizeselectbox';\r\nimport {FontFamilySelectBox} from './fontfamilyselectbox';\r\nimport {FontColorSelectBox} from './fontcolorselectbox';\r\nimport {FontOpacitySelectBox} from './fontopacityselectbox';\r\nimport {CharacterEdgeSelectBox} from './characteredgeselectbox';\r\nimport {BackgroundColorSelectBox} from './backgroundcolorselectbox';\r\nimport {BackgroundOpacitySelectBox} from './backgroundopacityselectbox';\r\nimport {WindowColorSelectBox} from './windowcolorselectbox';\r\nimport {WindowOpacitySelectBox} from './windowopacityselectbox';\r\nimport {SubtitleSettingsResetButton} from './subtitlesettingsresetbutton';\r\nimport {UIInstanceManager} from '../../uimanager';\r\nimport {SettingsPanelPageBackButton} from '../settingspanelpagebackbutton';\r\nimport {SettingsPanelItem} from '../settingspanelitem';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../../localization/i18n';\r\n\r\nexport interface SubtitleSettingsPanelPageConfig extends ContainerConfig {\r\n  settingsPanel: SettingsPanel;\r\n  overlay: SubtitleOverlay;\r\n}\r\n\r\nexport class SubtitleSettingsPanelPage extends SettingsPanelPage {\r\n\r\n  private readonly overlay: SubtitleOverlay;\r\n  private readonly settingsPanel: SettingsPanel;\r\n\r\n  constructor(config: SubtitleSettingsPanelPageConfig) {\r\n    super(config);\r\n\r\n    this.overlay = config.overlay;\r\n    this.settingsPanel = config.settingsPanel;\r\n\r\n    let manager = new SubtitleSettingsManager();\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      components: <Component<ComponentConfig>[]>[\r\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.size'), new FontSizeSelectBox({\r\n          overlay: this.overlay, settingsManager: manager,\r\n        })),\r\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.family'), new FontFamilySelectBox({\r\n          overlay: this.overlay, settingsManager: manager,\r\n        })),\r\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.color'), new FontColorSelectBox({\r\n          overlay: this.overlay, settingsManager: manager,\r\n        })),\r\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.opacity'), new FontOpacitySelectBox({\r\n          overlay: this.overlay, settingsManager: manager,\r\n        })),\r\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.characterEdge'), new CharacterEdgeSelectBox({\r\n          overlay: this.overlay, settingsManager: manager,\r\n        })),\r\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.color'), new BackgroundColorSelectBox({\r\n          overlay: this.overlay, settingsManager: manager,\r\n        })),\r\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.opacity'), new BackgroundOpacitySelectBox({\r\n          overlay: this.overlay, settingsManager: manager,\r\n        })),\r\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.color'), new WindowColorSelectBox({\r\n          overlay: this.overlay, settingsManager: manager,\r\n        })),\r\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.opacity'), new WindowOpacitySelectBox({\r\n          overlay: this.overlay, settingsManager: manager,\r\n        })),\r\n        new SettingsPanelItem(new SettingsPanelPageBackButton({\r\n          container: this.settingsPanel,\r\n          text: i18n.getLocalizer('back'),\r\n        }), new SubtitleSettingsResetButton({\r\n          settingsManager: manager,\r\n        }), {\r\n          role: 'menubar',\r\n        }),\r\n      ],\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.onActive.subscribe(() => {\r\n      this.overlay.enablePreviewSubtitleLabel();\r\n    });\r\n\r\n    this.onInactive.subscribe(() => {\r\n      this.overlay.removePreviewSubtitleLabel();\r\n    });\r\n  }\r\n}","import {UIInstanceManager} from '../../uimanager';\r\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\r\nimport {Button, ButtonConfig} from '../button';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../../localization/i18n';\r\n\r\nexport interface SubtitleSettingsResetButtonConfig extends ButtonConfig {\r\n  settingsManager: SubtitleSettingsManager;\r\n}\r\n\r\n/**\r\n * A button that resets all subtitle settings to their defaults.\r\n */\r\nexport class SubtitleSettingsResetButton extends Button<ButtonConfig> {\r\n\r\n  constructor(config: SubtitleSettingsResetButtonConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-subtitlesettingsresetbutton',\r\n      text: i18n.getLocalizer('reset'),\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.onClick.subscribe(() => {\r\n      (<SubtitleSettingsResetButtonConfig>this.config).settingsManager.reset();\r\n    });\r\n  }\r\n}\r\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\r\nimport {UIInstanceManager} from '../../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../../localization/i18n';\r\n\r\n/**\r\n * A select box providing a selection of different background colors.\r\n */\r\nexport class WindowColorSelectBox extends SubtitleSettingSelectBox {\r\n\r\n  constructor(config: SubtitleSettingSelectBoxConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['ui-subtitlesettingswindowcolorselectbox'],\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.addItem(null, i18n.getLocalizer('default'));\r\n    this.addItem('white', i18n.getLocalizer('colors.white'));\r\n    this.addItem('black', i18n.getLocalizer('colors.black'));\r\n    this.addItem('red', i18n.getLocalizer('colors.red'));\r\n    this.addItem('green', i18n.getLocalizer('colors.green'));\r\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\r\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\r\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\r\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\r\n\r\n\r\n\r\n    let setColorAndOpacity = () => {\r\n      if (this.settingsManager.windowColor.isSet() && this.settingsManager.windowOpacity.isSet()) {\r\n        this.toggleOverlayClass(\r\n          'windowcolor-' + this.settingsManager.windowColor.value + this.settingsManager.windowOpacity.value);\r\n      } else {\r\n        this.toggleOverlayClass(null);\r\n      }\r\n    };\r\n\r\n    this.onItemSelected.subscribe((sender, key: string) => {\r\n      this.settingsManager.windowColor.value = key;\r\n    });\r\n\r\n    this.settingsManager.windowColor.onChanged.subscribe((sender, property) => {\r\n      // Color and opacity go together, so we need to...\r\n      if (!this.settingsManager.windowColor.isSet()) {\r\n        // ... clear the opacity when the color is not set\r\n        this.settingsManager.windowOpacity.clear();\r\n      } else if (!this.settingsManager.windowOpacity.isSet()) {\r\n        // ... set an opacity when the color is set\r\n        this.settingsManager.windowOpacity.value = '100';\r\n      }\r\n      this.selectItem(property.value);\r\n      setColorAndOpacity();\r\n    });\r\n\r\n    this.settingsManager.windowOpacity.onChanged.subscribe(() => {\r\n      setColorAndOpacity();\r\n    });\r\n\r\n    // Load initial value\r\n    if (this.settingsManager.windowColor.isSet()) {\r\n      this.selectItem(this.settingsManager.windowColor.value);\r\n    }\r\n  }\r\n}\r\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\r\nimport {UIInstanceManager} from '../../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../../localization/i18n';\r\n\r\n/**\r\n * A select box providing a selection of different background opacity.\r\n */\r\nexport class WindowOpacitySelectBox extends SubtitleSettingSelectBox {\r\n\r\n  constructor(config: SubtitleSettingSelectBoxConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['ui-subtitlesettingswindowopacityselectbox'],\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    this.addItem(null, i18n.getLocalizer('default'));\r\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\r\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\r\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\r\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\r\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\r\n\r\n    this.onItemSelected.subscribe((sender, key: string) => {\r\n      this.settingsManager.windowOpacity.value = key;\r\n\r\n      // Color and opacity go together, so we need to...\r\n      if (!this.settingsManager.windowOpacity.isSet()) {\r\n        // ... clear the color when the opacity is not set\r\n        this.settingsManager.windowColor.clear();\r\n      } else if (!this.settingsManager.windowColor.isSet()) {\r\n        // ... set a color when the opacity is set\r\n        this.settingsManager.windowColor.value = 'black';\r\n      }\r\n    });\r\n\r\n    // Update selected item when value is set from somewhere else\r\n    this.settingsManager.windowOpacity.onChanged.subscribe((sender, property) => {\r\n      this.selectItem(property.value);\r\n    });\r\n\r\n    // Load initial value\r\n    if (this.settingsManager.windowOpacity.isSet()) {\r\n      this.selectItem(this.settingsManager.windowOpacity.value);\r\n    }\r\n  }\r\n}\r\n","import { PlayerAPI } from 'bitmovin-player';\r\nimport { UIInstanceManager } from '../uimanager';\r\nimport { DOM } from '../dom';\r\nimport { ComponentConfig } from './component';\r\nimport { TimelineMarker } from '../uiconfig';\r\nimport { SeekBarMarker } from './seekbar';\r\nimport { PlayerUtils } from '../playerutils';\r\nimport { Timeout } from '../timeout';\r\n\r\nexport interface MarkersConfig extends ComponentConfig {\r\n  /**\r\n   * Used for seekBar marker snapping range percentage\r\n   */\r\n  snappingRange?: number;\r\n}\r\n\r\nexport class TimelineMarkersHandler {\r\n  private markersContainer: DOM;\r\n  private timelineMarkers: SeekBarMarker[];\r\n  private player: PlayerAPI;\r\n  private uimanager: UIInstanceManager;\r\n  private pausedTimeshiftUpdater: Timeout;\r\n  private getSeekBarWidth: () => number;\r\n  protected config: MarkersConfig;\r\n\r\n  constructor(config: MarkersConfig, getSeekBarWidth: () => number, markersContainer: DOM) {\r\n    this.config = config;\r\n    this.getSeekBarWidth = getSeekBarWidth;\r\n    this.markersContainer = markersContainer;\r\n    this.timelineMarkers = [];\r\n  }\r\n\r\n  public initialize(player: PlayerAPI, uimanager: UIInstanceManager) {\r\n    this.player = player;\r\n    this.uimanager = uimanager;\r\n    this.configureMarkers();\r\n  }\r\n\r\n  private configureMarkers(): void {\r\n    // Remove markers when unloaded\r\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, () => this.clearMarkers());\r\n    this.player.on(this.player.exports.PlayerEvent.AdBreakStarted, () => this.clearMarkers());\r\n    this.player.on(this.player.exports.PlayerEvent.AdBreakFinished, () => this.updateMarkers());\r\n    // Update markers when the size of the seekbar changes\r\n    this.player.on(this.player.exports.PlayerEvent.PlayerResized, () => this.updateMarkersDOM());\r\n\r\n    this.player.on(this.player.exports.PlayerEvent.SourceLoaded, () => {\r\n      if (this.player.isLive()) {\r\n        // Update marker position as timeshift range changes\r\n        this.player.on(this.player.exports.PlayerEvent.TimeChanged, () => this.updateMarkers());\r\n        // Update marker postion when paused as timeshift range changes\r\n        this.configureLivePausedTimeshiftUpdater(() => this.updateMarkers());\r\n      }\r\n    });\r\n    this.uimanager.getConfig().events.onUpdated.subscribe(() => this.updateMarkers());\r\n    this.uimanager.onRelease.subscribe(() => this.uimanager.getConfig().events.onUpdated.unsubscribe(() => this.updateMarkers()));\r\n\r\n    // Init markers at startup\r\n    this.updateMarkers();\r\n  }\r\n\r\n  public getMarkerAtPosition(percentage: number): SeekBarMarker | null {\r\n    const snappingRange = this.config.snappingRange;\r\n\r\n    const matchingMarker = this.timelineMarkers.find(marker => {\r\n      const hasDuration = marker.duration > 0;\r\n      // Handle interval markers\r\n      const intervalMarkerMatch =\r\n        hasDuration &&\r\n        percentage >= marker.position - snappingRange &&\r\n        percentage <= marker.position + marker.duration + snappingRange;\r\n\r\n      // Handle position markers\r\n      const positionMarkerMatch =\r\n        percentage >= marker.position - snappingRange &&\r\n        percentage <= marker.position + snappingRange;\r\n\r\n      return intervalMarkerMatch || positionMarkerMatch;\r\n    });\r\n\r\n    return matchingMarker || null;\r\n  }\r\n\r\n  private clearMarkers(): void {\r\n    this.timelineMarkers = [];\r\n    this.markersContainer.empty();\r\n  }\r\n\r\n  private removeMarkerFromConfig(marker: TimelineMarker): void {\r\n    this.uimanager.getConfig().metadata.markers = this.uimanager.getConfig().metadata.markers.filter(_marker => marker !== _marker);\r\n  }\r\n\r\n  private filterRemovedMarkers(): void {\r\n    this.timelineMarkers = this.timelineMarkers.filter(seekbarMarker => {\r\n      const matchingMarker = this.uimanager.getConfig().metadata.markers.find(_marker => seekbarMarker.marker === _marker);\r\n      if (!matchingMarker) {\r\n        this.removeMarkerFromDOM(seekbarMarker);\r\n      }\r\n      return matchingMarker;\r\n    });\r\n  }\r\n\r\n  private removeMarkerFromDOM(marker: SeekBarMarker): void {\r\n    if (marker.element) {\r\n      marker.element.remove();\r\n    }\r\n  }\r\n\r\n  private updateMarkers(): void {\r\n    if (!shouldProcessMarkers(this.player, this.uimanager)) {\r\n      this.clearMarkers();\r\n      return;\r\n    }\r\n\r\n    this.filterRemovedMarkers();\r\n\r\n    this.uimanager.getConfig().metadata.markers.forEach(marker => {\r\n      const { markerPosition, markerDuration } = getMarkerPositions(this.player, marker);\r\n\r\n      if (shouldRemoveMarker(markerPosition, markerDuration)) {\r\n        this.removeMarkerFromConfig(marker);\r\n      } else if (markerPosition <= 100) {\r\n        const matchingMarker = this.timelineMarkers.find(seekbarMarker => seekbarMarker.marker === marker);\r\n\r\n        if (matchingMarker) {\r\n          matchingMarker.position = markerPosition;\r\n          matchingMarker.duration = markerDuration;\r\n\r\n          this.updateMarkerDOM(matchingMarker);\r\n        } else {\r\n          const newMarker: SeekBarMarker = { marker, position: markerPosition, duration: markerDuration };\r\n          this.timelineMarkers.push(newMarker);\r\n\r\n          this.createMarkerDOM(newMarker);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private getMarkerCssProperties(marker: SeekBarMarker): { [propertyName: string]: string } {\r\n    const seekBarWidthPx = this.getSeekBarWidth();\r\n\r\n    const positionInPx = (seekBarWidthPx / 100) * (marker.position < 0 ? 0 : marker.position);\r\n    const cssProperties: { [propertyName: string]: string } = {\r\n      'transform': `translateX(${positionInPx}px)`,\r\n    };\r\n\r\n    if (marker.duration > 0) {\r\n      const markerWidthPx = Math.round(seekBarWidthPx / 100 * marker.duration);\r\n      cssProperties['width'] = `${markerWidthPx}px`;\r\n    }\r\n\r\n    return cssProperties;\r\n  }\r\n\r\n  private updateMarkerDOM(marker: SeekBarMarker): void {\r\n    marker.element.css(this.getMarkerCssProperties(marker));\r\n  }\r\n\r\n  private createMarkerDOM(marker: SeekBarMarker): void {\r\n    const markerClasses = ['seekbar-marker'].concat(marker.marker.cssClasses || [])\r\n      .map(cssClass => this.prefixCss(cssClass));\r\n\r\n    const markerElement = new DOM('div', {\r\n      'class': markerClasses.join(' '),\r\n      'data-marker-time': String(marker.marker.time),\r\n      'data-marker-title': String(marker.marker.title),\r\n    }).css(this.getMarkerCssProperties(marker));\r\n\r\n    if (marker.marker.imageUrl) {\r\n      const removeImage = () => {\r\n        imageElement.remove();\r\n      };\r\n\r\n      const imageElement = new DOM('img', {\r\n        'class': this.prefixCss('seekbar-marker-image'),\r\n        'src': marker.marker.imageUrl,\r\n      }).on('error', removeImage);\r\n\r\n      markerElement.append(imageElement);\r\n    }\r\n\r\n    marker.element = markerElement;\r\n    this.markersContainer.append(markerElement);\r\n  }\r\n\r\n  private updateMarkersDOM(): void {\r\n    this.timelineMarkers.forEach(marker => {\r\n      if (marker.element) {\r\n        this.updateMarkerDOM(marker);\r\n      } else {\r\n        this.createMarkerDOM(marker);\r\n      }\r\n    });\r\n  }\r\n\r\n  private configureLivePausedTimeshiftUpdater(\r\n    handler: () => void,\r\n  ): void {\r\n    // Regularly update the marker position while the timeout is active\r\n    this.pausedTimeshiftUpdater = new Timeout(1000, handler, true);\r\n\r\n    this.player.on(this.player.exports.PlayerEvent.Paused, () => {\r\n      if (this.player.isLive() && this.player.getMaxTimeShift() < 0) {\r\n        this.pausedTimeshiftUpdater.start();\r\n      }\r\n    });\r\n\r\n    // Stop updater when playback continues (no matter if the updater was started before)\r\n    this.player.on(this.player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\r\n    this.player.on(this.player.exports.PlayerEvent.Destroy, () => this.pausedTimeshiftUpdater.clear());\r\n  }\r\n\r\n  protected prefixCss(cssClassOrId: string): string {\r\n    return this.config.cssPrefix + '-' + cssClassOrId;\r\n  }\r\n}\r\n\r\nfunction getMarkerPositions(player: PlayerAPI, marker: TimelineMarker) {\r\n  const duration = getDuration(player);\r\n\r\n  const markerPosition = 100 / duration * getMarkerTime(marker, player, duration); // convert absolute time to percentage\r\n  let markerDuration = 100 / duration * marker.duration;\r\n\r\n  if (markerPosition < 0 && !isNaN(markerDuration)) {\r\n    // Shrink marker duration for on live streams as they reach end\r\n    markerDuration = markerDuration + markerPosition;\r\n  }\r\n\r\n  if (100 - markerPosition < markerDuration) {\r\n    // Shrink marker if it overflows timeline\r\n    markerDuration = 100 - markerPosition;\r\n  }\r\n\r\n  return { markerDuration, markerPosition };\r\n}\r\n\r\nfunction getMarkerTime(marker: TimelineMarker, player: PlayerAPI, duration: number): number {\r\n  if (!player.isLive()) {\r\n    return marker.time;\r\n  }\r\n\r\n  return duration - (PlayerUtils.getSeekableRangeRespectingLive(player).end - marker.time);\r\n}\r\n\r\nfunction getDuration(player: PlayerAPI): number {\r\n  if (!player.isLive()) {\r\n    return player.getDuration();\r\n  }\r\n  const { start, end } = PlayerUtils.getSeekableRangeRespectingLive(player);\r\n\r\n  return end - start;\r\n}\r\n\r\nfunction shouldRemoveMarker(markerPosition: number, markerDuration: number): boolean {\r\n  return (markerDuration < 0 || isNaN(markerDuration)) && markerPosition < 0;\r\n}\r\n\r\nfunction shouldProcessMarkers(player: PlayerAPI, uimanager: UIInstanceManager): boolean {\r\n  // Don't generate timeline markers if we don't yet have a duration\r\n  // The duration check is for buggy platforms where the duration is not available instantly (Chrome on Android 4.3)\r\n  const validToProcess = player.getDuration() !== Infinity || player.isLive();\r\n  const hasMarkers = uimanager.getConfig().metadata.markers.length > 0;\r\n\r\n  return validToProcess && hasMarkers;\r\n}\r\n","import {Container, ContainerConfig} from './container';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {MetadataLabel, MetadataLabelContent} from './metadatalabel';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\n\r\n/**\r\n * Configuration interface for a {@link TitleBar}.\r\n */\r\nexport interface TitleBarConfig extends ContainerConfig {\r\n  /**\r\n   * Specifies if the title bar should stay hidden when no metadata label contains any text. Does not make a lot\r\n   * of sense if the title bar contains other components than just MetadataLabels (like in the default configuration).\r\n   * Default: false\r\n   */\r\n  keepHiddenWithoutMetadata?: boolean;\r\n}\r\n\r\n/**\r\n * Displays a title bar containing a label with the title of the video.\r\n */\r\nexport class TitleBar extends Container<TitleBarConfig> {\r\n\r\n  constructor(config: TitleBarConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-titlebar',\r\n      hidden: true,\r\n      components: [\r\n        new MetadataLabel({ content: MetadataLabelContent.Title }),\r\n        new MetadataLabel({ content: MetadataLabelContent.Description }),\r\n      ],\r\n      keepHiddenWithoutMetadata: false,\r\n    }, <TitleBarConfig>this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let config = this.getConfig();\r\n    let shouldBeShown = !this.isHidden();\r\n    let hasMetadataText = true; // Flag to track if any metadata label contains text\r\n\r\n    let checkMetadataTextAndUpdateVisibility = () => {\r\n      hasMetadataText = false;\r\n\r\n      // Iterate through metadata labels and check if at least one of them contains text\r\n      for (let component of this.getComponents()) {\r\n        if (component instanceof MetadataLabel) {\r\n          if (!component.isEmpty()) {\r\n            hasMetadataText = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.isShown()) {\r\n        // Hide a visible titlebar if it does not contain any text and the hidden flag is set\r\n        if (config.keepHiddenWithoutMetadata && !hasMetadataText) {\r\n          this.hide();\r\n        }\r\n      } else if (shouldBeShown) {\r\n        // Show a hidden titlebar if it should actually be shown\r\n        this.show();\r\n      }\r\n    };\r\n\r\n    // Listen to text change events to update the hasMetadataText flag when the metadata dynamically changes\r\n    for (let component of this.getComponents()) {\r\n      if (component instanceof MetadataLabel) {\r\n        component.onTextChanged.subscribe(checkMetadataTextAndUpdateVisibility);\r\n      }\r\n    }\r\n\r\n    uimanager.onControlsShow.subscribe(() => {\r\n      shouldBeShown = true;\r\n      if (!(config.keepHiddenWithoutMetadata && !hasMetadataText)) {\r\n        this.show();\r\n      }\r\n    });\r\n    uimanager.onControlsHide.subscribe(() => {\r\n      shouldBeShown = false;\r\n      this.hide();\r\n    });\r\n\r\n    // init\r\n    checkMetadataTextAndUpdateVisibility();\r\n  }\r\n}","import {Button, ButtonConfig} from './button';\r\nimport {NoArgs, EventDispatcher, Event} from '../eventdispatcher';\r\nimport { UIInstanceManager } from '../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { LocalizableText } from '../localization/i18n';\r\n\r\n/**\r\n * Configuration interface for a toggle button component.\r\n */\r\nexport interface ToggleButtonConfig extends ButtonConfig {\r\n  /**\r\n   * The CSS class that marks the on-state of the button.\r\n   */\r\n  onClass?: string;\r\n  /**\r\n   * The CSS class that marks the off-state of the button.\r\n   */\r\n  offClass?: string;\r\n  /**\r\n   * WCAG20 standard for defining info about the component (usually the name)\r\n   *\r\n   * It is recommended to use `onAriaLabel` and `offAriaLabel` for toggle buttons\r\n   * as the component can then update them as the button is used.\r\n   *\r\n   * If both `ariaLabel` and `onAriaLabel` are set, `onAriaLabel` is used.\r\n   */\r\n  ariaLabel?: LocalizableText;\r\n  /**\r\n   * The aria label that marks the on-state of the button.\r\n   */\r\n  onAriaLabel?: LocalizableText;\r\n  /**\r\n   * The aria label that marks the off-state of the button.\r\n   */\r\n  offAriaLabel?: LocalizableText;\r\n  /**\r\n   * The text as string or as localize callback on the button.\r\n   */\r\n  text?: LocalizableText;\r\n}\r\n\r\n/**\r\n * A button that can be toggled between 'on' and 'off' states.\r\n */\r\nexport class ToggleButton<Config extends ToggleButtonConfig> extends Button<Config> {\r\n\r\n  private onState: boolean;\r\n\r\n  private toggleButtonEvents = {\r\n    onToggle: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\r\n    onToggleOn: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\r\n    onToggleOff: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\r\n  };\r\n\r\n  constructor(config: Config) {\r\n    super(config);\r\n\r\n    const defaultConfig: ToggleButtonConfig = {\r\n      cssClass: 'ui-togglebutton',\r\n      onClass: 'on',\r\n      offClass: 'off',\r\n    };\r\n\r\n    if (config.onAriaLabel) {\r\n      config.ariaLabel = config.onAriaLabel;\r\n    }\r\n\r\n    this.config = this.mergeConfig(config, defaultConfig as Config, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n    const config = this.getConfig();\r\n    this.getDomElement().addClass(this.prefixCss(config.offClass));\r\n  }\r\n\r\n  /**\r\n   * Toggles the button to the 'on' state.\r\n   */\r\n  on() {\r\n    if (this.isOff()) {\r\n      const config = this.getConfig();\r\n\r\n      this.onState = true;\r\n      this.getDomElement().removeClass(this.prefixCss(config.offClass));\r\n      this.getDomElement().addClass(this.prefixCss(config.onClass));\r\n\r\n      this.onToggleEvent();\r\n      this.onToggleOnEvent();\r\n\r\n      this.setAriaAttr('pressed', 'true');\r\n\r\n      if (this.config.onAriaLabel) {\r\n        this.setAriaLabel(this.config.onAriaLabel);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the button to the 'off' state.\r\n   */\r\n  off() {\r\n    if (this.isOn()) {\r\n      const config = this.getConfig();\r\n\r\n      this.onState = false;\r\n      this.getDomElement().removeClass(this.prefixCss(config.onClass));\r\n      this.getDomElement().addClass(this.prefixCss(config.offClass));\r\n\r\n      this.onToggleEvent();\r\n      this.onToggleOffEvent();\r\n\r\n      this.setAriaAttr('pressed', 'false');\r\n\r\n      if (this.config.offAriaLabel) {\r\n        this.setAriaLabel(this.config.offAriaLabel);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle the button 'on' if it is 'off', or 'off' if it is 'on'.\r\n   */\r\n  toggle() {\r\n    if (this.isOn()) {\r\n      this.off();\r\n    } else {\r\n      this.on();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the toggle button is in the 'on' state.\r\n   * @returns {boolean} true if button is 'on', false if 'off'\r\n   */\r\n  isOn(): boolean {\r\n    return this.onState;\r\n  }\r\n\r\n  /**\r\n   * Checks if the toggle button is in the 'off' state.\r\n   * @returns {boolean} true if button is 'off', false if 'on'\r\n   */\r\n  isOff(): boolean {\r\n    return !this.isOn();\r\n  }\r\n\r\n  protected onClickEvent() {\r\n    super.onClickEvent();\r\n\r\n    // Fire the toggle event together with the click event\r\n    // (they are technically the same, only the semantics are different)\r\n    this.onToggleEvent();\r\n  }\r\n\r\n  protected onToggleEvent() {\r\n    this.toggleButtonEvents.onToggle.dispatch(this);\r\n  }\r\n\r\n  protected onToggleOnEvent() {\r\n    this.toggleButtonEvents.onToggleOn.dispatch(this);\r\n  }\r\n\r\n  protected onToggleOffEvent() {\r\n    this.toggleButtonEvents.onToggleOff.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the button is toggled.\r\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\r\n   */\r\n  get onToggle(): Event<ToggleButton<Config>, NoArgs> {\r\n    return this.toggleButtonEvents.onToggle.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the button is toggled 'on'.\r\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\r\n   */\r\n  get onToggleOn(): Event<ToggleButton<Config>, NoArgs> {\r\n    return this.toggleButtonEvents.onToggleOn.getEvent();\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the button is toggled 'off'.\r\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\r\n   */\r\n  get onToggleOff(): Event<ToggleButton<Config>, NoArgs> {\r\n    return this.toggleButtonEvents.onToggleOff.getEvent();\r\n  }\r\n}","import {Component, ComponentConfig} from './component';\r\nimport {DOM} from '../dom';\r\n\r\n/**\r\n * Animated analog TV static noise.\r\n */\r\nexport class TvNoiseCanvas extends Component<ComponentConfig> {\r\n\r\n  private canvas: DOM;\r\n\r\n  private canvasElement: HTMLCanvasElement;\r\n  private canvasContext: CanvasRenderingContext2D;\r\n  private canvasWidth = 160;\r\n  private canvasHeight = 90;\r\n  private interferenceHeight = 50;\r\n  private lastFrameUpdate: number = 0;\r\n  private frameInterval: number = 60;\r\n  private useAnimationFrame: boolean = !!window.requestAnimationFrame;\r\n  private noiseAnimationWindowPos: number;\r\n  private frameUpdateHandlerId: number;\r\n\r\n  constructor(config: ComponentConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-tvnoisecanvas',\r\n    }, this.config);\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    return this.canvas = new DOM('canvas', { 'class': this.getCssClasses() });\r\n  }\r\n\r\n  start(): void {\r\n    this.canvasElement = <HTMLCanvasElement>this.canvas.get(0);\r\n    this.canvasContext = this.canvasElement.getContext('2d');\r\n    this.noiseAnimationWindowPos = -this.canvasHeight;\r\n    this.lastFrameUpdate = 0;\r\n\r\n    this.canvasElement.width = this.canvasWidth;\r\n    this.canvasElement.height = this.canvasHeight;\r\n\r\n    this.renderFrame();\r\n  }\r\n\r\n  stop(): void {\r\n    if (this.useAnimationFrame) {\r\n      cancelAnimationFrame(this.frameUpdateHandlerId);\r\n    } else {\r\n      clearTimeout(this.frameUpdateHandlerId);\r\n    }\r\n  }\r\n\r\n  private renderFrame(): void {\r\n    // This code has been copied from the player controls.js and simplified\r\n\r\n    if (this.lastFrameUpdate + this.frameInterval > new Date().getTime()) {\r\n      // It's too early to render the next frame\r\n      this.scheduleNextRender();\r\n      return;\r\n    }\r\n\r\n    let currentPixelOffset;\r\n    let canvasWidth = this.canvasWidth;\r\n    let canvasHeight = this.canvasHeight;\r\n\r\n    // Create texture\r\n    let noiseImage = this.canvasContext.createImageData(canvasWidth, canvasHeight);\r\n\r\n    // Fill texture with noise\r\n    for (let y = 0; y < canvasHeight; y++) {\r\n      for (let x = 0; x < canvasWidth; x++) {\r\n        currentPixelOffset = (canvasWidth * y * 4) + x * 4;\r\n        noiseImage.data[currentPixelOffset] = Math.random() * 255;\r\n        if (y < this.noiseAnimationWindowPos || y > this.noiseAnimationWindowPos + this.interferenceHeight) {\r\n          noiseImage.data[currentPixelOffset] *= 0.85;\r\n        }\r\n        noiseImage.data[currentPixelOffset + 1] = noiseImage.data[currentPixelOffset];\r\n        noiseImage.data[currentPixelOffset + 2] = noiseImage.data[currentPixelOffset];\r\n        noiseImage.data[currentPixelOffset + 3] = 50;\r\n      }\r\n    }\r\n\r\n    // Put texture onto canvas\r\n    this.canvasContext.putImageData(noiseImage, 0, 0);\r\n\r\n    this.lastFrameUpdate = new Date().getTime();\r\n    this.noiseAnimationWindowPos += 7;\r\n    if (this.noiseAnimationWindowPos > canvasHeight) {\r\n      this.noiseAnimationWindowPos = -canvasHeight;\r\n    }\r\n\r\n    this.scheduleNextRender();\r\n  }\r\n\r\n  private scheduleNextRender(): void {\r\n    if (this.useAnimationFrame) {\r\n      this.frameUpdateHandlerId = window.requestAnimationFrame(this.renderFrame.bind(this));\r\n    } else {\r\n      this.frameUpdateHandlerId = window.setTimeout(this.renderFrame.bind(this), this.frameInterval);\r\n    }\r\n  }\r\n}","import {ContainerConfig, Container} from './container';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {DOM} from '../dom';\r\nimport {Timeout} from '../timeout';\r\nimport {PlayerUtils} from '../playerutils';\r\nimport { CancelEventArgs, EventDispatcher } from '../eventdispatcher';\r\nimport { PlayerAPI, PlayerResizedEvent } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * Configuration interface for a {@link UIContainer}.\r\n */\r\nexport interface UIContainerConfig extends ContainerConfig {\r\n  /**\r\n   * The delay in milliseconds after which the control bar will be hidden when there is no user interaction.\r\n   * Set to -1 for the UI to be always shown.\r\n   * Default: 5 seconds (5000)\r\n   */\r\n  hideDelay?: number;\r\n  /**\r\n   * An array of player states in which the UI will not be hidden, no matter what the {@link hideDelay} is.\r\n   */\r\n  hidePlayerStateExceptions?: PlayerUtils.PlayerState[];\r\n  /**\r\n   * The HTML element on which user interaction events (e.g. mouse and touch events) will be tracked to detect\r\n   * interaction with the UI. These basically trigger showing and hiding of the UI.\r\n   * Default: the UI container itself\r\n   */\r\n  userInteractionEventSource?: HTMLElement;\r\n}\r\n\r\n/**\r\n * The base container that contains all of the UI. The UIContainer is passed to the {@link UIManager} to build and\r\n * setup the UI.\r\n */\r\nexport class UIContainer extends Container<UIContainerConfig> {\r\n\r\n  private static readonly STATE_PREFIX = 'player-state-';\r\n\r\n  private static readonly FULLSCREEN = 'fullscreen';\r\n  private static readonly BUFFERING = 'buffering';\r\n  private static readonly REMOTE_CONTROL = 'remote-control';\r\n  private static readonly CONTROLS_SHOWN = 'controls-shown';\r\n  private static readonly CONTROLS_HIDDEN = 'controls-hidden';\r\n\r\n  private uiHideTimeout: Timeout;\r\n  private playerStateChange: EventDispatcher<UIContainer, PlayerUtils.PlayerState>;\r\n\r\n  private userInteractionEventSource: DOM;\r\n  private userInteractionEvents: { name: string, handler: EventListenerOrEventListenerObject }[];\r\n\r\n  constructor(config: UIContainerConfig) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, <UIContainerConfig>{\r\n      cssClass: 'ui-uicontainer',\r\n      role: 'region',\r\n      ariaLabel: i18n.getLocalizer('player'),\r\n      hideDelay: 5000,\r\n    }, this.config);\r\n\r\n    this.playerStateChange = new EventDispatcher<UIContainer, PlayerUtils.PlayerState>();\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    const config = this.getConfig();\r\n\r\n    if (config.userInteractionEventSource) {\r\n      this.userInteractionEventSource = new DOM(config.userInteractionEventSource);\r\n    } else {\r\n      this.userInteractionEventSource = this.getDomElement();\r\n    }\r\n\r\n    super.configure(player, uimanager);\r\n\r\n    this.configureUIShowHide(player, uimanager);\r\n    this.configurePlayerStates(player, uimanager);\r\n  }\r\n\r\n  private configureUIShowHide(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    let config = this.getConfig();\r\n\r\n    if (config.hideDelay === -1) {\r\n      uimanager.onConfigured.subscribe(() => uimanager.onControlsShow.dispatch(this));\r\n      return;\r\n    }\r\n\r\n    let isUiShown = false;\r\n    let isSeeking = false;\r\n    let isFirstTouch = true;\r\n    let playerState: PlayerUtils.PlayerState;\r\n\r\n    const hidingPrevented = (): boolean => {\r\n      return config.hidePlayerStateExceptions && config.hidePlayerStateExceptions.indexOf(playerState) > -1;\r\n    };\r\n\r\n    let showUi = () => {\r\n      if (!isUiShown) {\r\n        // Let subscribers know that they should reveal themselves\r\n        uimanager.onControlsShow.dispatch(this);\r\n        isUiShown = true;\r\n      }\r\n      // Don't trigger timeout while seeking (it will be triggered once the seek is finished) or casting\r\n      if (!isSeeking && !player.isCasting() && !hidingPrevented()) {\r\n        this.uiHideTimeout.start();\r\n      }\r\n    };\r\n\r\n    let hideUi = () => {\r\n      // Hide the UI only if it is shown, and if not casting\r\n      if (isUiShown && !player.isCasting()) {\r\n        // Issue a preview event to check if we are good to hide the controls\r\n        let previewHideEventArgs = <CancelEventArgs>{};\r\n        uimanager.onPreviewControlsHide.dispatch(this, previewHideEventArgs);\r\n\r\n        if (!previewHideEventArgs.cancel) {\r\n          // If the preview wasn't canceled, let subscribers know that they should now hide themselves\r\n          uimanager.onControlsHide.dispatch(this);\r\n          isUiShown = false;\r\n        } else {\r\n          // If the hide preview was canceled, continue to show UI\r\n          showUi();\r\n        }\r\n      }\r\n    };\r\n\r\n    // Timeout to defer UI hiding by the configured delay time\r\n    this.uiHideTimeout = new Timeout(config.hideDelay, hideUi);\r\n\r\n    this.userInteractionEvents = [{\r\n      // On touch displays, the first touch reveals the UI\r\n      name: 'touchend',\r\n      handler: (e) => {\r\n        if (!isUiShown) {\r\n          // Only if the UI is hidden, we prevent other actions (except for the first touch) and reveal the UI\r\n          // instead. The first touch is not prevented to let other listeners receive the event and trigger an\r\n          // initial action, e.g. the huge playback button can directly start playback instead of requiring a double\r\n          // tap which 1. reveals the UI and 2. starts playback.\r\n          if (isFirstTouch && !player.isPlaying()) {\r\n            isFirstTouch = false;\r\n          } else {\r\n            e.preventDefault();\r\n          }\r\n          showUi();\r\n        }\r\n      },\r\n    }, {\r\n      // When the mouse enters, we show the UI\r\n      name: 'mouseenter',\r\n      handler: () => {\r\n        showUi();\r\n      },\r\n    }, {\r\n      // When the mouse moves within, we show the UI\r\n      name: 'mousemove',\r\n      handler: () => {\r\n        showUi();\r\n      },\r\n    }, {\r\n      name: 'focusin',\r\n      handler: () => {\r\n        showUi();\r\n      },\r\n    }, {\r\n      name: 'keydown',\r\n      handler: () => {\r\n        showUi();\r\n      },\r\n    }, {\r\n      // When the mouse leaves, we can prepare to hide the UI, except a seek is going on\r\n      name: 'mouseleave',\r\n      handler: () => {\r\n        // When a seek is going on, the seek scrub pointer may exit the UI area while still seeking, and we do not\r\n        // hide the UI in such cases\r\n        if (!isSeeking && !hidingPrevented()) {\r\n          this.uiHideTimeout.start();\r\n        }\r\n      },\r\n    }];\r\n\r\n    this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.on(event.name, event.handler));\r\n\r\n    uimanager.onSeek.subscribe(() => {\r\n      this.uiHideTimeout.clear(); // Don't hide UI while a seek is in progress\r\n      isSeeking = true;\r\n    });\r\n    uimanager.onSeeked.subscribe(() => {\r\n      isSeeking = false;\r\n      if (!hidingPrevented()) {\r\n        this.uiHideTimeout.start(); // Re-enable UI hide timeout after a seek\r\n      }\r\n    });\r\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\r\n      showUi(); // Show UI when a Cast session has started (UI will then stay permanently on during the session)\r\n    });\r\n    this.playerStateChange.subscribe((_, state) => {\r\n      playerState = state;\r\n      if (hidingPrevented()) {\r\n        // Entering a player state that prevents hiding and forces the controls to be shown\r\n        this.uiHideTimeout.clear();\r\n        showUi();\r\n      } else {\r\n        // Entering a player state that allows hiding\r\n        this.uiHideTimeout.start();\r\n      }\r\n    });\r\n  }\r\n\r\n  private configurePlayerStates(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    let container = this.getDomElement();\r\n\r\n    // Convert player states into CSS class names\r\n    let stateClassNames = <any>[];\r\n    for (let state in PlayerUtils.PlayerState) {\r\n      if (isNaN(Number(state))) {\r\n        let enumName = PlayerUtils.PlayerState[<any>PlayerUtils.PlayerState[state]];\r\n        stateClassNames[PlayerUtils.PlayerState[state]] =\r\n          this.prefixCss(UIContainer.STATE_PREFIX + enumName.toLowerCase());\r\n      }\r\n    }\r\n\r\n    let removeStates = () => {\r\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Idle]);\r\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Prepared]);\r\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Playing]);\r\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Paused]);\r\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Finished]);\r\n    };\r\n\r\n    const updateState = (state: PlayerUtils.PlayerState) => {\r\n      removeStates();\r\n      container.addClass(stateClassNames[state]);\r\n      this.playerStateChange.dispatch(this, state);\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\r\n      updateState(PlayerUtils.PlayerState.Prepared);\r\n    });\r\n    player.on(player.exports.PlayerEvent.Play, () => {\r\n      updateState(PlayerUtils.PlayerState.Playing);\r\n    });\r\n    player.on(player.exports.PlayerEvent.Playing, () => {\r\n      updateState(PlayerUtils.PlayerState.Playing);\r\n    });\r\n    player.on(player.exports.PlayerEvent.Paused, () => {\r\n      updateState(PlayerUtils.PlayerState.Paused);\r\n    });\r\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\r\n      updateState(PlayerUtils.PlayerState.Finished);\r\n    });\r\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\r\n      updateState(PlayerUtils.PlayerState.Idle);\r\n    });\r\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\r\n      updateState(PlayerUtils.getState(player));\r\n    });\r\n\r\n    // Fullscreen marker class\r\n    player.on(player.exports.PlayerEvent.ViewModeChanged, () => {\r\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\r\n        container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\r\n      } else {\r\n        container.removeClass(this.prefixCss(UIContainer.FULLSCREEN));\r\n      }\r\n    });\r\n    // Init fullscreen state\r\n    if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\r\n      container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\r\n    }\r\n\r\n    // Buffering marker class\r\n    player.on(player.exports.PlayerEvent.StallStarted, () => {\r\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\r\n    });\r\n    player.on(player.exports.PlayerEvent.StallEnded, () => {\r\n      container.removeClass(this.prefixCss(UIContainer.BUFFERING));\r\n    });\r\n    // Init buffering state\r\n    if (player.isStalled()) {\r\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\r\n    }\r\n\r\n    // RemoteControl marker class\r\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\r\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\r\n    });\r\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\r\n      container.removeClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\r\n    });\r\n    // Init RemoteControl state\r\n    if (player.isCasting()) {\r\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\r\n    }\r\n\r\n    // Controls visibility marker class\r\n    uimanager.onControlsShow.subscribe(() => {\r\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\r\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\r\n    });\r\n    uimanager.onControlsHide.subscribe(() => {\r\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\r\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\r\n    });\r\n\r\n    // Layout size classes\r\n    let updateLayoutSizeClasses = (width: number, height: number) => {\r\n      container.removeClass(this.prefixCss('layout-max-width-400'));\r\n      container.removeClass(this.prefixCss('layout-max-width-600'));\r\n      container.removeClass(this.prefixCss('layout-max-width-800'));\r\n      container.removeClass(this.prefixCss('layout-max-width-1200'));\r\n\r\n      if (width <= 400) {\r\n        container.addClass(this.prefixCss('layout-max-width-400'));\r\n      } else if (width <= 600) {\r\n        container.addClass(this.prefixCss('layout-max-width-600'));\r\n      } else if (width <= 800) {\r\n        container.addClass(this.prefixCss('layout-max-width-800'));\r\n      } else if (width <= 1200) {\r\n        container.addClass(this.prefixCss('layout-max-width-1200'));\r\n      }\r\n    };\r\n    player.on(player.exports.PlayerEvent.PlayerResized, (e: PlayerResizedEvent) => {\r\n      // Convert strings (with \"px\" suffix) to ints\r\n      let width = Math.round(Number(e.width.substring(0, e.width.length - 2)));\r\n      let height = Math.round(Number(e.height.substring(0, e.height.length - 2)));\r\n\r\n      updateLayoutSizeClasses(width, height);\r\n    });\r\n    // Init layout state\r\n    updateLayoutSizeClasses(new DOM(player.getContainer()).width(), new DOM(player.getContainer()).height());\r\n  }\r\n\r\n  release(): void {\r\n    // Explicitly unsubscribe user interaction event handlers because they could be attached to an external element\r\n    // that isn't owned by the UI and therefore not removed on release.\r\n    if (this.userInteractionEvents) {\r\n      this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.off(event.name, event.handler));\r\n    }\r\n\r\n    super.release();\r\n\r\n    if (this.uiHideTimeout) {\r\n      this.uiHideTimeout.clear();\r\n    }\r\n  }\r\n\r\n  protected toDomElement(): DOM {\r\n    let container = super.toDomElement();\r\n\r\n    // Detect flexbox support (not supported in IE9)\r\n    if (document && typeof document.createElement('p').style.flex !== 'undefined') {\r\n      container.addClass(this.prefixCss('flexbox'));\r\n    } else {\r\n      container.addClass(this.prefixCss('no-flexbox'));\r\n    }\r\n\r\n    return container;\r\n  }\r\n}\r\n","import {SelectBox} from './selectbox';\r\nimport {ListSelectorConfig} from './listselector';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * A select box providing a selection between 'auto' and the available video qualities.\r\n */\r\nexport class VideoQualitySelectBox extends SelectBox {\r\n\r\n  private hasAuto: boolean;\r\n\r\n  constructor(config: ListSelectorConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClasses: ['ui-videoqualityselectbox'],\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let selectCurrentVideoQuality = () => {\r\n      this.selectItem(player.getVideoQuality().id);\r\n    };\r\n\r\n    let updateVideoQualities = () => {\r\n      let videoQualities = player.getAvailableVideoQualities();\r\n\r\n      this.clearItems();\r\n\r\n      // Progressive streams do not support automatic quality selection\r\n      this.hasAuto = player.getStreamType() !== 'progressive';\r\n\r\n      if (this.hasAuto) {\r\n        // Add entry for automatic quality switching (default setting)\r\n        this.addItem('auto', i18n.getLocalizer('auto'));\r\n      }\r\n\r\n      // Add video qualities\r\n      for (let videoQuality of videoQualities) {\r\n        this.addItem(videoQuality.id, videoQuality.label);\r\n      }\r\n\r\n      // Select initial quality\r\n      selectCurrentVideoQuality();\r\n    };\r\n\r\n    this.onItemSelected.subscribe((sender: VideoQualitySelectBox, value: string) => {\r\n      player.setVideoQuality(value);\r\n    });\r\n\r\n    // Update qualities when source goes away\r\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateVideoQualities);\r\n    // Update qualities when the period within a source changes\r\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateVideoQualities);\r\n    // Update quality selection when quality is changed (from outside)\r\n    player.on(player.exports.PlayerEvent.VideoQualityChanged, selectCurrentVideoQuality);\r\n\r\n    if ((player.exports.PlayerEvent as any).VideoQualityAdded) {\r\n      // Update qualities when their availability changed\r\n      // TODO: remove any cast after next player release\r\n      player.on((player.exports.PlayerEvent as any).VideoQualityAdded, updateVideoQualities);\r\n      player.on((player.exports.PlayerEvent as any).VideoQualityRemoved, updateVideoQualities);\r\n    }\r\n\r\n    uimanager.getConfig().events.onUpdated.subscribe(updateVideoQualities);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the select box contains an 'auto' item for automatic quality selection mode.\r\n   * @return {boolean}\r\n   */\r\n  hasAutoItem(): boolean {\r\n    return this.hasAuto;\r\n  }\r\n}","import {Container, ContainerConfig} from './container';\r\nimport {VolumeSlider} from './volumeslider';\r\nimport {VolumeToggleButton} from './volumetogglebutton';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport {Timeout} from '../timeout';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\n\r\n/**\r\n * Configuration interface for a {@link VolumeControlButton}.\r\n */\r\nexport interface VolumeControlButtonConfig extends ContainerConfig {\r\n  /**\r\n   * The delay after which the volume slider will be hidden when there is no user interaction.\r\n   * Care must be taken that the delay is long enough so users can reach the slider from the toggle button, e.g. by\r\n   * mouse movement. If the delay is too short, the sliders disappears before the mouse pointer has reached it and\r\n   * the user is not able to use it.\r\n   * Default: 500ms\r\n   */\r\n  hideDelay?: number;\r\n  /**\r\n   * Specifies if the volume slider should be vertically or horizontally aligned.\r\n   * Default: true\r\n   */\r\n  vertical?: boolean;\r\n}\r\n\r\n/**\r\n * A composite volume control that consists of and internally manages a volume control button that can be used\r\n * for muting, and a (depending on the CSS style, e.g. slide-out) volume control bar.\r\n */\r\nexport class VolumeControlButton extends Container<VolumeControlButtonConfig> {\r\n\r\n  private volumeToggleButton: VolumeToggleButton;\r\n  private volumeSlider: VolumeSlider;\r\n\r\n  private volumeSliderHideTimeout: Timeout;\r\n\r\n  constructor(config: VolumeControlButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.volumeToggleButton = new VolumeToggleButton();\r\n    this.volumeSlider = new VolumeSlider({\r\n      vertical: config.vertical != null ? config.vertical : true,\r\n      hidden: true,\r\n    });\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-volumecontrolbutton',\r\n      components: [this.volumeToggleButton, this.volumeSlider],\r\n      hideDelay: 500,\r\n    }, <VolumeControlButtonConfig>this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let volumeToggleButton = this.getVolumeToggleButton();\r\n    let volumeSlider = this.getVolumeSlider();\r\n\r\n    this.volumeSliderHideTimeout = new Timeout(this.getConfig().hideDelay, () => {\r\n      volumeSlider.hide();\r\n    });\r\n\r\n    /*\r\n     * Volume Slider visibility handling\r\n     *\r\n     * The volume slider shall be visible while the user hovers the mute toggle button, while the user hovers the\r\n     * volume slider, and while the user slides the volume slider. If none of these situations are true, the slider\r\n     * shall disappear.\r\n     */\r\n    let volumeSliderHovered = false;\r\n    volumeToggleButton.getDomElement().on('mouseenter', () => {\r\n      // Show volume slider when mouse enters the button area\r\n      if (volumeSlider.isHidden()) {\r\n        volumeSlider.show();\r\n      }\r\n      // Avoid hiding of the slider when button is hovered\r\n      this.volumeSliderHideTimeout.clear();\r\n    });\r\n    volumeToggleButton.getDomElement().on('mouseleave', () => {\r\n      // Hide slider delayed when button is left\r\n      this.volumeSliderHideTimeout.reset();\r\n    });\r\n    volumeSlider.getDomElement().on('mouseenter', () => {\r\n      // When the slider is entered, cancel the hide timeout activated by leaving the button\r\n      this.volumeSliderHideTimeout.clear();\r\n      volumeSliderHovered = true;\r\n    });\r\n    volumeSlider.getDomElement().on('mouseleave', () => {\r\n      // When mouse leaves the slider, only hide it if there is no slide operation in progress\r\n      if (volumeSlider.isSeeking()) {\r\n        this.volumeSliderHideTimeout.clear();\r\n      } else {\r\n        this.volumeSliderHideTimeout.reset();\r\n      }\r\n      volumeSliderHovered = false;\r\n    });\r\n    volumeSlider.onSeeked.subscribe(() => {\r\n      // When a slide operation is done and the slider not hovered (mouse outside slider), hide slider delayed\r\n      if (!volumeSliderHovered) {\r\n        this.volumeSliderHideTimeout.reset();\r\n      }\r\n    });\r\n  }\r\n\r\n  release(): void {\r\n    super.release();\r\n    this.volumeSliderHideTimeout.clear();\r\n  }\r\n\r\n  /**\r\n   * Provides access to the internally managed volume toggle button.\r\n   * @returns {VolumeToggleButton}\r\n   */\r\n  getVolumeToggleButton(): VolumeToggleButton {\r\n    return this.volumeToggleButton;\r\n  }\r\n\r\n  /**\r\n   * Provides access to the internally managed volume silder.\r\n   * @returns {VolumeSlider}\r\n   */\r\n  getVolumeSlider(): VolumeSlider {\r\n    return this.volumeSlider;\r\n  }\r\n}","import { SeekBar, SeekBarConfig, SeekPreviewEventArgs } from './seekbar';\r\nimport { UIInstanceManager } from '../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { VolumeTransition } from '../volumecontroller';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * Configuration interface for the {@link VolumeSlider} component.\r\n */\r\nexport interface VolumeSliderConfig extends SeekBarConfig {\r\n  /**\r\n   * Specifies if the volume slider should be automatically hidden when volume control is prohibited by the\r\n   * browser or platform. This currently only applies to iOS.\r\n   * Default: true\r\n   */\r\n  hideIfVolumeControlProhibited?: boolean;\r\n}\r\n\r\n/**\r\n * A simple volume slider component to adjust the player's volume setting.\r\n */\r\nexport class VolumeSlider extends SeekBar {\r\n  private volumeTransition: VolumeTransition;\r\n\r\n  constructor(config: VolumeSliderConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, <VolumeSliderConfig>{\r\n      cssClass: 'ui-volumeslider',\r\n      hideIfVolumeControlProhibited: true,\r\n      ariaLabel: i18n.getLocalizer('settings.audio.volume'),\r\n      tabIndex: 0,\r\n    }, this.config);\r\n  }\r\n\r\n  private setVolumeAriaSliderValues(value: number) {\r\n    this.getDomElement().attr('aria-valuenow', Math.ceil(value).toString());\r\n    this.getDomElement().attr('aria-valuetext', `${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${Math.ceil(value)}`);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager, false);\r\n\r\n    this.setAriaSliderMinMax('0', '100');\r\n\r\n    let config = <VolumeSliderConfig>this.getConfig();\r\n\r\n    const volumeController = uimanager.getConfig().volumeController;\r\n\r\n    if (config.hideIfVolumeControlProhibited && !this.detectVolumeControlAvailability()) {\r\n      this.hide();\r\n\r\n      // We can just return from here, because the user will never interact with the control and any configured\r\n      // functionality would only eat resources for no reason.\r\n      return;\r\n    }\r\n\r\n    volumeController.onChanged.subscribe((_, args) => {\r\n      if (args.muted) {\r\n        this.setVolumeAriaSliderValues(0);\r\n        this.setPlaybackPosition(0);\r\n      } else {\r\n        this.setPlaybackPosition(args.volume);\r\n        this.setVolumeAriaSliderValues(args.volume);\r\n      }\r\n    });\r\n\r\n    this.onSeek.subscribe(() => {\r\n      this.volumeTransition = volumeController.startTransition();\r\n    });\r\n\r\n    this.onSeekPreview.subscribeRateLimited(this.updateVolumeWhileScrubbing, 50);\r\n    this.onSeeked.subscribe((sender, percentage) => {\r\n      if (this.volumeTransition) {\r\n        this.volumeTransition.finish(percentage);\r\n      }\r\n    });\r\n\r\n    // Update the volume slider marker when the player resized, a source is loaded,\r\n    // or the UI is configured. Check the seekbar for a detailed description.\r\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\r\n      this.refreshPlaybackPosition();\r\n    });\r\n    uimanager.onConfigured.subscribe(() => {\r\n      this.refreshPlaybackPosition();\r\n    });\r\n\r\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\r\n      this.refreshPlaybackPosition();\r\n    });\r\n\r\n    uimanager.onComponentShow.subscribe(() => {\r\n      this.refreshPlaybackPosition();\r\n    });\r\n    uimanager.onComponentHide.subscribe(() => {\r\n      this.refreshPlaybackPosition();\r\n    });\r\n\r\n    // Init volume bar\r\n    volumeController.onChangedEvent();\r\n  }\r\n\r\n  private updateVolumeWhileScrubbing = (sender: VolumeSlider, args: SeekPreviewEventArgs) => {\r\n    if (args.scrubbing && this.volumeTransition) {\r\n      this.volumeTransition.update(args.position);\r\n    }\r\n  };\r\n\r\n  private detectVolumeControlAvailability(): boolean {\r\n    /*\r\n     * \"On iOS devices, the audio level is always under the user’s physical control. The volume property is not\r\n     * settable in JavaScript. Reading the volume property always returns 1.\"\r\n     * https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html\r\n     */\r\n    // as muted autoplay gets paused as soon as we unmute it, we may not touch the volume of the actual player so we\r\n    // probe a dummy audio element\r\n    const dummyVideoElement = document.createElement('video');\r\n    // try setting the volume to 0.7 and if it's still 1 we are on a volume control restricted device\r\n    dummyVideoElement.volume = 0.7;\r\n    return dummyVideoElement.volume !== 1;\r\n  }\r\n\r\n  release(): void {\r\n    super.release();\r\n\r\n    this.onSeekPreview.unsubscribe(this.updateVolumeWhileScrubbing);\r\n  }\r\n}\r\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\r\nimport { UIInstanceManager } from '../uimanager';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * A button that toggles audio muting.\r\n */\r\nexport class VolumeToggleButton extends ToggleButton<ToggleButtonConfig> {\r\n\r\n  constructor(config: ToggleButtonConfig = {}) {\r\n    super(config);\r\n\r\n    const defaultConfig: ToggleButtonConfig = {\r\n      cssClass: 'ui-volumetogglebutton',\r\n      text: i18n.getLocalizer('settings.audio.mute'),\r\n      onClass: 'muted',\r\n      offClass: 'unmuted',\r\n      ariaLabel: i18n.getLocalizer('settings.audio.mute'),\r\n    };\r\n\r\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    const volumeController = uimanager.getConfig().volumeController;\r\n\r\n    volumeController.onChanged.subscribe((_, args) => {\r\n      if (args.muted) {\r\n        this.on();\r\n      } else {\r\n        this.off();\r\n      }\r\n\r\n      const volumeLevelTens = Math.ceil(args.volume / 10);\r\n      this.getDomElement().data(this.prefixCss('volume-level-tens'), String(volumeLevelTens));\r\n    });\r\n\r\n    this.onClick.subscribe(() => {\r\n      volumeController.toggleMuted();\r\n    });\r\n\r\n    // Startup init\r\n    volumeController.onChangedEvent();\r\n  }\r\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\r\nimport {UIInstanceManager} from '../uimanager';\r\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * A button that toggles the video view between normal/mono and VR/stereo.\r\n */\r\nexport class VRToggleButton extends ToggleButton<ToggleButtonConfig> {\r\n\r\n  constructor(config: ToggleButtonConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-vrtogglebutton',\r\n      text: i18n.getLocalizer('vr'),\r\n    }, this.config);\r\n  }\r\n\r\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\r\n    super.configure(player, uimanager);\r\n\r\n    let isVRConfigured = () => {\r\n      // VR availability cannot be checked through getVRStatus() because it is asynchronously populated and not\r\n      // available at UI initialization. As an alternative, we check the VR settings in the config.\r\n      // TODO use getVRStatus() through isVRStereoAvailable() once the player has been rewritten and the status is\r\n      // available in Ready\r\n      const source = player.getSource();\r\n      return source && Boolean(source.vr);\r\n    };\r\n\r\n    let isVRStereoAvailable = () => {\r\n      const source = player.getSource();\r\n      return player.vr && Boolean(source.vr);\r\n    };\r\n\r\n    let vrStateHandler = (ev: PlayerEventBase) => {\r\n      if (ev.type === player.exports.PlayerEvent.Warning\r\n        && (ev as WarningEvent).code !== player.exports.WarningCode.VR_RENDERING_ERROR) {\r\n        return;\r\n      }\r\n\r\n      if (isVRConfigured() && isVRStereoAvailable()) {\r\n        this.show(); // show button in case it is hidden\r\n\r\n        if (player.vr && player.vr.getStereo()) {\r\n          this.on();\r\n        } else {\r\n          this.off();\r\n        }\r\n      } else {\r\n        this.hide(); // hide button if no stereo mode available\r\n      }\r\n    };\r\n\r\n    let vrButtonVisibilityHandler = () => {\r\n      if (isVRConfigured()) {\r\n        this.show();\r\n      } else {\r\n        this.hide();\r\n      }\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.VRStereoChanged, vrStateHandler);\r\n    player.on(player.exports.PlayerEvent.Warning, vrStateHandler);\r\n    // Hide button when VR source goes away\r\n    player.on(player.exports.PlayerEvent.SourceUnloaded, vrButtonVisibilityHandler);\r\n    uimanager.getConfig().events.onUpdated.subscribe(vrButtonVisibilityHandler);\r\n\r\n    this.onClick.subscribe(() => {\r\n      if (!isVRStereoAvailable()) {\r\n        if (console) {\r\n          console.log('No VR content');\r\n        }\r\n      } else {\r\n        if (player.vr && player.vr.getStereo()) {\r\n          player.vr.setStereo(false);\r\n        } else {\r\n          player.vr.setStereo(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Set startup visibility\r\n    vrButtonVisibilityHandler();\r\n  }\r\n}","import {ClickOverlay, ClickOverlayConfig} from './clickoverlay';\r\nimport { i18n } from '../localization/i18n';\r\n\r\n/**\r\n * Configuration interface for a {@link ClickOverlay}.\r\n */\r\nexport interface WatermarkConfig extends ClickOverlayConfig {\r\n  // nothing yet\r\n}\r\n\r\n/**\r\n * A watermark overlay with a clickable logo.\r\n */\r\nexport class Watermark extends ClickOverlay {\r\n\r\n  constructor(config: WatermarkConfig = {}) {\r\n    super(config);\r\n\r\n    this.config = this.mergeConfig(config, {\r\n      cssClass: 'ui-watermark',\r\n      url: 'http://bitmovin.com',\r\n      role: 'link',\r\n      text: 'logo',\r\n      ariaLabel: i18n.getLocalizer('watermarkLink'),\r\n    }, <WatermarkConfig>this.config);\r\n  }\r\n}","import {VRToggleButton} from './components/vrtogglebutton';\r\nimport {SettingsToggleButton} from './components/settingstogglebutton';\r\nimport {VolumeSlider} from './components/volumeslider';\r\nimport {PlaybackTimeLabel, PlaybackTimeLabelMode} from './components/playbacktimelabel';\r\nimport {AirPlayToggleButton} from './components/airplaytogglebutton';\r\nimport {ErrorMessageOverlay} from './components/errormessageoverlay';\r\nimport {ControlBar} from './components/controlbar';\r\nimport {CastToggleButton} from './components/casttogglebutton';\r\nimport {FullscreenToggleButton} from './components/fullscreentogglebutton';\r\nimport {RecommendationOverlay} from './components/recommendationoverlay';\r\nimport {PlaybackSpeedSelectBox} from './components/playbackspeedselectbox';\r\nimport {AudioQualitySelectBox} from './components/audioqualityselectbox';\r\nimport {CastStatusOverlay} from './components/caststatusoverlay';\r\nimport {UIContainer} from './components/uicontainer';\r\nimport {Watermark} from './components/watermark';\r\nimport {SubtitleOverlay} from './components/subtitleoverlay';\r\nimport {SettingsPanel} from './components/settingspanel';\r\nimport {SeekBarLabel} from './components/seekbarlabel';\r\nimport {PlaybackToggleOverlay} from './components/playbacktoggleoverlay';\r\nimport {PictureInPictureToggleButton} from './components/pictureinpicturetogglebutton';\r\nimport {Spacer} from './components/spacer';\r\nimport {Container} from './components/container';\r\nimport {VolumeToggleButton} from './components/volumetogglebutton';\r\nimport {PlaybackToggleButton} from './components/playbacktogglebutton';\r\nimport {SeekBar} from './components/seekbar';\r\nimport {VideoQualitySelectBox} from './components/videoqualityselectbox';\r\nimport {UIConditionContext, UIManager} from './uimanager';\r\nimport {TitleBar} from './components/titlebar';\r\nimport {BufferingOverlay} from './components/bufferingoverlay';\r\nimport {SubtitleListBox} from './components/subtitlelistbox';\r\nimport {AudioTrackListBox} from './components/audiotracklistbox';\r\nimport {SettingsPanelItem} from './components/settingspanelitem';\r\nimport {SettingsPanelPage} from './components/settingspanelpage';\r\nimport { UIFactory } from './uifactory';\r\nimport { UIConfig } from './uiconfig';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\n\r\nexport namespace DemoFactory {\r\n\r\n  export function buildDemoWithSeparateAudioSubtitlesButtons(player: PlayerAPI, config: UIConfig = {}): UIManager {\r\n    // show smallScreen UI only on mobile/handheld devices\r\n    let smallScreenSwitchWidth = 600;\r\n\r\n    return new UIManager(player, [{\r\n      ui: UIFactory.modernSmallScreenAdsUI(),\r\n      condition: (context: UIConditionContext) => {\r\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth\r\n          && context.isAd && context.adRequiresUi;\r\n      },\r\n    }, {\r\n      ui: UIFactory.modernAdsUI(),\r\n      condition: (context: UIConditionContext) => {\r\n        return context.isAd && context.adRequiresUi;\r\n      },\r\n    }, {\r\n      ui: UIFactory.modernSmallScreenUI(),\r\n      condition: (context: UIConditionContext) => {\r\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth;\r\n      },\r\n    }, {\r\n      ui: modernUIWithSeparateAudioSubtitlesButtons(),\r\n    }], config);\r\n  }\r\n\r\n  function modernUIWithSeparateAudioSubtitlesButtons() {\r\n    let subtitleOverlay = new SubtitleOverlay();\r\n\r\n    let settingsPanel = new SettingsPanel({\r\n      components: [\r\n        new SettingsPanelPage({\r\n          components: [\r\n            new SettingsPanelItem('Video Quality', new VideoQualitySelectBox()),\r\n            new SettingsPanelItem('Speed', new PlaybackSpeedSelectBox()),\r\n            new SettingsPanelItem('Audio Quality', new AudioQualitySelectBox()),\r\n          ],\r\n        }),\r\n      ],\r\n      hidden: true,\r\n    });\r\n\r\n    let subtitleListBox = new SubtitleListBox();\r\n    let subtitleSettingsPanel = new SettingsPanel({\r\n      components: [\r\n        new SettingsPanelPage({\r\n          components: [\r\n            new SettingsPanelItem(null, subtitleListBox),\r\n          ],\r\n        }),\r\n      ],\r\n      hidden: true,\r\n    });\r\n\r\n    let audioTrackListBox = new AudioTrackListBox();\r\n    let audioTrackSettingsPanel = new SettingsPanel({\r\n      components: [\r\n        new SettingsPanelPage({\r\n          components: [\r\n            new SettingsPanelItem(null, audioTrackListBox),\r\n          ],\r\n        }),\r\n      ],\r\n      hidden: true,\r\n    });\r\n\r\n    let controlBar = new ControlBar({\r\n      components: [\r\n        audioTrackSettingsPanel,\r\n        subtitleSettingsPanel,\r\n        settingsPanel,\r\n        new Container({\r\n          components: [\r\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\r\n            new SeekBar({ label: new SeekBarLabel() }),\r\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\r\n          ],\r\n          cssClasses: ['controlbar-top'],\r\n        }),\r\n        new Container({\r\n          components: [\r\n            new PlaybackToggleButton(),\r\n            new VolumeToggleButton(),\r\n            new VolumeSlider(),\r\n            new Spacer(),\r\n            new PictureInPictureToggleButton(),\r\n            new AirPlayToggleButton(),\r\n            new CastToggleButton(),\r\n            new VRToggleButton(),\r\n            new SettingsToggleButton({\r\n              settingsPanel: audioTrackSettingsPanel,\r\n              cssClass: 'ui-audiotracksettingstogglebutton',\r\n            }),\r\n            new SettingsToggleButton({\r\n              settingsPanel: subtitleSettingsPanel,\r\n              cssClass: 'ui-subtitlesettingstogglebutton',\r\n            }),\r\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\r\n            new FullscreenToggleButton(),\r\n          ],\r\n          cssClasses: ['controlbar-bottom'],\r\n        }),\r\n      ],\r\n    });\r\n\r\n    return new UIContainer({\r\n      components: [\r\n        subtitleOverlay,\r\n        new BufferingOverlay(),\r\n        new PlaybackToggleOverlay(),\r\n        new CastStatusOverlay(),\r\n        controlBar,\r\n        new TitleBar(),\r\n        new RecommendationOverlay(),\r\n        new Watermark(),\r\n        new ErrorMessageOverlay(),\r\n      ],\r\n    });\r\n  }\r\n}","export interface Offset {\r\n  left: number;\r\n  top: number;\r\n}\r\n\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface CssProperties {\r\n  [propertyName: string]: string;\r\n}\r\n\r\n/**\r\n * Simple DOM manipulation and DOM element event handling modeled after jQuery (as replacement for jQuery).\r\n *\r\n * Like jQuery, DOM operates on single elements and lists of elements. For example: creating an element returns a DOM\r\n * instance with a single element, selecting elements returns a DOM instance with zero, one, or many elements. Similar\r\n * to jQuery, setters usually affect all elements, while getters operate on only the first element.\r\n * Also similar to jQuery, most methods (except getters) return the DOM instance facilitating easy chaining of method\r\n * calls.\r\n *\r\n * Built with the help of: http://youmightnotneedjquery.com/\r\n */\r\nexport class DOM {\r\n\r\n  private document: Document;\r\n\r\n  /**\r\n   * The list of elements that the instance wraps. Take care that not all methods can operate on the whole list,\r\n   * getters usually just work on the first element.\r\n   */\r\n  private elements: HTMLElement[];\r\n\r\n  /**\r\n   * Creates a DOM element.\r\n   * @param tagName the tag name of the DOM element\r\n   * @param attributes a list of attributes of the element\r\n   */\r\n  constructor(tagName: string, attributes: {[name: string]: string});\r\n  /**\r\n   * Selects all elements from the DOM that match the specified selector.\r\n   * @param selector the selector to match DOM elements with\r\n   */\r\n  constructor(selector: string);\r\n  /**\r\n   * Wraps a plain HTMLElement with a DOM instance.\r\n   * @param element the HTMLElement to wrap with DOM\r\n   */\r\n  constructor(element: HTMLElement);\r\n  /**\r\n   * Wraps a list of plain HTMLElements with a DOM instance.\r\n   * @param elements the HTMLElements to wrap with DOM\r\n   */\r\n  constructor(elements: HTMLElement[]);\r\n  /**\r\n   * Wraps the document with a DOM instance. Useful to attach event listeners to the document.\r\n   * @param document the document to wrap\r\n   */\r\n  constructor(document: Document);\r\n  constructor(something: string | HTMLElement | HTMLElement[] | Document, attributes?: {[name: string]: string}) {\r\n    this.document = document; // Set the global document to the local document field\r\n\r\n    if (something instanceof Array) {\r\n      if (something.length > 0 && something[0] instanceof HTMLElement) {\r\n        let elements = something;\r\n        this.elements = elements;\r\n      }\r\n    }\r\n    else if (something instanceof HTMLElement) {\r\n      let element = something;\r\n      this.elements = [element];\r\n    }\r\n    else if (something instanceof Document) {\r\n      // When a document is passed in, we do not do anything with it, but by setting this.elements to null\r\n      // we give the event handling method a means to detect if the events should be registered on the document\r\n      // instead of elements.\r\n      this.elements = null;\r\n    }\r\n    else if (attributes) {\r\n      let tagName = something;\r\n      let element = document.createElement(tagName);\r\n\r\n      for (let attributeName in attributes) {\r\n        let attributeValue = attributes[attributeName];\r\n        if (attributeValue != null) {\r\n          element.setAttribute(attributeName, attributeValue);\r\n        }\r\n      }\r\n\r\n      this.elements = [element];\r\n    }\r\n    else {\r\n      let selector = something;\r\n      this.elements = this.findChildElements(selector);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the number of elements that this DOM instance currently holds.\r\n   * @returns {number} the number of elements\r\n   */\r\n  get length(): number {\r\n    return this.elements ? this.elements.length : 0;\r\n  }\r\n\r\n  /**\r\n   * Gets the HTML elements that this DOM instance currently holds.\r\n   * @returns {HTMLElement[]} the raw HTML elements\r\n   */\r\n  get(): HTMLElement[];\r\n  /**\r\n   * Gets an HTML element from the list elements that this DOM instance currently holds.\r\n   * @param index The zero-based index into the element list. Can be negative to return an element from the end,\r\n   *    e.g. -1 returns the last element.\r\n   */\r\n  get(index: number): HTMLElement;\r\n  get(index?: number): HTMLElement | HTMLElement[] {\r\n    if (index === undefined) {\r\n      return this.elements;\r\n    } else if (!this.elements || index >= this.elements.length || index < -this.elements.length) {\r\n      return undefined;\r\n    } else if (index < 0) {\r\n      return this.elements[this.elements.length - index];\r\n    } else {\r\n      return this.elements[index];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A shortcut method for iterating all elements. Shorts this.elements.forEach(...) to this.forEach(...).\r\n   * @param handler the handler to execute an operation on an element\r\n   */\r\n  private forEach(handler: (element: HTMLElement) => void): void {\r\n    if (!this.elements) {\r\n      return;\r\n    }\r\n    this.elements.forEach((element) => {\r\n      handler(element);\r\n    });\r\n  }\r\n\r\n  private findChildElementsOfElement(element: HTMLElement | Document, selector: string): HTMLElement[] {\r\n    let childElements = element.querySelectorAll(selector);\r\n\r\n    // Convert NodeList to Array\r\n    // https://toddmotto.com/a-comprehensive-dive-into-nodelists-arrays-converting-nodelists-and-understanding-the-dom/\r\n    return [].slice.call(childElements);\r\n  }\r\n\r\n  private findChildElements(selector: string): HTMLElement[] {\r\n    let allChildElements = <HTMLElement[]>[];\r\n\r\n    if (this.elements) {\r\n      this.forEach((element) => {\r\n        allChildElements = allChildElements.concat(this.findChildElementsOfElement(element, selector));\r\n      });\r\n    }\r\n    else {\r\n      return this.findChildElementsOfElement(document, selector);\r\n    }\r\n\r\n    return allChildElements;\r\n  }\r\n\r\n  /**\r\n   * Finds all child elements of all elements matching the supplied selector.\r\n   * @param selector the selector to match with child elements\r\n   * @returns {DOM} a new DOM instance representing all matched children\r\n   */\r\n  find(selector: string): DOM {\r\n    let allChildElements = this.findChildElements(selector);\r\n    return new DOM(allChildElements);\r\n  }\r\n\r\n  /**\r\n   * Focuses to the first input element\r\n   */\r\n  focusToFirstInput() {\r\n    const inputElements = this.findChildElements('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\r\n\r\n    if (inputElements.length > 0) {\r\n      inputElements[0].focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focuses to the first input element\r\n   */\r\n  scrollTo(x: number, y: number) {\r\n    this.elements[0].scrollTo(x, y);\r\n  }\r\n\r\n  /**\r\n   * Returns a string of the inner HTML content of the first element.\r\n   */\r\n  html(): string;\r\n  /**\r\n   * Sets the inner HTML content of all elements.\r\n   * @param content a string of plain text or HTML markup\r\n   */\r\n  html(content: string): DOM;\r\n  html(content?: string): string | DOM {\r\n    if (arguments.length > 0) {\r\n      return this.setHtml(content);\r\n    }\r\n    else {\r\n      return this.getHtml();\r\n    }\r\n  }\r\n\r\n  private getHtml(): string | null {\r\n    return this.elements[0].innerHTML;\r\n  }\r\n\r\n  private setHtml(content: string): DOM {\r\n    if (content === undefined || content == null) {\r\n      // Set to empty string to avoid innerHTML getting set to 'undefined' (all browsers) or 'null' (IE9)\r\n      content = '';\r\n    }\r\n\r\n    this.forEach((element) => {\r\n      element.innerHTML = content;\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Clears the inner HTML of all elements (deletes all children).\r\n   * @returns {DOM}\r\n   */\r\n  empty(): DOM {\r\n    this.forEach((element) => {\r\n      element.innerHTML = '';\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the current value of the first form element, e.g. the selected value of a select box or the text if an\r\n   * input field.\r\n   * @returns {string} the value of a form element\r\n   */\r\n  val(): string {\r\n    let element = this.elements[0];\r\n\r\n    if (element instanceof HTMLSelectElement || element instanceof HTMLInputElement) {\r\n      return element.value;\r\n    }\r\n    else {\r\n      // TODO add support for missing form elements\r\n      throw new Error(`val() not supported for ${typeof element}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the value of an attribute on the first element.\r\n   * @param attribute\r\n   */\r\n  attr(attribute: string): string | null;\r\n  /**\r\n   * Sets an attribute on all elements.\r\n   * @param attribute the name of the attribute\r\n   * @param value the value of the attribute\r\n   */\r\n  attr(attribute: string, value: string): DOM;\r\n  attr(attribute: string, value?: string): string | null | DOM {\r\n    if (arguments.length > 1) {\r\n      return this.setAttr(attribute, value);\r\n    }\r\n    else {\r\n      return this.getAttr(attribute);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the attribute of the element.\r\n   * @param attribute\r\n   */\r\n  removeAttr(attribute: string) {\r\n    this.forEach((element) => {\r\n      element.removeAttribute(attribute);\r\n    });\r\n  }\r\n\r\n  private getAttr(attribute: string): string | null {\r\n    return this.elements[0].getAttribute(attribute);\r\n  }\r\n\r\n  private setAttr(attribute: string, value: string): DOM {\r\n    this.forEach((element) => {\r\n      element.setAttribute(attribute, value);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the value of a data element on the first element.\r\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\r\n   */\r\n  data(dataAttribute: string): string | null;\r\n  /**\r\n   * Sets a data attribute on all elements.\r\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\r\n   * @param value the value of the data attribute\r\n   */\r\n  data(dataAttribute: string, value: string): DOM;\r\n  data(dataAttribute: string, value?: string): string | null | DOM {\r\n    if (arguments.length > 1) {\r\n      return this.setData(dataAttribute, value);\r\n    }\r\n    else {\r\n      return this.getData(dataAttribute);\r\n    }\r\n  }\r\n\r\n  private getData(dataAttribute: string): string | null {\r\n    return this.elements[0].getAttribute('data-' + dataAttribute);\r\n  }\r\n\r\n  private setData(dataAttribute: string, value: string): DOM {\r\n    this.forEach((element) => {\r\n      element.setAttribute('data-' + dataAttribute, value);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Appends one or more DOM elements as children to all elements.\r\n   * @param childElements the chrild elements to append\r\n   * @returns {DOM}\r\n   */\r\n  append(...childElements: DOM[]): DOM {\r\n    this.forEach((element) => {\r\n      childElements.forEach((childElement) => {\r\n        childElement.elements.forEach((_, index) => {\r\n          element.appendChild(childElement.elements[index]);\r\n        });\r\n      });\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all elements from the DOM.\r\n   */\r\n  remove(): void {\r\n    this.forEach((element) => {\r\n      let parent = element.parentNode;\r\n      if (parent) {\r\n        parent.removeChild(element);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the offset of the first element from the document's top left corner.\r\n   * @returns {Offset}\r\n   */\r\n  offset(): Offset {\r\n    let element = this.elements[0];\r\n    let elementRect = element.getBoundingClientRect();\r\n    let htmlRect = document.body.parentElement.getBoundingClientRect();\r\n\r\n    // Virtual viewport scroll handling (e.g. pinch zoomed viewports in mobile browsers or desktop Chrome/Edge)\r\n    // 'normal' zooms and virtual viewport zooms (aka layout viewport) result in different\r\n    // element.getBoundingClientRect() results:\r\n    //  - with normal scrolls, the clientRect decreases with an increase in scroll(Top|Left)/page(X|Y)Offset\r\n    //  - with pinch zoom scrolls, the clientRect stays the same while scroll/pageOffset changes\r\n    // This means, that the combination of clientRect + scroll/pageOffset does not work to calculate the offset\r\n    // from the document's upper left origin when pinch zoom is used.\r\n    // To work around this issue, we do not use scroll/pageOffset but get the clientRect of the html element and\r\n    // subtract it from the element's rect, which always results in the offset from the document origin.\r\n    // NOTE: the current way of offset calculation was implemented specifically to track event positions on the\r\n    // seek bar, and it might break compatibility with jQuery's offset() method. If this ever turns out to be a\r\n    // problem, this method should be reverted to the old version and the offset calculation moved to the seek bar.\r\n\r\n    return {\r\n      top: elementRect.top - htmlRect.top,\r\n      left: elementRect.left - htmlRect.left,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the first element.\r\n   * @returns {number} the width of the first element\r\n   */\r\n  width(): number {\r\n    // TODO check if this is the same as jQuery's width() (probably not)\r\n    return this.elements[0].offsetWidth;\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the first element.\r\n   * @returns {number} the height of the first element\r\n   */\r\n  height(): number {\r\n    // TODO check if this is the same as jQuery's height() (probably not)\r\n    return this.elements[0].offsetHeight;\r\n  }\r\n\r\n  /**\r\n   * Returns the size of the first element.\r\n   * @return {Size} the size of the first element\r\n   */\r\n  size(): Size {\r\n    return { width: this.width(), height: this.height() };\r\n  }\r\n\r\n  /**\r\n   * Attaches an event handler to one or more events on all elements.\r\n   * @param eventName the event name (or multiple names separated by space) to listen to\r\n   * @param eventHandler the event handler to call when the event fires\r\n   * @returns {DOM}\r\n   */\r\n  on(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\r\n    let events = eventName.split(' ');\r\n\r\n    events.forEach((event) => {\r\n      if (this.elements == null) {\r\n        this.document.addEventListener(event, eventHandler);\r\n      }\r\n      else {\r\n        this.forEach((element) => {\r\n          element.addEventListener(event, eventHandler);\r\n        });\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes an event handler from one or more events on all elements.\r\n   * @param eventName the event name (or multiple names separated by space) to remove the handler from\r\n   * @param eventHandler the event handler to remove\r\n   * @returns {DOM}\r\n   */\r\n  off(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\r\n    let events = eventName.split(' ');\r\n\r\n    events.forEach((event) => {\r\n      if (this.elements == null) {\r\n        this.document.removeEventListener(event, eventHandler);\r\n      }\r\n      else {\r\n        this.forEach((element) => {\r\n          element.removeEventListener(event, eventHandler);\r\n        });\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds the specified class(es) to all elements.\r\n   * @param className the class(es) to add, multiple classes separated by space\r\n   * @returns {DOM}\r\n   */\r\n  addClass(className: string): DOM {\r\n    this.forEach((element) => {\r\n      if (element.classList) {\r\n        const classNames = className.split(' ')\r\n          .filter(className => className.length > 0);\r\n\r\n        if (classNames.length > 0) {\r\n          element.classList.add(...classNames);\r\n        }\r\n      }\r\n      else {\r\n        element.className += ' ' + className;\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removed the specified class(es) from all elements.\r\n   * @param className the class(es) to remove, multiple classes separated by space\r\n   * @returns {DOM}\r\n   */\r\n  removeClass(className: string): DOM {\r\n    this.forEach((element) => {\r\n      if (element.classList) {\r\n        const classNames = className.split(' ')\r\n          .filter(className => className.length > 0);\r\n\r\n        if (classNames.length > 0) {\r\n          element.classList.remove(...classNames);\r\n        }\r\n      }\r\n      else {\r\n        element.className = element.className.replace(\r\n          new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Checks if any of the elements has the specified class.\r\n   * @param className the class name to check\r\n   * @returns {boolean} true if one of the elements has the class attached, else if no element has it attached\r\n   */\r\n  hasClass(className: string): boolean {\r\n    let hasClass = false;\r\n\r\n    this.forEach((element) => {\r\n      if (element.classList) {\r\n        if (element.classList.contains(className)) {\r\n          // Since we are inside a handler, we can't just 'return true'. Instead, we save it to a variable\r\n          // and return it at the end of the function body.\r\n          hasClass = true;\r\n        }\r\n      }\r\n      else {\r\n        if (new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)) {\r\n          // See comment above\r\n          hasClass = true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return hasClass;\r\n  }\r\n\r\n  /**\r\n   * Returns the value of a CSS property of the first element.\r\n   * @param propertyName the name of the CSS property to retrieve the value of\r\n   */\r\n  css(propertyName: string): string | null;\r\n  /**\r\n   * Sets the value of a CSS property on all elements.\r\n   * @param propertyName the name of the CSS property to set the value for\r\n   * @param value the value to set for the given CSS property\r\n   */\r\n  css(propertyName: string, value: string): DOM;\r\n  /**\r\n   * Sets a collection of CSS properties and their values on all elements.\r\n   * @param propertyValueCollection an object containing pairs of property names and their values\r\n   */\r\n  css(propertyValueCollection: CssProperties): DOM;\r\n  css(propertyNameOrCollection: string | CssProperties, value?: string): string | null | DOM {\r\n    if (typeof propertyNameOrCollection === 'string') {\r\n      let propertyName = propertyNameOrCollection;\r\n\r\n      if (arguments.length === 2) {\r\n        return this.setCss(propertyName, value);\r\n      }\r\n      else {\r\n        return this.getCss(propertyName);\r\n      }\r\n    }\r\n    else {\r\n      let propertyValueCollection = propertyNameOrCollection;\r\n      return this.setCssCollection(propertyValueCollection);\r\n    }\r\n  }\r\n\r\n  private getCss(propertyName: string): string | null {\r\n    return getComputedStyle(this.elements[0])[<any>propertyName];\r\n  }\r\n\r\n  private setCss(propertyName: string, value: string): DOM {\r\n    this.forEach((element) => {\r\n      // <any> cast to resolve TS7015: http://stackoverflow.com/a/36627114/370252\r\n      element.style[<any>propertyName] = value;\r\n    });\r\n    return this;\r\n  }\r\n\r\n  private setCssCollection(ruleValueCollection: {[ruleName: string]: string}): DOM {\r\n    this.forEach((element) => {\r\n      // http://stackoverflow.com/a/34490573/370252\r\n      Object.assign(element.style, ruleValueCollection);\r\n    });\r\n\r\n    return this;\r\n  }\r\n}\r\n","import {ErrorMessageMap, ErrorMessageTranslator} from './components/errormessageoverlay';\r\nimport { ErrorEvent } from 'bitmovin-player';\r\nimport { MobileV3PlayerErrorEvent, MobileV3SourceErrorEvent } from './mobilev3playerapi';\r\n\r\nexport namespace ErrorUtils {\r\n\r\n  export const defaultErrorMessages: ErrorMessageMap = {\r\n    1000: 'Error is unknown',\r\n    1001: 'The player API is not available after a call to PlayerAPI.destroy.',\r\n    1100: 'General setup error',\r\n    1101: 'There was an error when inserting the HTML video element',\r\n    1102: 'No configuration was provided',\r\n    1103: 'The license is not valid',\r\n    1104: 'The the domain-locked player is not authorized to playback on this domain',\r\n    1105: 'The domain is not allowlisted',\r\n    1106: 'The license server URL is invalid',\r\n    1107: 'The impression server URL is invalid',\r\n    1108: 'Could not initialize a rendering engine',\r\n    1109: 'The used flash version does not support playback',\r\n    1110: 'Native Flash is not authorized by a valid Adobe token',\r\n    1111: 'Flash doesn\\'t have sufficient resources',\r\n    1112: 'Flash container API not available',\r\n    1113: 'Protocol not supported. This site has been loaded using \"file\" protocol, but unfortunately this is not supported. Please load the page using a web server (using http or https)',\r\n    1200: 'General source error',\r\n    1201: 'No valid source was provided',\r\n    1202: 'The downloaded manifest is invalid',\r\n    1203: 'There was no technology detected to playback the provided source',\r\n    1204: 'The stream type is not supported',\r\n    1205: 'The forced technology is not supported',\r\n    1206: 'No stream found for supported technologies.',\r\n    1207: 'The downloaded segment is empty',\r\n    1208: 'The manifest could not be loaded',\r\n    1209: 'Progressive stream type not supported or the stream has an error',\r\n    1210: 'HLS stream has an error',\r\n    1211: 'The encryption method is not supported',\r\n    1300: 'General playback error',\r\n    1301: 'Video decoder or demuxer had an error with the content',\r\n    1302: 'General error if Flash renderer has an error',\r\n    1303: 'Flash doesn\\'t have sufficient resources',\r\n    1304: 'The transmuxer could not be initialized',\r\n    1400: 'Network error while downloading',\r\n    1401: 'The manifest download timed out',\r\n    1402: 'The segment download timed out',\r\n    1403: 'The progressive stream download timed out',\r\n    1404: 'The Certificate could not be loaded',\r\n    2000: 'General DRM error',\r\n    2001: 'Required DRM configuration is missing',\r\n    2002: 'The licensing server URL is missing',\r\n    2003: 'License request failed',\r\n    2004: 'Key or KeyId is missing',\r\n    2005: 'Key size is not supported',\r\n    2006: 'Unable to instantiate a key system supporting the required combinations',\r\n    2007: 'Unable to create or initialize key session',\r\n    2008: 'The MediaKey object could not be created/initialized',\r\n    2009: 'Key error',\r\n    2010: 'The key system is not supported',\r\n    2011: 'The certificate is not valid',\r\n    2012: 'Invalid header key/value pair for PlayReady license request',\r\n    2013: 'Content cannot be played back because the output is restricted on this machine',\r\n    2014: 'DRM error for the Flash renderer',\r\n    2100: 'General VR error',\r\n    2101: 'Player technology not compatible with VR playback',\r\n    3000: 'General module error',\r\n    3001: 'The definition of the module is invalid (e.g. incomplete).',\r\n    3002: 'The module definition specifies dependencies but the module is not provided via a function for deferred loading.',\r\n    3003: 'A module cannot be loaded because it has not been added to the player core.',\r\n    3004: 'A module cannot be loaded because one or more dependencies are missing.',\r\n    3100: 'An Advertising module error has occurred. Refer to the attached AdvertisingError.',\r\n  };\r\n\r\n  export const defaultMobileV3ErrorMessageTranslator = (error: MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent) => {\r\n    return error.message;\r\n  };\r\n\r\n  export const defaultWebErrorMessageTranslator: ErrorMessageTranslator = (error: ErrorEvent) => {\r\n    const errorMessage = ErrorUtils.defaultErrorMessages[error.code];\r\n\r\n    if (errorMessage) {\r\n      // Use the error message text if there is one\r\n      return `${errorMessage}\\n(${error.name})`; // default error message style\r\n    } else {\r\n      // Fallback to error code/name if no message is defined\r\n      return `${error.code} ${error.name}`;\r\n    }\r\n  };\r\n}\r\n","import {ArrayUtils} from './arrayutils';\r\nimport { Timeout } from './timeout';\r\n/**\r\n * Function interface for event listeners on the {@link EventDispatcher}.\r\n */\r\nexport interface EventListener<Sender, Args> {\r\n  (sender: Sender, args: Args): void;\r\n}\r\n\r\n/**\r\n * Empty type for creating {@link EventDispatcher event dispatchers} that do not carry any arguments.\r\n */\r\nexport interface NoArgs {\r\n}\r\n\r\n/**\r\n * Event args for an event that can be canceled.\r\n */\r\nexport interface CancelEventArgs extends NoArgs {\r\n  /**\r\n   * Gets or sets a flag whether the event should be canceled.\r\n   */\r\n  cancel?: boolean;\r\n}\r\n\r\n/**\r\n * Public interface that represents an event. Can be used to subscribe to and unsubscribe from events.\r\n */\r\nexport interface Event<Sender, Args> {\r\n  /**\r\n   * Subscribes an event listener to this event dispatcher.\r\n   * @param listener the listener to add\r\n   */\r\n  subscribe(listener: EventListener<Sender, Args>): void;\r\n\r\n  /**\r\n   * Subscribes an event listener to this event dispatcher that is only called once.\r\n   * @param listener the listener to add\r\n   */\r\n  subscribeOnce(listener: EventListener<Sender, Args>): void;\r\n\r\n  /**\r\n   * Subscribes an event listener to this event dispatcher that will be called at a limited rate with a minimum\r\n   * interval of the specified milliseconds.\r\n   * @param listener the listener to add\r\n   * @param rateMs the rate in milliseconds to which calling of the listeners should be limited\r\n   */\r\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number): void;\r\n\r\n  /**\r\n   * Unsubscribes a subscribed event listener from this dispatcher.\r\n   * @param listener the listener to remove\r\n   * @returns {boolean} true if the listener was successfully unsubscribed, false if it isn't subscribed on this\r\n   *   dispatcher\r\n   */\r\n  unsubscribe(listener: EventListener<Sender, Args>): boolean;\r\n}\r\n\r\n/**\r\n * Event dispatcher to subscribe and trigger events. Each event should have its own dispatcher.\r\n */\r\nexport class EventDispatcher<Sender, Args> implements Event<Sender, Args> {\r\n\r\n  private listeners: EventListenerWrapper<Sender, Args>[] = [];\r\n\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  subscribe(listener: EventListener<Sender, Args>) {\r\n    this.listeners.push(new EventListenerWrapper(listener));\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  subscribeOnce(listener: EventListener<Sender, Args>) {\r\n    this.listeners.push(new EventListenerWrapper(listener, true));\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number) {\r\n    this.listeners.push(new RateLimitedEventListenerWrapper(listener, rateMs));\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc}\r\n   */\r\n  unsubscribe(listener: EventListener<Sender, Args>): boolean {\r\n    // Iterate through listeners, compare with parameter, and remove if found\r\n    // NOTE: In case we ever remove all matching listeners instead of just the first, we need to reverse-iterate here\r\n    for (let i = 0; i < this.listeners.length; i++) {\r\n      let subscribedListener = this.listeners[i];\r\n      if (subscribedListener.listener === listener) {\r\n        subscribedListener.clear();\r\n        ArrayUtils.remove(this.listeners, subscribedListener);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Removes all listeners from this dispatcher.\r\n   */\r\n  unsubscribeAll(): void {\r\n    // In case of RateLimitedEventListenerWrapper we need to make sure that the timeout callback won't be called\r\n    for (let listener of this.listeners) {\r\n      listener.clear();\r\n    }\r\n\r\n    this.listeners = [];\r\n  }\r\n\r\n  /**\r\n   * Dispatches an event to all subscribed listeners.\r\n   * @param sender the source of the event\r\n   * @param args the arguments for the event\r\n   */\r\n  dispatch(sender: Sender, args: Args = null) {\r\n    let listenersToRemove = [];\r\n\r\n    // Call every listener\r\n    // We iterate over a copy of the array of listeners to avoid the case where events are not fired on listeners when\r\n    // listeners are unsubscribed from within the event handlers during a dispatch (because the indices change and\r\n    // listeners are shifted within the array).\r\n    // This means that listener x+1 will still be called if unsubscribed from within the handler of listener x, as well\r\n    // as listener y+1 will not be called when subscribed from within the handler of listener y.\r\n    // Array.slice(0) is the fastest array copy method according to: https://stackoverflow.com/a/21514254/370252\r\n    const listeners = this.listeners.slice(0);\r\n    for (let listener of listeners) {\r\n      listener.fire(sender, args);\r\n\r\n      if (listener.isOnce()) {\r\n        listenersToRemove.push(listener);\r\n      }\r\n    }\r\n\r\n    // Remove one-time listener\r\n    for (let listenerToRemove of listenersToRemove) {\r\n      ArrayUtils.remove(this.listeners, listenerToRemove);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the event that this dispatcher manages and on which listeners can subscribe and unsubscribe event handlers.\r\n   * @returns {Event}\r\n   */\r\n  getEvent(): Event<Sender, Args> {\r\n    // For now, just cast the event dispatcher to the event interface. At some point in the future when the\r\n    // codebase grows, it might make sense to split the dispatcher into separate dispatcher and event classes.\r\n    return <Event<Sender, Args>>this;\r\n  }\r\n}\r\n\r\n/**\r\n * A basic event listener wrapper to manage listeners within the {@link EventDispatcher}. This is a 'private' class\r\n * for internal dispatcher use and it is therefore not exported.\r\n */\r\nclass EventListenerWrapper<Sender, Args> {\r\n\r\n  private eventListener: EventListener<Sender, Args>;\r\n  private once: boolean;\r\n\r\n  constructor(listener: EventListener<Sender, Args>, once: boolean = false) {\r\n    this.eventListener = listener;\r\n    this.once = once;\r\n  }\r\n\r\n  /**\r\n   * Returns the wrapped event listener.\r\n   * @returns {EventListener<Sender, Args>}\r\n   */\r\n  get listener(): EventListener<Sender, Args> {\r\n    return this.eventListener;\r\n  }\r\n\r\n  /**\r\n   * Fires the wrapped event listener with the given arguments.\r\n   * @param sender\r\n   * @param args\r\n   */\r\n  fire(sender: Sender, args: Args) {\r\n    this.eventListener(sender, args);\r\n  }\r\n\r\n  /**\r\n   * Checks if this listener is scheduled to be called only once.\r\n   * @returns {boolean} once if true\r\n   */\r\n  isOnce(): boolean {\r\n    return this.once;\r\n  }\r\n\r\n  clear(): void {\r\n  }\r\n}\r\n\r\ninterface EventAttributes<Sender, Args> {\r\n  sender: Sender;\r\n  args: Args;\r\n}\r\n\r\n/**\r\n * Extends the basic {@link EventListenerWrapper} with rate-limiting functionality.\r\n */\r\nclass RateLimitedEventListenerWrapper<Sender, Args> extends EventListenerWrapper<Sender, Args> {\r\n\r\n  private readonly rateMs: number;\r\n  private readonly rateLimitingEventListener: EventListener<Sender, Args>;\r\n\r\n  // save last seen event attributes\r\n  private lastSeenEvent: EventAttributes<Sender, Args>;\r\n\r\n  private rateLimitTimout: Timeout;\r\n\r\n  constructor(listener: EventListener<Sender, Args>, rateMs: number) {\r\n    super(listener); // sets the event listener sink\r\n\r\n    this.rateMs = rateMs;\r\n\r\n    // starting limiting the events to the given value\r\n    const startRateLimiting = () => {\r\n      this.rateLimitTimout.start();\r\n    };\r\n\r\n    // timout for limiting the events\r\n    this.rateLimitTimout = new Timeout(this.rateMs, () => {\r\n      if (this.lastSeenEvent) {\r\n        this.fireSuper(this.lastSeenEvent.sender, this.lastSeenEvent.args);\r\n        startRateLimiting(); // start rateLimiting again to keep rate limit active even after firing the last seen event\r\n        this.lastSeenEvent = null;\r\n      }\r\n    });\r\n\r\n    // In case the events stopping during the rateLimiting we need to track the last seen one and delegate after the\r\n    // rate limiting is finished. This prevents missing the last update due to the rate limit.\r\n    this.rateLimitingEventListener = (sender: Sender, args: Args) => {\r\n      // only fire events if the rateLimiting is not running\r\n      if (this.shouldFireEvent()) {\r\n        this.fireSuper(sender, args);\r\n        startRateLimiting();\r\n        return;\r\n      }\r\n\r\n      this.lastSeenEvent = {\r\n        sender: sender,\r\n        args: args,\r\n      };\r\n    };\r\n  }\r\n\r\n  private shouldFireEvent(): boolean {\r\n    return !this.rateLimitTimout.isActive();\r\n  }\r\n\r\n  private fireSuper(sender: Sender, args: Args) {\r\n    // Fire the actual external event listener\r\n    super.fire(sender, args);\r\n  }\r\n\r\n  fire(sender: Sender, args: Args) {\r\n    // Fire the internal rate-limiting listener instead of the external event listener\r\n    this.rateLimitingEventListener(sender, args);\r\n  }\r\n\r\n  clear(): void {\r\n    super.clear();\r\n    this.rateLimitTimout.clear();\r\n  }\r\n}\r\n","const FocusVisibleCssClassName = '{{PREFIX}}-focus-visible';\r\n\r\nexport class FocusVisibilityTracker {\r\n  private readonly eventHandlerMap: { [eventName: string]: EventListenerOrEventListenerObject };\r\n  private lastInteractionWasKeyboard: boolean = true;\r\n\r\n  constructor(private bitmovinUiPrefix: string) {\r\n    this.eventHandlerMap = {\r\n      mousedown: this.onMouseOrPointerOrTouch,\r\n      pointerdown: this.onMouseOrPointerOrTouch,\r\n      touchstart: this.onMouseOrPointerOrTouch,\r\n      keydown: this.onKeyDown,\r\n      focus: this.onFocus,\r\n      blur: this.onBlur,\r\n    };\r\n    this.registerEventListeners();\r\n  }\r\n\r\n  private onKeyDown = (e: KeyboardEvent) => {\r\n    if (e.metaKey || e.altKey || e.ctrlKey) {\r\n      return;\r\n    }\r\n\r\n    this.lastInteractionWasKeyboard = true;\r\n  };\r\n\r\n  private onMouseOrPointerOrTouch = () => (this.lastInteractionWasKeyboard = false);\r\n\r\n  private onFocus = ({ target: element }: FocusEvent) => {\r\n    if (\r\n      this.lastInteractionWasKeyboard &&\r\n      isHtmlElement(element) &&\r\n      isBitmovinUi(element, this.bitmovinUiPrefix) &&\r\n      !element.classList.contains(FocusVisibleCssClassName)\r\n    ) {\r\n      element.classList.add(FocusVisibleCssClassName);\r\n    }\r\n  };\r\n\r\n  private onBlur = ({ target: element }: FocusEvent) => {\r\n    if (isHtmlElement(element)) {\r\n      element.classList.remove(FocusVisibleCssClassName);\r\n    }\r\n  };\r\n\r\n  private registerEventListeners(): void {\r\n    for (const event in this.eventHandlerMap) {\r\n      document.addEventListener(event, this.eventHandlerMap[event], true);\r\n    }\r\n  }\r\n\r\n  private unregisterEventListeners(): void {\r\n    for (const event in this.eventHandlerMap) {\r\n      document.removeEventListener(event, this.eventHandlerMap[event], true);\r\n    }\r\n  }\r\n\r\n  public release(): void {\r\n    this.unregisterEventListeners();\r\n  }\r\n}\r\n\r\nfunction isBitmovinUi(element: Element, bitmovinUiPrefix: string): boolean {\r\n  return element.id.indexOf(bitmovinUiPrefix) === 0;\r\n}\r\n\r\nfunction isHtmlElement(element: unknown): element is HTMLElement & { classList: DOMTokenList } {\r\n  return (\r\n    element instanceof HTMLElement && element.classList instanceof DOMTokenList\r\n  );\r\n}\r\n","export namespace Guid {\r\n\r\n  let guid = 1;\r\n\r\n  export function next() {\r\n    return guid++;\r\n  }\r\n}\r\n","import {DOM} from './dom';\r\n\r\nexport interface ImageLoadedCallback {\r\n  (url: string, width: number, height: number): void;\r\n}\r\n\r\ninterface ImageLoaderState {\r\n  url: string;\r\n  image: DOM;\r\n  loadedCallback: ImageLoadedCallback;\r\n  loaded: boolean;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\n/**\r\n * Tracks the loading state of images.\r\n */\r\nexport class ImageLoader {\r\n\r\n  private state: { [url: string]: ImageLoaderState; } = {};\r\n\r\n  /**\r\n   * Loads an image and call the callback once the image is loaded. If the image is already loaded, the callback\r\n   * is called immediately, else it is called once loading has finished. Calling this method multiple times for the\r\n   * same image while it is loading calls only let callback passed into the last call.\r\n   * @param url The url to the image to load\r\n   * @param loadedCallback The callback that is called when the image is loaded\r\n   */\r\n  load(url: string, loadedCallback: ImageLoadedCallback): void {\r\n    if (!this.state[url]) {\r\n      // When the image was never attempted to be loaded before, we create a state and store it in the state map\r\n      // for later use when the same image is requested to be loaded again.\r\n      let state: ImageLoaderState = {\r\n        url: url,\r\n        image: new DOM('img', {}),\r\n        loadedCallback: loadedCallback,\r\n        loaded: false,\r\n        width: 0,\r\n        height: 0,\r\n      };\r\n      this.state[url] = state;\r\n\r\n      // Listen to the load event, update the state and call the callback once the image is loaded\r\n      state.image.on('load', (e) => {\r\n        state.loaded = true;\r\n        state.width = (<HTMLImageElement>state.image.get(0)).width;\r\n        state.height = (<HTMLImageElement>state.image.get(0)).height;\r\n\r\n        this.callLoadedCallback(state);\r\n      });\r\n\r\n      // Set the image URL to start the loading\r\n      state.image.attr('src', state.url);\r\n    } else {\r\n      // We have a state for the requested image, so it is either already loaded or currently loading\r\n      let state = this.state[url];\r\n\r\n      // We overwrite the callback to make sure that only the callback of the latest call gets executed.\r\n      // Earlier callbacks become invalid once a new load call arrives, and they are not called as long as the image\r\n      // is not loaded.\r\n      state.loadedCallback = loadedCallback;\r\n\r\n      // When the image is already loaded, we directly execute the callback instead of waiting for the load event\r\n      if (state.loaded) {\r\n        this.callLoadedCallback(state);\r\n      }\r\n    }\r\n  }\r\n\r\n  private callLoadedCallback(state: ImageLoaderState): void {\r\n    state.loadedCallback(state.url, state.width, state.height);\r\n  }\r\n}\r\n","import vocabularyDe from './languages/de.json';\r\nimport vocabularyEn from './languages/en.json';\r\nimport { LocalizationConfig } from '../uimanager.js';\r\n\r\nexport const defaultVocabularies: Vocabularies = {\r\n  'en': vocabularyEn,\r\n  'de': vocabularyDe,\r\n};\r\n\r\nconst defaultLocalizationConfig: LocalizationConfig = {\r\n  language: 'en',\r\n  vocabularies: defaultVocabularies,\r\n};\r\n\r\ntype Localizer = () => string;\r\nexport type LocalizableText = string | Localizer;\r\n\r\ninterface Vocabulary {\r\n  'settings.video.quality': string;\r\n  'settings.audio.quality': string;\r\n  'settings.audio.track': string;\r\n  'settings.audio.mute': string;\r\n  'settings.audio.volume': string;\r\n  'settings.subtitles': string;\r\n  'settings.subtitles.font.color': string;\r\n  'settings.subtitles.font.opacity': string;\r\n  'settings.subtitles.background.color': string;\r\n  'settings.subtitles.background.opacity': string;\r\n  'settings.subtitles.font.size': string;\r\n  'settings.subtitles.characterEdge': string;\r\n  'settings.subtitles.characterEdge.raised': string;\r\n  'settings.subtitles.characterEdge.depressed': string;\r\n  'settings.subtitles.characterEdge.uniform': string;\r\n  'settings.subtitles.characterEdge.dropshadowed': string;\r\n  'settings.subtitles.font.family': string;\r\n  'settings.subtitles.font.family.monospacedserif': string;\r\n  'settings.subtitles.font.family.proportionalserif': string;\r\n  'settings.subtitles.font.family.monospacedsansserif': string;\r\n  'settings.subtitles.font.family.proportionalsansserif': string;\r\n  'settings.subtitles.font.family.casual': string;\r\n  'settings.subtitles.font.family.cursive': string;\r\n  'settings.subtitles.font.family.smallcapital': string;\r\n  'settings.subtitles.window.color': string;\r\n  'settings.subtitles.window.opacity': string;\r\n  'play': string;\r\n  'settings.time.hours': string;\r\n  'settings.time.minutes': string;\r\n  'settings.time.seconds': string;\r\n  'colors.white': string;\r\n  'colors.black': string;\r\n  'colors.red': string;\r\n  'colors.green': string;\r\n  'colors.blue': string;\r\n  'colors.cyan': string;\r\n  'colors.yellow': string;\r\n  'colors.magenta': string;\r\n  'percent': string;\r\n  'settings': string;\r\n  'ads.remainingTime': string;\r\n  'pictureInPicture': string;\r\n  'appleAirplay': string;\r\n  'googleCast': string;\r\n  'vr': string;\r\n  'off': string;\r\n  'auto': string;\r\n  'back': string;\r\n  'reset': string;\r\n  'replay': string;\r\n  'normal': string;\r\n  'default': string;\r\n  'open': string;\r\n  'close': string;\r\n  'fullscreen': string;\r\n  'speed': string;\r\n  'playPause': string;\r\n  'live': string;\r\n  'subtitle.example': string;\r\n  'subtitle.select': string;\r\n  'playingOn': string;\r\n  'connectingTo': string;\r\n  'watermarkLink': string;\r\n  'controlBar': string;\r\n  'player': string;\r\n  'seekBar': string;\r\n  'seekBar.value': string;\r\n  'seekBar.timeshift': string;\r\n  'seekBar.durationText': string;\r\n}\r\n\r\nexport type CustomVocabulary<V> = V & Partial<Vocabulary>;\r\n\r\nexport interface Vocabularies {\r\n  [key: string]: CustomVocabulary<Record<string, string>>;\r\n}\r\n\r\nclass I18n {\r\n  private language: string;\r\n  private vocabulary: CustomVocabulary<Record<string, string>>;\r\n\r\n  constructor(config: LocalizationConfig) {\r\n    this.setConfig(config);\r\n  }\r\n\r\n  public setConfig(config: LocalizationConfig) {\r\n    const mergedConfig = { ...defaultLocalizationConfig, ...config };\r\n    const detectBrowserLanguage = mergedConfig.language === 'auto';\r\n    const vocabularies = this.mergeVocabulariesWithDefaultVocabularies(mergedConfig.vocabularies);\r\n    this.initializeLanguage(mergedConfig.language, detectBrowserLanguage, vocabularies);\r\n    this.initializeVocabulary(vocabularies);\r\n  }\r\n\r\n  private static containsLanguage(vocabularies: Vocabularies, language: string) {\r\n    return vocabularies.hasOwnProperty(language);\r\n  }\r\n\r\n  private mergeVocabulariesWithDefaultVocabularies(vocabularies: Vocabularies = {}) {\r\n    const rawVocabularies: Vocabularies = { ...defaultVocabularies, ...vocabularies };\r\n    return Object.keys(rawVocabularies).reduce((mergedVocabularies, language) => {\r\n      let vocabulary = rawVocabularies[language];\r\n      if (I18n.containsLanguage(defaultVocabularies, language) && I18n.containsLanguage(vocabularies, language)) {\r\n        vocabulary = { ...defaultVocabularies[language], ...vocabularies[language] };\r\n      }\r\n      return { ...mergedVocabularies, [language]: vocabulary };\r\n    }, {});\r\n  }\r\n\r\n  private initializeLanguage(\r\n    language: string,\r\n    browserLanguageDetectionEnabled: boolean,\r\n    vocabularies: Vocabularies,\r\n  ) {\r\n    if (browserLanguageDetectionEnabled) {\r\n      const userLanguage = window.navigator.language;\r\n\r\n      if (I18n.containsLanguage(vocabularies, userLanguage)) {\r\n        this.language = userLanguage;\r\n        return;\r\n      }\r\n      const shortenedUserLanguage = userLanguage.slice(0, 2);\r\n      if (I18n.containsLanguage(vocabularies, shortenedUserLanguage)) {\r\n        this.language = shortenedUserLanguage;\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.language = language;\r\n  }\r\n\r\n  private initializeVocabulary(vocabularies: Vocabularies) {\r\n    this.vocabulary = ['en', this.language]\r\n      .reduce((vocab, lang) => ({ ...vocab, ...(vocabularies[lang] || {}) }), {});\r\n  }\r\n\r\n  private replaceVariableWithPlaceholderIfExists(text: string, config: any) {\r\n    const matches = text.match(new RegExp('{[a-zA-Z0-9]+}', 'g'));\r\n    if (matches.length === 0) {\r\n      return text;\r\n    }\r\n\r\n    return matches\r\n      .map((m: string) => ({ match: m, key: m.slice(1, -1) }))\r\n      .reduce((str, { key, match }) => config.hasOwnProperty(key) ? str.replace(match, config[key]) : str, text);\r\n  }\r\n\r\n  public getLocalizer<V extends CustomVocabulary<Record<string, string>> = CustomVocabulary<Record<string, string>>>(\r\n    key: keyof V,\r\n    config?: Record<string, string | number>,\r\n  ): Localizer {\r\n    return () => {\r\n      if (key == null) { // because sometimes we call toDomElement() without configuring the component or setting text...\r\n        return undefined;\r\n      }\r\n      let vocabularyString = this.vocabulary[key as string];\r\n\r\n      if (vocabularyString == null) {\r\n        vocabularyString = key as string;\r\n      }\r\n\r\n      if (config != null) {\r\n        vocabularyString = this.replaceVariableWithPlaceholderIfExists(vocabularyString, config);\r\n      }\r\n\r\n      return vocabularyString;\r\n    };\r\n  }\r\n\r\n  public performLocalization(text: LocalizableText) {\r\n    return typeof text === 'function' ? text() : text;\r\n  }\r\n}\r\n\r\nexport const i18n = new I18n(defaultLocalizationConfig);\r\n","module.exports={\r\n  \"settings.video.quality\": \"Videoqualität\",\r\n  \"settings.audio.quality\": \"Audioqualität\",\r\n  \"settings.audio.track\": \"Audiospur\",\r\n  \"speed\": \"Geschwindigkeit\",\r\n  \"play\": \"Abspielen\",\r\n  \"pause\": \"Pause\",\r\n  \"playPause\": \"Abspielen/Pause\",\r\n  \"open\": \"öffnen\",\r\n  \"close\": \"Schließen\",\r\n  \"settings.audio.mute\": \"Stummschaltung\",\r\n  \"settings.audio.volume\": \"Lautstärke\",\r\n  \"pictureInPicture\": \"Bild im Bild\",\r\n  \"appleAirplay\": \"Apple AirPlay\",\r\n  \"googleCast\": \"Google Cast\",\r\n  \"vr\": \"VR\",\r\n  \"settings\": \"Einstellungen\",\r\n  \"fullscreen\": \"Vollbild\",\r\n  \"off\": \"aus\",\r\n  \"settings.subtitles\": \"Untertitel\",\r\n  \"settings.subtitles.font.size\": \"Größe\",\r\n  \"settings.subtitles.font.family\": \"Schriftart\",\r\n  \"settings.subtitles.font.color\": \"Farbe\",\r\n  \"settings.subtitles.font.opacity\": \"Deckkraft\",\r\n  \"settings.subtitles.characterEdge\": \"Ränder\",\r\n  \"settings.subtitles.background.color\": \"Hintergrundfarbe\",\r\n  \"settings.subtitles.background.opacity\": \"Hintergrunddeckkraft\",\r\n  \"settings.subtitles.window.color\": \"Hintergrundfarbe\",\r\n  \"settings.subtitles.window.opacity\": \"Hintergrunddeckkraft\",\r\n  \"settings.time.hours\": \"Stunden\",\r\n  \"settings.time.minutes\": \"Minuten\",\r\n  \"settings.time.seconds\": \"Sekunden\",\r\n  \"back\": \"Zurück\",\r\n  \"reset\": \"Zurücksetzen\",\r\n  \"replay\": \"Wiederholen\",\r\n  \"ads.remainingTime\": \"Diese Anzeige endet in {remainingTime} Sekunden\",\r\n  \"default\": \"standard\",\r\n  \"colors.white\": \"weiß\",\r\n  \"colors.black\": \"schwarz\",\r\n  \"colors.red\": \"rot\",\r\n  \"colors.green\": \"grün\",\r\n  \"colors.blue\": \"blau\",\r\n  \"colors.yellow\": \"gelb\",\r\n  \"subtitle.example\": \"Beispiel Untertitel\",\r\n  \"subtitle.select\": \"Untertitel auswählen\",\r\n  \"playingOn\": \"Spielt auf <strong>{castDeviceName}</strong>\",\r\n  \"connectingTo\": \"Verbindung mit <strong>{castDeviceName}</strong> wird hergestellt...\",\r\n  \"watermarkLink\": \"Link zum Homepage\",\r\n  \"controlBar\": \"Videoplayer Kontrollen\",\r\n  \"player\": \"Video player\",\r\n  \"seekBar\": \"Video-Timeline\",\r\n  \"seekBar.value\": \"Wert\",\r\n  \"seekBar.timeshift\": \"Timeshift\",\r\n  \"seekBar.durationText\": \"aus\"\r\n}\r\n","module.exports={\r\n  \"settings.video.quality\": \"Video Quality\",\r\n  \"settings.audio.quality\": \"Audio Quality\",\r\n  \"settings.audio.track\": \"Audio Track\",\r\n  \"settings.audio.mute\" : \"Mute\",\r\n  \"settings.audio.volume\" : \"Volume\",\r\n  \"settings.subtitles.window.color\" : \"Window color\",\r\n  \"settings.subtitles.window.opacity\" : \"Window opacity\",\r\n  \"settings.subtitles\" : \"Subtitles\",\r\n  \"settings.subtitles.font.color\" : \"Font color\",\r\n  \"settings.subtitles.font.opacity\" : \"Font opacity\",\r\n  \"settings.subtitles.background.color\" : \"Background color\",\r\n  \"settings.subtitles.background.opacity\": \"Background opacity\",\r\n  \"colors.white\": \"white\",\r\n  \"colors.black\": \"black\",\r\n  \"colors.red\": \"red\",\r\n  \"colors.green\": \"green\",\r\n  \"colors.blue\": \"blue\",\r\n  \"colors.cyan\": \"cyan\",\r\n  \"colors.yellow\": \"yellow\",\r\n  \"colors.magenta\": \"magenta\",\r\n  \"percent\": \"{value}%\",\r\n  \"settings.subtitles.font.size\": \"Font size\",\r\n  \"settings.subtitles.characterEdge\": \"Character edge\",\r\n  \"settings.subtitles.characterEdge.raised\": \"raised\",\r\n  \"settings.subtitles.characterEdge.depressed\": \"depressed\",\r\n  \"settings.subtitles.characterEdge.uniform\": \"uniform\",\r\n  \"settings.subtitles.characterEdge.dropshadowed\": \"drop shadowed\",\r\n  \"settings.subtitles.font.family\": \"Font family\",\r\n  \"settings.subtitles.font.family.monospacedserif\": \"monospaced serif\",\r\n  \"settings.subtitles.font.family.proportionalserif\": \"proportional serif\",\r\n  \"settings.subtitles.font.family.monospacedsansserif\": \"monospaced sans serif\",\r\n  \"settings.subtitles.font.family.proportionalsansserif\": \"proportional sans serif\",\r\n  \"settings.subtitles.font.family.casual\": \"casual\",\r\n  \"settings.subtitles.font.family.cursive\": \"cursive\",\r\n  \"settings.subtitles.font.family.smallcapital\": \"small capital\",\r\n  \"settings.time.hours\": \"Hours\",\r\n  \"settings.time.minutes\": \"Minutes\",\r\n  \"settings.time.seconds\": \"Seconds\",\r\n  \"ads.remainingTime\": \"This ad will end in {remainingTime} seconds.\",\r\n  \"settings\": \"Settings\",\r\n  \"fullscreen\" : \"Fullscreen\",\r\n  \"speed\": \"Speed\",\r\n  \"playPause\" : \"Play/Pause\",\r\n  \"play\": \"Play\",\r\n  \"pause\": \"Pause\",\r\n  \"open\": \"open\",\r\n  \"close\": \"Close\",\r\n  \"pictureInPicture\": \"Picture-in-Picture\",\r\n  \"appleAirplay\" : \"Apple AirPlay\",\r\n  \"googleCast\": \"Google Cast\",\r\n  \"vr\" : \"VR\",\r\n  \"off\": \"off\",\r\n  \"auto\": \"auto\",\r\n  \"back\" : \"Back\",\r\n  \"reset\": \"Reset\",\r\n  \"replay\": \"Replay\",\r\n  \"normal\": \"normal\",\r\n  \"default\": \"default\",\r\n  \"live\": \"Live\",\r\n  \"subtitle.example\": \"example subtitle\",\r\n  \"subtitle.select\": \"Select subtitle\",\r\n  \"playingOn\": \"Playing on <strong>{castDeviceName}</strong>\",\r\n  \"connectingTo\": \"Connecting to <strong>{castDeviceName}</strong>...\",\r\n  \"watermarkLink\": \"Link to Homepage\",\r\n  \"controlBar\": \"Video player controls\",\r\n  \"player\": \"Video player\",\r\n  \"seekBar\": \"Video timeline\",\r\n  \"seekBar.value\": \"Value\",\r\n  \"seekBar.timeshift\": \"Timeshift\",\r\n  \"seekBar.durationText\": \"out of\"\r\n}\r\n","export const version: string = '{{VERSION}}';\r\n// Management\r\nexport { UIManager, UIInstanceManager } from './uimanager';\r\n// Factories\r\nexport { UIFactory } from './uifactory';\r\nexport { DemoFactory } from './demofactory';\r\n// Utils\r\nexport { ArrayUtils } from './arrayutils';\r\nexport { StringUtils } from './stringutils';\r\nexport { PlayerUtils } from './playerutils';\r\nexport { UIUtils } from './uiutils';\r\nexport { BrowserUtils } from './browserutils';\r\nexport { StorageUtils } from './storageutils';\r\nexport { ErrorUtils } from './errorutils';\r\n// Components\r\nexport { Button } from './components/button';\r\nexport { ControlBar } from './components/controlbar';\r\nexport { FullscreenToggleButton } from './components/fullscreentogglebutton';\r\nexport { HugePlaybackToggleButton } from './components/hugeplaybacktogglebutton';\r\nexport { PlaybackTimeLabel, PlaybackTimeLabelMode } from './components/playbacktimelabel';\r\nexport { PlaybackToggleButton } from './components/playbacktogglebutton';\r\nexport { SeekBar } from './components/seekbar';\r\nexport { SelectBox } from './components/selectbox';\r\nexport { ItemSelectionList } from './components/itemselectionlist';\r\nexport { SettingsPanel } from './components/settingspanel';\r\nexport { SettingsToggleButton } from './components/settingstogglebutton';\r\nexport { ToggleButton } from './components/togglebutton';\r\nexport { VideoQualitySelectBox } from './components/videoqualityselectbox';\r\nexport { VolumeToggleButton } from './components/volumetogglebutton';\r\nexport { VRToggleButton } from './components/vrtogglebutton';\r\nexport { Watermark } from './components/watermark';\r\nexport { UIContainer } from './components/uicontainer';\r\nexport { Container } from './components/container';\r\nexport { Label } from './components/label';\r\nexport { AudioQualitySelectBox } from './components/audioqualityselectbox';\r\nexport { AudioTrackSelectBox } from './components/audiotrackselectbox';\r\nexport { CastStatusOverlay } from './components/caststatusoverlay';\r\nexport { CastToggleButton } from './components/casttogglebutton';\r\nexport { Component } from './components/component';\r\nexport { ErrorMessageOverlay } from './components/errormessageoverlay';\r\nexport { RecommendationOverlay } from './components/recommendationoverlay';\r\nexport { SeekBarLabel } from './components/seekbarlabel';\r\nexport { SubtitleOverlay } from './components/subtitleoverlay';\r\nexport { SubtitleSelectBox } from './components/subtitleselectbox';\r\nexport { TitleBar } from './components/titlebar';\r\nexport { VolumeControlButton } from './components/volumecontrolbutton';\r\nexport { ClickOverlay } from './components/clickoverlay';\r\nexport { AdSkipButton } from './components/adskipbutton';\r\nexport { AdMessageLabel } from './components/admessagelabel';\r\nexport { AdClickOverlay } from './components/adclickoverlay';\r\nexport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\r\nexport { HugeReplayButton } from './components/hugereplaybutton';\r\nexport { BufferingOverlay } from './components/bufferingoverlay';\r\nexport { CastUIContainer } from './components/castuicontainer';\r\nexport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\r\nexport { CloseButton } from './components/closebutton';\r\nexport { MetadataLabel, MetadataLabelContent } from './components/metadatalabel';\r\nexport { AirPlayToggleButton } from './components/airplaytogglebutton';\r\nexport { VolumeSlider } from './components/volumeslider';\r\nexport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\r\nexport { Spacer } from './components/spacer';\r\nexport { BackgroundColorSelectBox } from './components/subtitlesettings/backgroundcolorselectbox';\r\nexport { BackgroundOpacitySelectBox } from './components/subtitlesettings/backgroundopacityselectbox';\r\nexport { CharacterEdgeSelectBox } from './components/subtitlesettings/characteredgeselectbox';\r\nexport { FontColorSelectBox } from './components/subtitlesettings/fontcolorselectbox';\r\nexport { FontFamilySelectBox } from './components/subtitlesettings/fontfamilyselectbox';\r\nexport { FontOpacitySelectBox } from './components/subtitlesettings/fontopacityselectbox';\r\nexport { FontSizeSelectBox } from './components/subtitlesettings/fontsizeselectbox';\r\nexport { SubtitleSettingSelectBox } from './components/subtitlesettings/subtitlesettingselectbox';\r\nexport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\r\nexport { WindowColorSelectBox } from './components/subtitlesettings/windowcolorselectbox';\r\nexport { WindowOpacitySelectBox } from './components/subtitlesettings/windowopacityselectbox';\r\nexport { SubtitleSettingsResetButton } from './components/subtitlesettings/subtitlesettingsresetbutton';\r\nexport { ListBox } from './components/listbox';\r\nexport { SubtitleListBox } from './components/subtitlelistbox';\r\nexport { AudioTrackListBox } from './components/audiotracklistbox';\r\nexport { SettingsPanelPage } from './components/settingspanelpage';\r\nexport { SettingsPanelPageBackButton } from './components/settingspanelpagebackbutton';\r\nexport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\r\nexport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\r\nexport { SettingsPanelItem } from './components/settingspanelitem';\r\n\r\n// Object.assign polyfill for ES5/IE9\r\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\nif (typeof Object.assign !== 'function') {\r\n  Object.assign = function(target: any) {\r\n    'use strict';\r\n    if (target == null) {\r\n      throw new TypeError('Cannot convert undefined or null to object');\r\n    }\r\n\r\n    target = Object(target);\r\n    for (let index = 1; index < arguments.length; index++) {\r\n      let source = arguments[index];\r\n      if (source != null) {\r\n        for (let key in source) {\r\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n            target[key] = source[key];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return target;\r\n  };\r\n}","import { PlayerAPI, PlayerEvent, PlayerEventBase, PlayerEventCallback } from 'bitmovin-player';\r\nimport { WrappedPlayer } from './uimanager';\r\n\r\nexport enum MobileV3PlayerEvent {\r\n  SourceError = 'sourceerror',\r\n  PlayerError = 'playererror',\r\n  PlaylistTransition = 'playlisttransition',\r\n}\r\n\r\nexport interface MobileV3PlayerErrorEvent extends PlayerEventBase {\r\n  code: number;\r\n  message: string;\r\n}\r\n\r\nexport interface MobileV3SourceErrorEvent extends PlayerEventBase {\r\n  code: number;\r\n  message: string;\r\n}\r\n\r\nexport type MobileV3PlayerEventType = PlayerEvent | MobileV3PlayerEvent;\r\n\r\nexport interface MobileV3PlayerAPI extends PlayerAPI {\r\n  on(eventType: MobileV3PlayerEventType, callback: PlayerEventCallback): void;\r\n  exports: PlayerAPI['exports'] & { PlayerEvent: MobileV3PlayerEventType };\r\n}\r\n\r\nexport function isMobileV3PlayerAPI(player: WrappedPlayer | PlayerAPI | MobileV3PlayerAPI): player is MobileV3PlayerAPI {\r\n  for (const key in MobileV3PlayerEvent) {\r\n    if (MobileV3PlayerEvent.hasOwnProperty(key) && !player.exports.PlayerEvent.hasOwnProperty(key)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n","import {Event, EventDispatcher, NoArgs} from './eventdispatcher';\r\nimport {BrowserUtils} from './browserutils';\r\nimport { UIInstanceManager } from './uimanager';\r\nimport { PlayerAPI, TimeRange } from 'bitmovin-player';\r\n\r\nexport namespace PlayerUtils {\r\n\r\n  export enum PlayerState {\r\n    Idle,\r\n    Prepared,\r\n    Playing,\r\n    Paused,\r\n    Finished,\r\n  }\r\n\r\n  export function isTimeShiftAvailable(player: PlayerAPI): boolean {\r\n    return player.isLive() && player.getMaxTimeShift() !== 0;\r\n  }\r\n\r\n  export function getState(player: PlayerAPI): PlayerState {\r\n    if (player.hasEnded()) {\r\n      return PlayerState.Finished;\r\n    } else if (player.isPlaying()) {\r\n      return PlayerState.Playing;\r\n    } else if (player.isPaused()) {\r\n      return PlayerState.Paused;\r\n    } else if (player.getSource() != null) {\r\n      return PlayerState.Prepared;\r\n    } else {\r\n      return PlayerState.Idle;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the currentTime - seekableRange.start. This ensures a user-friendly currentTime after a live stream\r\n   * transitioned to VoD.\r\n   * @param player\r\n   */\r\n  export function getCurrentTimeRelativeToSeekableRange(player: PlayerAPI): number {\r\n    const currentTime = player.getCurrentTime();\r\n    if (player.isLive()) {\r\n      return currentTime;\r\n    }\r\n\r\n    const seekableRangeStart = PlayerUtils.getSeekableRangeStart(player, 0);\r\n    return currentTime - seekableRangeStart;\r\n  }\r\n\r\n  /**\r\n   * Returns the start value of the seekable range or the defaultValue if no seekableRange is present.\r\n   * For now this happens only in combination with Mobile SDKs.\r\n   *\r\n   * TODO: remove this function in next major release\r\n   *\r\n   * @param player\r\n   * @param defaultValue\r\n   */\r\n  export function getSeekableRangeStart(player: PlayerAPI, defaultValue: number = 0) {\r\n    return player.getSeekableRange() && player.getSeekableRange().start || defaultValue;\r\n  }\r\n\r\n  /**\r\n   * Calculates player seekable time range for live.\r\n   * As the player returns `{ start: -1, end: -1 }` for live streams we need to calculate the `seekableRange` based on `maxTimeshift`.\r\n   *\r\n   * @param player\r\n   */\r\n  export function getSeekableRangeRespectingLive(player: PlayerAPI): TimeRange {\r\n    if (!player.isLive()) {\r\n      return player.getSeekableRange();\r\n    }\r\n\r\n    const currentTimeshift = -player.getTimeShift();\r\n    const maxTimeshift = -player.getMaxTimeShift();\r\n    const currentTime = player.getCurrentTime();\r\n\r\n    const end = currentTime + (currentTimeshift);\r\n    const start = currentTime - (maxTimeshift - currentTimeshift);\r\n\r\n    return { start, end };\r\n  }\r\n\r\n  export interface TimeShiftAvailabilityChangedArgs extends NoArgs {\r\n    timeShiftAvailable: boolean;\r\n  }\r\n\r\n  export class TimeShiftAvailabilityDetector {\r\n\r\n    private player: PlayerAPI;\r\n    private timeShiftAvailable: boolean;\r\n    private timeShiftAvailabilityChangedEvent = new EventDispatcher<PlayerAPI, TimeShiftAvailabilityChangedArgs>();\r\n\r\n    constructor(player: PlayerAPI) {\r\n      this.player = player;\r\n      this.timeShiftAvailable = undefined;\r\n\r\n      let timeShiftDetector = () => {\r\n        this.detect();\r\n      };\r\n      // Try to detect timeshift availability when source is loaded, which works for DASH streams\r\n      player.on(player.exports.PlayerEvent.SourceLoaded, timeShiftDetector);\r\n      // With HLS/NativePlayer streams, getMaxTimeShift can be 0 before the buffer fills, so we need to additionally\r\n      // check timeshift availability in TimeChanged\r\n      player.on(player.exports.PlayerEvent.TimeChanged, timeShiftDetector);\r\n    }\r\n\r\n    detect(): void {\r\n      if (this.player.isLive()) {\r\n        let timeShiftAvailableNow = PlayerUtils.isTimeShiftAvailable(this.player);\r\n\r\n        // When the availability changes, we fire the event\r\n        if (timeShiftAvailableNow !== this.timeShiftAvailable) {\r\n          this.timeShiftAvailabilityChangedEvent.dispatch(this.player, { timeShiftAvailable: timeShiftAvailableNow });\r\n          this.timeShiftAvailable = timeShiftAvailableNow;\r\n        }\r\n      }\r\n    }\r\n\r\n    get onTimeShiftAvailabilityChanged(): Event<PlayerAPI, TimeShiftAvailabilityChangedArgs> {\r\n      return this.timeShiftAvailabilityChangedEvent.getEvent();\r\n    }\r\n  }\r\n\r\n  export interface LiveStreamDetectorEventArgs extends NoArgs {\r\n    live: boolean;\r\n  }\r\n\r\n  /**\r\n   * Detects changes of the stream type, i.e. changes of the return value of the player#isLive method.\r\n   * Normally, a stream cannot change its type during playback, it's either VOD or live. Due to bugs on some\r\n   * platforms or browsers, it can still change. It is therefore unreliable to just check #isLive and this detector\r\n   * should be used as a workaround instead.\r\n   *\r\n   * Additionally starting with player v8.19.0 we have the use-case that a live stream changes into a vod.\r\n   * The DurationChanged event indicates this switch.\r\n   *\r\n   * Known cases:\r\n   *\r\n   * - HLS VOD on Android 4.3\r\n   * Video duration is initially 'Infinity' and only gets available after playback starts, so streams are wrongly\r\n   * reported as 'live' before playback (the live-check in the player checks for infinite duration).\r\n   *\r\n   * @deprecated since UI v3.9.0 in combination with player v8.19.0 use PlayerEvent.DurationChanged instead\r\n   *\r\n   * TODO: remove this class in next major release\r\n   */\r\n  export class LiveStreamDetector {\r\n\r\n    private player: PlayerAPI;\r\n    private live: boolean;\r\n    private liveChangedEvent = new EventDispatcher<PlayerAPI, LiveStreamDetectorEventArgs>();\r\n    private uimanager: UIInstanceManager;\r\n\r\n    constructor(player: PlayerAPI, uimanager: UIInstanceManager) {\r\n      this.player = player;\r\n      this.uimanager = uimanager;\r\n      this.live = undefined;\r\n\r\n      let liveDetector = () => {\r\n        this.detect();\r\n      };\r\n      this.uimanager.getConfig().events.onUpdated.subscribe(liveDetector);\r\n      // Re-evaluate when playback starts\r\n      player.on(player.exports.PlayerEvent.Play, liveDetector);\r\n\r\n      // HLS live detection workaround for Android:\r\n      // Also re-evaluate during playback, because that is when the live flag might change.\r\n      // (Doing it only in Android Chrome saves unnecessary overhead on other platforms)\r\n      if (BrowserUtils.isAndroid && BrowserUtils.isChrome) {\r\n        player.on(player.exports.PlayerEvent.TimeChanged, liveDetector);\r\n      }\r\n\r\n      // DurationChanged event was introduced with player v8.19.0\r\n      if (player.exports.PlayerEvent.DurationChanged) {\r\n        player.on(player.exports.PlayerEvent.DurationChanged, liveDetector);\r\n      }\r\n\r\n      // Ad video's isLive() might be different than the actual video's isLive().\r\n      player.on(player.exports.PlayerEvent.AdBreakStarted, liveDetector);\r\n      player.on(player.exports.PlayerEvent.AdBreakFinished, liveDetector);\r\n    }\r\n\r\n    detect(): void {\r\n      let liveNow = this.player.isLive();\r\n\r\n      // Compare current to previous live state flag and fire event when it changes. Since we initialize the flag\r\n      // with undefined, there is always at least an initial event fired that tells listeners the live state.\r\n      if (liveNow !== this.live) {\r\n        this.liveChangedEvent.dispatch(this.player, { live: liveNow });\r\n        this.live = liveNow;\r\n      }\r\n    }\r\n\r\n    get onLiveChanged(): Event<PlayerAPI, LiveStreamDetectorEventArgs> {\r\n      return this.liveChangedEvent.getEvent();\r\n    }\r\n  }\r\n}\r\n","export namespace StorageUtils {\r\n  let hasLocalStorageCache: boolean;\r\n\r\n  export function hasLocalStorage(): boolean {\r\n    if (hasLocalStorageCache) {\r\n      return hasLocalStorageCache;\r\n    }\r\n\r\n    // hasLocalStorage is used to safely ensure we can use localStorage\r\n    // taken from https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\r\n    let storage: any = { length: 0 };\r\n    try {\r\n      storage = window['localStorage'];\r\n      let x = '__storage_test__';\r\n      storage.setItem(x, x);\r\n      storage.removeItem(x);\r\n      hasLocalStorageCache = true;\r\n    }\r\n    catch (e) {\r\n      hasLocalStorageCache = e instanceof DOMException && (\r\n          // everything except Firefox\r\n        e.code === 22 ||\r\n        // Firefox\r\n        e.code === 1014 ||\r\n        // test name field too, because code might not be present\r\n        // everything except Firefox\r\n        e.name === 'QuotaExceededError' ||\r\n        // Firefox\r\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n        // acknowledge QuotaExceededError only if there's something already stored\r\n        storage.length !== 0;\r\n    }\r\n    return hasLocalStorageCache;\r\n  }\r\n\r\n  /**\r\n   * Stores a string item into localStorage.\r\n   * @param key the item's key\r\n   * @param data the item's data\r\n   */\r\n  export function setItem(key: string, data: string): void {\r\n    if (StorageUtils.hasLocalStorage()) {\r\n      window.localStorage.setItem(key, data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets an item's string value from the localStorage.\r\n   * @param key the key to look up its associated value\r\n   * @return {string | null} Returns the string if found, null if there is no data stored for the key\r\n   */\r\n  export function getItem(key: string): string | null {\r\n    if (StorageUtils.hasLocalStorage()) {\r\n      return window.localStorage.getItem(key);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stores an object into localStorage. The object will be serialized to JSON. The following types are supported\r\n   * in addition to the default types:\r\n   *  - ColorUtils.Color\r\n   *\r\n   * @param key the key to store the data to\r\n   * @param data the object to store\r\n   */\r\n  export function setObject<T>(key: string, data: T): void {\r\n    if (StorageUtils.hasLocalStorage()) {\r\n      let json = JSON.stringify(data);\r\n      setItem(key, json);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets an object for the given key from localStorage. The object will be deserialized from JSON. Beside the\r\n   * default types, the following types are supported:\r\n   *  - ColorUtils.Color\r\n   *\r\n   * @param key the key to look up its associated object\r\n   * @return {any} Returns the object if found, null otherwise\r\n   */\r\n  export function getObject<T>(key: string): T {\r\n    if (StorageUtils.hasLocalStorage()) {\r\n      let json = getItem(key);\r\n\r\n      if (key) {\r\n        let object = JSON.parse(json);\r\n        return <T>object;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from './localization/i18n';\r\n\r\nexport namespace StringUtils {\r\n\r\n  export let FORMAT_HHMMSS: string = 'hh:mm:ss';\r\n  export let FORMAT_MMSS: string = 'mm:ss';\r\n\r\n  /**\r\n   * Formats a number of seconds into a time string with the pattern hh:mm:ss.\r\n   *\r\n   * @param totalSeconds the total number of seconds to format to string\r\n   * @param format the time format to output (default: hh:mm:ss)\r\n   * @returns {string} the formatted time string\r\n   */\r\n  export function secondsToTime(totalSeconds: number, format: string = FORMAT_HHMMSS): string {\r\n    let isNegative = totalSeconds < 0;\r\n\r\n    if (isNegative) {\r\n      // If the time is negative, we make it positive for the calculation below\r\n      // (else we'd get all negative numbers) and reattach the negative sign later.\r\n      totalSeconds = -totalSeconds;\r\n    }\r\n\r\n    // Split into separate time parts\r\n    let hours = Math.floor(totalSeconds / 3600);\r\n    let minutes = Math.floor(totalSeconds / 60) - hours * 60;\r\n    let seconds = Math.floor(totalSeconds) % 60;\r\n\r\n    return (isNegative ? '-' : '') + format\r\n        .replace('hh', leftPadWithZeros(hours, 2))\r\n        .replace('mm', leftPadWithZeros(minutes, 2))\r\n        .replace('ss', leftPadWithZeros(seconds, 2));\r\n  }\r\n\r\n  export function secondsToText(totalSeconds: number): string {\r\n    const isNegative = totalSeconds < 0;\r\n\r\n    if (isNegative) {\r\n      // If the time is negative, we make it positive for the calculation below\r\n      // (else we'd get all negative numbers) and reattach the negative sign later.\r\n      totalSeconds = -totalSeconds;\r\n    }\r\n\r\n    // Split into separate time parts\r\n    const hours = Math.floor(totalSeconds / 3600);\r\n    const minutes = Math.floor(totalSeconds / 60) - hours * 60;\r\n    const seconds = Math.floor(totalSeconds) % 60;\r\n\r\n    return (isNegative ? '-' : '') +\r\n    (hours !== 0 ? `${leftPadWithZeros(hours, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.hours'))} ` : '') +\r\n    (minutes !== 0 ? `${leftPadWithZeros(minutes, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.minutes'))} ` : '') +\r\n    `${leftPadWithZeros(seconds, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.seconds'))}`;\r\n  }\r\n\r\n  /**\r\n   * Converts a number to a string and left-pads it with zeros to the specified length.\r\n   * Example: leftPadWithZeros(123, 5) => '00123'\r\n   *\r\n   * @param num the number to convert to string and pad with zeros\r\n   * @param length the desired length of the padded string\r\n   * @returns {string} the padded number as string\r\n   */\r\n  function leftPadWithZeros(num: number | string, length: number): string {\r\n    let text = num + '';\r\n    let padding = '0000000000'.substr(0, length - text.length);\r\n    return padding + text;\r\n  }\r\n\r\n  /**\r\n   * Fills out placeholders in an ad message.\r\n   *\r\n   * Has the placeholders '{remainingTime[formatString]}', '{playedTime[formatString]}' and\r\n   * '{adDuration[formatString]}', which are replaced by the remaining time until the ad can be skipped, the current\r\n   * time or the ad duration. The format string is optional. If not specified, the placeholder is replaced by the time\r\n   * in seconds. If specified, it must be of the following format:\r\n   * - %d - Inserts the time as an integer.\r\n   * - %0Nd - Inserts the time as an integer with leading zeroes, if the length of the time string is smaller than N.\r\n   * - %f - Inserts the time as a float.\r\n   * - %0Nf - Inserts the time as a float with leading zeroes.\r\n   * - %.Mf - Inserts the time as a float with M decimal places. Can be combined with %0Nf, e.g. %04.2f (the time\r\n   * 10.123 would be printed as 0010.12).\r\n   * - %hh:mm:ss\r\n   * - %mm:ss\r\n   *\r\n   * Examples:\r\n   * - { text: 'Ad: {remainingTime%mm:ss} secs' }\r\n   * An input value of 100 would be displayed as: 'Ad: 01:40 secs'\r\n   * - { text: 'Ad: {remainingTime%f} secs' }\r\n   * An input value of 100 would be displayed as: 'Ad: 100.0 secs'\r\n   *\r\n   * @param adMessage an ad message with optional placeholders to fill\r\n   * @param skipOffset if specified, {remainingTime} will be filled with the remaining time until the ad can be skipped\r\n   * @param player the player to get the time data from\r\n   * @returns {string} the ad message with filled placeholders\r\n   */\r\n  export function replaceAdMessagePlaceholders(adMessage: string, skipOffset: number, player: PlayerAPI) {\r\n    let adMessagePlaceholderRegex = new RegExp(\r\n      '\\\\{(remainingTime|playedTime|adDuration)(}|%((0[1-9]\\\\d*(\\\\.\\\\d+(d|f)|d|f)|\\\\.\\\\d+f|d|f)|hh:mm:ss|mm:ss)})',\r\n      'g',\r\n    );\r\n\r\n    return adMessage.replace(adMessagePlaceholderRegex, (formatString) => {\r\n      let time = 0;\r\n      if (formatString.indexOf('remainingTime') > -1) {\r\n        if (skipOffset) {\r\n          time = Math.ceil(skipOffset - player.getCurrentTime());\r\n        } else {\r\n          time = player.getDuration() - player.getCurrentTime();\r\n        }\r\n      } else if (formatString.indexOf('playedTime') > -1) {\r\n        time = player.getCurrentTime();\r\n      } else if (formatString.indexOf('adDuration') > -1) {\r\n        time = player.getDuration();\r\n      }\r\n      return formatNumber(Math.round(time), formatString);\r\n    });\r\n  }\r\n\r\n  function formatNumber(time: number, format: string) {\r\n    let formatStringValidationRegex = /%((0[1-9]\\d*(\\.\\d+(d|f)|d|f)|\\.\\d+f|d|f)|hh:mm:ss|mm:ss)/;\r\n    let leadingZeroesRegex = /(%0[1-9]\\d*)(?=(\\.\\d+f|f|d))/;\r\n    let decimalPlacesRegex = /\\.\\d*(?=f)/;\r\n\r\n    if (!formatStringValidationRegex.test(format)) {\r\n      // If the format is invalid, we set a default fallback format\r\n      format = '%d';\r\n    }\r\n\r\n    // Determine the number of leading zeros\r\n    let leadingZeroes = 0;\r\n    let leadingZeroesMatches = format.match(leadingZeroesRegex);\r\n    if (leadingZeroesMatches) {\r\n      leadingZeroes = parseInt(leadingZeroesMatches[0].substring(2));\r\n    }\r\n\r\n    // Determine the number of decimal places\r\n    let numDecimalPlaces = null;\r\n    let decimalPlacesMatches = format.match(decimalPlacesRegex);\r\n    if (decimalPlacesMatches && !isNaN(parseInt(decimalPlacesMatches[0].substring(1)))) {\r\n      numDecimalPlaces = parseInt(decimalPlacesMatches[0].substring(1));\r\n      if (numDecimalPlaces > 20) {\r\n        numDecimalPlaces = 20;\r\n      }\r\n    }\r\n\r\n    // Float format\r\n    if (format.indexOf('f') > -1) {\r\n      let timeString = '';\r\n\r\n      if (numDecimalPlaces !== null) {\r\n        // Apply fixed number of decimal places\r\n        timeString = time.toFixed(numDecimalPlaces);\r\n      } else {\r\n        timeString = '' + time;\r\n      }\r\n\r\n      // Apply leading zeros\r\n      if (timeString.indexOf('.') > -1) {\r\n        return leftPadWithZeros(timeString, timeString.length + (leadingZeroes - timeString.indexOf('.')));\r\n      } else {\r\n        return leftPadWithZeros(timeString, leadingZeroes);\r\n      }\r\n\r\n    }\r\n    // Time format\r\n    else if (format.indexOf(':') > -1) {\r\n      let totalSeconds = Math.ceil(time);\r\n\r\n      // hh:mm:ss format\r\n      if (format.indexOf('hh') > -1) {\r\n        return secondsToTime(totalSeconds);\r\n      }\r\n      // mm:ss format\r\n      else {\r\n        let minutes = Math.floor(totalSeconds / 60);\r\n        let seconds = totalSeconds % 60;\r\n\r\n        return leftPadWithZeros(minutes, 2) + ':' + leftPadWithZeros(seconds, 2);\r\n      }\r\n    }\r\n    // Integer format\r\n    else {\r\n      return leftPadWithZeros(Math.ceil(time), leadingZeroes);\r\n    }\r\n  }\r\n}\r\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\r\nimport { UIInstanceManager } from './uimanager';\r\nimport { PlayerAPI, SubtitleEvent, SubtitleTrack } from 'bitmovin-player';\r\nimport { i18n } from './localization/i18n';\r\n\r\n/**\r\n * Helper class to handle all subtitle related events\r\n *\r\n * This class listens to player events as well as the `ListSelector` event if selection changed\r\n */\r\nexport class SubtitleSwitchHandler {\r\n\r\n  private static SUBTITLES_OFF_KEY: string = 'null';\r\n\r\n  private player: PlayerAPI;\r\n  private listElement: ListSelector<ListSelectorConfig>;\r\n  private uimanager: UIInstanceManager;\r\n\r\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\r\n    this.player = player;\r\n    this.listElement = element;\r\n    this.uimanager = uimanager;\r\n\r\n    this.bindSelectionEvent();\r\n    this.bindPlayerEvents();\r\n    this.refreshSubtitles();\r\n  }\r\n\r\n  private bindSelectionEvent(): void {\r\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\r\n      // TODO add support for multiple concurrent subtitle selections\r\n      if (value === SubtitleSwitchHandler.SUBTITLES_OFF_KEY) {\r\n        const currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\r\n        if (currentSubtitle) {\r\n          this.player.subtitles.disable(currentSubtitle.id);\r\n        }\r\n      } else {\r\n        this.player.subtitles.enable(value, true);\r\n      }\r\n    });\r\n  }\r\n\r\n  private bindPlayerEvents(): void {\r\n    this.player.on(this.player.exports.PlayerEvent.SubtitleAdded, this.addSubtitle);\r\n    this.player.on(this.player.exports.PlayerEvent.SubtitleEnabled, this.selectCurrentSubtitle);\r\n    this.player.on(this.player.exports.PlayerEvent.SubtitleDisabled, this.selectCurrentSubtitle);\r\n    this.player.on(this.player.exports.PlayerEvent.SubtitleRemoved, this.removeSubtitle);\r\n    // Update subtitles when source goes away\r\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.clearSubtitles);\r\n    // Update subtitles when the period within a source changes\r\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshSubtitles);\r\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshSubtitles);\r\n  }\r\n\r\n  private addSubtitle = (event: SubtitleEvent) => {\r\n    const subtitle = event.subtitle;\r\n    if (!this.listElement.hasItem(subtitle.id)) {\r\n      this.listElement.addItem(subtitle.id, subtitle.label);\r\n    }\r\n  };\r\n\r\n  private removeSubtitle = (event: SubtitleEvent) => {\r\n    const subtitle = event.subtitle;\r\n    if (this.listElement.hasItem(subtitle.id)) {\r\n      this.listElement.removeItem(subtitle.id);\r\n    }\r\n  };\r\n\r\n  private selectCurrentSubtitle = () => {\r\n    if (!this.player.subtitles) {\r\n      // Subtitles API not available (yet)\r\n      return;\r\n    }\r\n\r\n    let currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\r\n    this.listElement.selectItem(currentSubtitle ? currentSubtitle.id : SubtitleSwitchHandler.SUBTITLES_OFF_KEY);\r\n  };\r\n\r\n  private clearSubtitles = () => {\r\n    this.listElement.clearItems();\r\n  }\r\n\r\n  private refreshSubtitles = () => {\r\n    if (!this.player.subtitles) {\r\n      // Subtitles API not available (yet)\r\n      return;\r\n    }\r\n\r\n    const offListItem: ListItem = {\r\n      key: SubtitleSwitchHandler.SUBTITLES_OFF_KEY,\r\n      label: i18n.getLocalizer('off'),\r\n    };\r\n\r\n    const subtitles = this.player.subtitles.list();\r\n    const subtitleToListItem = (subtitle: SubtitleTrack): ListItem => {\r\n      return { key: subtitle.id, label: subtitle.label };\r\n    };\r\n\r\n    this.listElement.synchronizeItems([\r\n      offListItem, ...subtitles.map(subtitleToListItem),\r\n    ]);\r\n    this.selectCurrentSubtitle();\r\n  };\r\n}\r\n","// TODO change to internal (not exported) class, how to use in other files?\r\n/**\r\n * Executes a callback after a specified amount of time, optionally repeatedly until stopped.\r\n */\r\nexport class Timeout {\r\n\r\n  private readonly delay: number;\r\n  private readonly callback: () => void;\r\n  private readonly repeat: boolean;\r\n  // There's two setTimeout declarations, one on Window which returns type \"number\" and one in NodeJS which returns\r\n  // type \"Timer\". For unknown reasons builds on Jenkins fail due to a type mismatch when we use type \"number\" here,\r\n  // although it works on other platforms (e.g. Windows, Codeship).\r\n  // To work around the issue we use type \"any\". The type does not matter anyway because we're not working with\r\n  // this value except providing it to clearTimeout.\r\n  private timeoutOrIntervalId: any;\r\n  private active: boolean;\r\n\r\n  /**\r\n   * Creates a new timeout callback handler.\r\n   * @param delay the delay in milliseconds after which the callback should be executed\r\n   * @param callback the callback to execute after the delay time\r\n   * @param repeat if true, call the callback repeatedly in delay intervals\r\n   */\r\n  constructor(delay: number, callback: () => void, repeat: boolean = false) {\r\n    this.delay = delay;\r\n    this.callback = callback;\r\n    this.repeat = repeat;\r\n    this.timeoutOrIntervalId = 0;\r\n    this.active = false;\r\n  }\r\n\r\n  /**\r\n   * Starts the timeout and calls the callback when the timeout delay has passed.\r\n   * @returns {Timeout} the current timeout (so the start call can be chained to the constructor)\r\n   */\r\n  start(): this {\r\n    this.reset();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Clears the timeout. The callback will not be called if clear is called during the timeout.\r\n   */\r\n  clear(): void {\r\n    this.clearInternal();\r\n  }\r\n\r\n  /**\r\n   * Resets the passed timeout delay to zero. Can be used to defer the calling of the callback.\r\n   */\r\n  reset(): void {\r\n    this.clearInternal();\r\n\r\n    if (this.repeat) {\r\n      this.timeoutOrIntervalId = setInterval(this.callback, this.delay);\r\n    } else {\r\n      this.timeoutOrIntervalId = setTimeout(() => {\r\n        this.active = false;\r\n        this.callback();\r\n      }, this.delay);\r\n    }\r\n    this.active = true;\r\n  }\r\n\r\n  isActive(): boolean {\r\n    return this.active;\r\n  }\r\n\r\n  private clearInternal(): void {\r\n    if (this.repeat) {\r\n      clearInterval(this.timeoutOrIntervalId);\r\n    } else {\r\n      clearTimeout(this.timeoutOrIntervalId);\r\n    }\r\n    this.active = false;\r\n  }\r\n}","import { SubtitleOverlay } from './components/subtitleoverlay';\r\nimport { SettingsPanelPage } from './components/settingspanelpage';\r\nimport { SettingsPanelItem } from './components/settingspanelitem';\r\nimport { VideoQualitySelectBox } from './components/videoqualityselectbox';\r\nimport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\r\nimport { AudioTrackSelectBox } from './components/audiotrackselectbox';\r\nimport { AudioQualitySelectBox } from './components/audioqualityselectbox';\r\nimport { SettingsPanel } from './components/settingspanel';\r\nimport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\r\nimport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\r\nimport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\r\nimport { SubtitleSelectBox } from './components/subtitleselectbox';\r\nimport { ControlBar } from './components/controlbar';\r\nimport { Container } from './components/container';\r\nimport { PlaybackTimeLabel, PlaybackTimeLabelMode } from './components/playbacktimelabel';\r\nimport { SeekBar } from './components/seekbar';\r\nimport { SeekBarLabel } from './components/seekbarlabel';\r\nimport { PlaybackToggleButton } from './components/playbacktogglebutton';\r\nimport { VolumeToggleButton } from './components/volumetogglebutton';\r\nimport { VolumeSlider } from './components/volumeslider';\r\nimport { Spacer } from './components/spacer';\r\nimport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\r\nimport { AirPlayToggleButton } from './components/airplaytogglebutton';\r\nimport { CastToggleButton } from './components/casttogglebutton';\r\nimport { VRToggleButton } from './components/vrtogglebutton';\r\nimport { SettingsToggleButton } from './components/settingstogglebutton';\r\nimport { FullscreenToggleButton } from './components/fullscreentogglebutton';\r\nimport { UIContainer } from './components/uicontainer';\r\nimport { BufferingOverlay } from './components/bufferingoverlay';\r\nimport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\r\nimport { CastStatusOverlay } from './components/caststatusoverlay';\r\nimport { TitleBar } from './components/titlebar';\r\nimport { RecommendationOverlay } from './components/recommendationoverlay';\r\nimport { Watermark } from './components/watermark';\r\nimport { ErrorMessageOverlay } from './components/errormessageoverlay';\r\nimport { AdClickOverlay } from './components/adclickoverlay';\r\nimport { AdMessageLabel } from './components/admessagelabel';\r\nimport { AdSkipButton } from './components/adskipbutton';\r\nimport { CloseButton } from './components/closebutton';\r\nimport { MetadataLabel, MetadataLabelContent } from './components/metadatalabel';\r\nimport { PlayerUtils } from './playerutils';\r\nimport { Label } from './components/label';\r\nimport { CastUIContainer } from './components/castuicontainer';\r\nimport { UIConditionContext, UIManager } from './uimanager';\r\nimport { UIConfig } from './uiconfig';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\nimport { i18n } from './localization/i18n';\r\n\r\nexport namespace UIFactory {\r\n\r\n  export function buildDefaultUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\r\n    return UIFactory.buildModernUI(player, config);\r\n  }\r\n\r\n  export function buildDefaultSmallScreenUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\r\n    return UIFactory.buildModernSmallScreenUI(player, config);\r\n  }\r\n\r\n  export function buildDefaultCastReceiverUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\r\n    return UIFactory.buildModernCastReceiverUI(player, config);\r\n  }\r\n\r\n  export function modernUI() {\r\n    let subtitleOverlay = new SubtitleOverlay();\r\n\r\n    let mainSettingsPanelPage = new SettingsPanelPage({\r\n      components: [\r\n        new SettingsPanelItem(i18n.getLocalizer('settings.video.quality'), new VideoQualitySelectBox()),\r\n        new SettingsPanelItem(i18n.getLocalizer('speed'), new PlaybackSpeedSelectBox()),\r\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.track'), new AudioTrackSelectBox()),\r\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.quality'), new AudioQualitySelectBox()),\r\n      ],\r\n    });\r\n\r\n    let settingsPanel = new SettingsPanel({\r\n      components: [\r\n        mainSettingsPanelPage,\r\n      ],\r\n      hidden: true,\r\n    });\r\n\r\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\r\n      settingsPanel: settingsPanel,\r\n      overlay: subtitleOverlay,\r\n    });\r\n\r\n    const subtitleSelectBox = new SubtitleSelectBox();\r\n\r\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\r\n      targetPage: subtitleSettingsPanelPage,\r\n      container: settingsPanel,\r\n      ariaLabel: i18n.getLocalizer('settings.subtitles'),\r\n      text: i18n.getLocalizer('open'),\r\n    });\r\n\r\n    mainSettingsPanelPage.addComponent(\r\n      new SettingsPanelItem(\r\n        new SubtitleSettingsLabel({\r\n          text: i18n.getLocalizer('settings.subtitles'),\r\n          opener: subtitleSettingsOpenButton,\r\n        }),\r\n        subtitleSelectBox,\r\n        {\r\n          role: 'menubar',\r\n        },\r\n      ));\r\n\r\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\r\n\r\n    let controlBar = new ControlBar({\r\n      components: [\r\n        settingsPanel,\r\n        new Container({\r\n          components: [\r\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\r\n            new SeekBar({ label: new SeekBarLabel() }),\r\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\r\n          ],\r\n          cssClasses: ['controlbar-top'],\r\n        }),\r\n        new Container({\r\n          components: [\r\n            new PlaybackToggleButton(),\r\n            new VolumeToggleButton(),\r\n            new VolumeSlider(),\r\n            new Spacer(),\r\n            new PictureInPictureToggleButton(),\r\n            new AirPlayToggleButton(),\r\n            new CastToggleButton(),\r\n            new VRToggleButton(),\r\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\r\n            new FullscreenToggleButton(),\r\n          ],\r\n          cssClasses: ['controlbar-bottom'],\r\n        }),\r\n      ],\r\n    });\r\n\r\n    return new UIContainer({\r\n      components: [\r\n        subtitleOverlay,\r\n        new BufferingOverlay(),\r\n        new PlaybackToggleOverlay(),\r\n        new CastStatusOverlay(),\r\n        controlBar,\r\n        new TitleBar(),\r\n        new RecommendationOverlay(),\r\n        new Watermark(),\r\n        new ErrorMessageOverlay(),\r\n      ],\r\n      hideDelay: 2000,\r\n      hidePlayerStateExceptions: [\r\n        PlayerUtils.PlayerState.Prepared,\r\n        PlayerUtils.PlayerState.Paused,\r\n        PlayerUtils.PlayerState.Finished,\r\n      ],\r\n    });\r\n  }\r\n\r\n  export function modernAdsUI() {\r\n    return new UIContainer({\r\n      components: [\r\n        new BufferingOverlay(),\r\n        new AdClickOverlay(),\r\n        new PlaybackToggleOverlay(),\r\n        new Container({\r\n          components: [\r\n            new AdMessageLabel({ text: i18n.getLocalizer('ads.remainingTime')}),\r\n            new AdSkipButton(),\r\n          ],\r\n          cssClass: 'ui-ads-status',\r\n        }),\r\n        new ControlBar({\r\n          components: [\r\n            new Container({\r\n              components: [\r\n                new PlaybackToggleButton(),\r\n                new VolumeToggleButton(),\r\n                new VolumeSlider(),\r\n                new Spacer(),\r\n                new FullscreenToggleButton(),\r\n              ],\r\n              cssClasses: ['controlbar-bottom'],\r\n            }),\r\n          ],\r\n        }),\r\n      ],\r\n      cssClasses: ['ui-skin-ads'],\r\n      hideDelay: 2000,\r\n      hidePlayerStateExceptions: [\r\n        PlayerUtils.PlayerState.Prepared,\r\n        PlayerUtils.PlayerState.Paused,\r\n        PlayerUtils.PlayerState.Finished,\r\n      ],\r\n    });\r\n  }\r\n\r\n  export function modernSmallScreenUI() {\r\n    let subtitleOverlay = new SubtitleOverlay();\r\n\r\n    let mainSettingsPanelPage = new SettingsPanelPage({\r\n      components: [\r\n        new SettingsPanelItem(i18n.getLocalizer('settings.video.quality'), new VideoQualitySelectBox()),\r\n        new SettingsPanelItem(i18n.getLocalizer('speed'), new PlaybackSpeedSelectBox()),\r\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.track'), new AudioTrackSelectBox()),\r\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.quality'), new AudioQualitySelectBox()),\r\n      ],\r\n    });\r\n\r\n    let settingsPanel = new SettingsPanel({\r\n      components: [\r\n        mainSettingsPanelPage,\r\n      ],\r\n      hidden: true,\r\n      pageTransitionAnimation: false,\r\n      hideDelay: -1,\r\n    });\r\n\r\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\r\n      settingsPanel: settingsPanel,\r\n      overlay: subtitleOverlay,\r\n    });\r\n\r\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\r\n      targetPage: subtitleSettingsPanelPage,\r\n      container: settingsPanel,\r\n      ariaLabel: i18n.getLocalizer('settings.subtitles'),\r\n      text: i18n.getLocalizer('open'),\r\n    });\r\n\r\n    const subtitleSelectBox = new SubtitleSelectBox();\r\n\r\n    mainSettingsPanelPage.addComponent(\r\n      new SettingsPanelItem(\r\n        new SubtitleSettingsLabel({\r\n          text: i18n.getLocalizer('settings.subtitles'),\r\n          opener: subtitleSettingsOpenButton,\r\n        }),\r\n        subtitleSelectBox,\r\n        {\r\n          role: 'menubar',\r\n        },\r\n      ));\r\n\r\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\r\n\r\n    settingsPanel.addComponent(new CloseButton({ target: settingsPanel }));\r\n    subtitleSettingsPanelPage.addComponent(new CloseButton({ target: settingsPanel }));\r\n\r\n    let controlBar = new ControlBar({\r\n      components: [\r\n        new Container({\r\n          components: [\r\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\r\n            new SeekBar({ label: new SeekBarLabel() }),\r\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\r\n          ],\r\n          cssClasses: ['controlbar-top'],\r\n        }),\r\n      ],\r\n    });\r\n\r\n    return new UIContainer({\r\n      components: [\r\n        subtitleOverlay,\r\n        new BufferingOverlay(),\r\n        new CastStatusOverlay(),\r\n        new PlaybackToggleOverlay(),\r\n        new RecommendationOverlay(),\r\n        controlBar,\r\n        new TitleBar({\r\n          components: [\r\n            new MetadataLabel({ content: MetadataLabelContent.Title }),\r\n            new CastToggleButton(),\r\n            new VRToggleButton(),\r\n            new PictureInPictureToggleButton(),\r\n            new AirPlayToggleButton(),\r\n            new VolumeToggleButton(),\r\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\r\n            new FullscreenToggleButton(),\r\n          ],\r\n        }),\r\n        settingsPanel,\r\n        new Watermark(),\r\n        new ErrorMessageOverlay(),\r\n      ],\r\n      cssClasses: ['ui-skin-smallscreen'],\r\n      hideDelay: 2000,\r\n      hidePlayerStateExceptions: [\r\n        PlayerUtils.PlayerState.Prepared,\r\n        PlayerUtils.PlayerState.Paused,\r\n        PlayerUtils.PlayerState.Finished,\r\n      ],\r\n    });\r\n  }\r\n\r\n  export function modernSmallScreenAdsUI() {\r\n    return new UIContainer({\r\n      components: [\r\n        new BufferingOverlay(),\r\n        new AdClickOverlay(),\r\n        new PlaybackToggleOverlay(),\r\n        new TitleBar({\r\n          components: [\r\n            // dummy label with no content to move buttons to the right\r\n            new Label({ cssClass: 'label-metadata-title' }),\r\n            new FullscreenToggleButton(),\r\n          ],\r\n        }),\r\n        new Container({\r\n          components: [\r\n            new AdMessageLabel({ text: 'Ad: {remainingTime} secs' }),\r\n            new AdSkipButton(),\r\n          ],\r\n          cssClass: 'ui-ads-status',\r\n        }),\r\n      ],\r\n      cssClasses: ['ui-skin-ads', 'ui-skin-smallscreen'],\r\n      hideDelay: 2000,\r\n      hidePlayerStateExceptions: [\r\n        PlayerUtils.PlayerState.Prepared,\r\n        PlayerUtils.PlayerState.Paused,\r\n        PlayerUtils.PlayerState.Finished,\r\n      ],\r\n    });\r\n  }\r\n\r\n  export function modernCastReceiverUI() {\r\n    let controlBar = new ControlBar({\r\n      components: [\r\n        new Container({\r\n          components: [\r\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\r\n            new SeekBar({ smoothPlaybackPositionUpdateIntervalMs: -1 }),\r\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\r\n          ],\r\n          cssClasses: ['controlbar-top'],\r\n        }),\r\n      ],\r\n    });\r\n\r\n    return new CastUIContainer({\r\n      components: [\r\n        new SubtitleOverlay(),\r\n        new BufferingOverlay(),\r\n        new PlaybackToggleOverlay(),\r\n        new Watermark(),\r\n        controlBar,\r\n        new TitleBar({ keepHiddenWithoutMetadata: true }),\r\n        new ErrorMessageOverlay(),\r\n      ],\r\n      cssClasses: ['ui-skin-cast-receiver'],\r\n      hideDelay: 2000,\r\n      hidePlayerStateExceptions: [\r\n        PlayerUtils.PlayerState.Prepared,\r\n        PlayerUtils.PlayerState.Paused,\r\n        PlayerUtils.PlayerState.Finished,\r\n      ],\r\n    });\r\n  }\r\n\r\n  export function buildModernUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\r\n    // show smallScreen UI only on mobile/handheld devices\r\n    let smallScreenSwitchWidth = 600;\r\n\r\n    return new UIManager(player, [{\r\n      ui: modernSmallScreenAdsUI(),\r\n      condition: (context: UIConditionContext) => {\r\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth && context.isAd\r\n          && context.adRequiresUi;\r\n      },\r\n    }, {\r\n      ui: modernAdsUI(),\r\n      condition: (context: UIConditionContext) => {\r\n        return context.isAd && context.adRequiresUi;\r\n      },\r\n    }, {\r\n      ui: modernSmallScreenUI(),\r\n      condition: (context: UIConditionContext) => {\r\n        return !context.isAd && !context.adRequiresUi && context.isMobile\r\n          && context.documentWidth < smallScreenSwitchWidth;\r\n      },\r\n    }, {\r\n      ui: modernUI(),\r\n      condition: (context: UIConditionContext) => {\r\n        return !context.isAd && !context.adRequiresUi;\r\n      },\r\n    }], config);\r\n  }\r\n\r\n  export function buildModernSmallScreenUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\r\n    return new UIManager(player, [{\r\n      ui: modernSmallScreenAdsUI(),\r\n      condition: (context: UIConditionContext) => {\r\n        return context.isAd && context.adRequiresUi;\r\n      },\r\n    }, {\r\n      ui: modernSmallScreenUI(),\r\n      condition: (context: UIConditionContext) => {\r\n        return !context.isAd && !context.adRequiresUi;\r\n      },\r\n    }], config);\r\n  }\r\n\r\n  export function buildModernCastReceiverUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\r\n    return new UIManager(player, modernCastReceiverUI(), config);\r\n  }\r\n}\r\n","import {UIContainer} from './components/uicontainer';\r\nimport {DOM} from './dom';\r\nimport {Component, ComponentConfig} from './components/component';\r\nimport {Container} from './components/container';\r\nimport { SeekBar, SeekBarMarker } from './components/seekbar';\r\nimport {NoArgs, EventDispatcher, CancelEventArgs} from './eventdispatcher';\r\nimport {UIUtils} from './uiutils';\r\nimport {ArrayUtils} from './arrayutils';\r\nimport {BrowserUtils} from './browserutils';\r\nimport { TimelineMarker, UIConfig } from './uiconfig';\r\nimport { PlayerAPI, PlayerEventCallback, PlayerEventBase, PlayerEvent, AdEvent, LinearAd } from 'bitmovin-player';\r\nimport { VolumeController } from './volumecontroller';\r\nimport { i18n, CustomVocabulary, Vocabularies } from './localization/i18n';\r\nimport { FocusVisibilityTracker } from './focusvisibilitytracker';\r\nimport { isMobileV3PlayerAPI, MobileV3PlayerAPI, MobileV3PlayerEvent } from './mobilev3playerapi';\r\n\r\nexport interface LocalizationConfig {\r\n  /**\r\n   * Sets the desired language, and falls back to 'en' if there is no vocabulary for the desired language. Setting it\r\n   * to \"auto\" will enable language detection from the browser's locale.\r\n   */\r\n  language?: 'auto' | 'en' | 'de' | string;\r\n  /**\r\n   * A map of `language` to {@link CustomVocabulary} definitions. Can be used to overwrite default translations and add\r\n   * custom strings or additional languages.\r\n   */\r\n  vocabularies?: Vocabularies;\r\n}\r\n\r\nexport interface InternalUIConfig extends UIConfig {\r\n  events: {\r\n    /**\r\n     * Fires when the configuration has been updated/changed.\r\n     */\r\n    onUpdated: EventDispatcher<UIManager, void>;\r\n  };\r\n  volumeController: VolumeController;\r\n}\r\n\r\n/**\r\n * The context that will be passed to a {@link UIConditionResolver} to determine if it's conditions fulfil the context.\r\n */\r\nexport interface UIConditionContext {\r\n  /**\r\n   * Tells if the player is loading or playing an ad.\r\n   */\r\n  isAd: boolean;\r\n  /**\r\n   * Tells if the current ad requires an external UI, if {@link #isAd} is true.\r\n   */\r\n  adRequiresUi: boolean;\r\n  /**\r\n   * Tells if the player is currently in fullscreen mode.\r\n   */\r\n  isFullscreen: boolean;\r\n  /**\r\n   * Tells if the UI is running in a mobile browser.\r\n   */\r\n  isMobile: boolean;\r\n  /**\r\n   * Tells if the player is in playing or paused state.\r\n   */\r\n  isPlaying: boolean;\r\n  /**\r\n   * The width of the player/UI element.\r\n   */\r\n  width: number;\r\n  /**\r\n   * The width of the document where the player/UI is embedded in.\r\n   */\r\n  documentWidth: number;\r\n}\r\n\r\n/**\r\n * Resolves the conditions of its associated UI in a {@link UIVariant} upon a {@link UIConditionContext} and decides\r\n * if the UI should be displayed. If it returns true, the UI is a candidate for display; if it returns false, it will\r\n * not be displayed in the given context.\r\n */\r\nexport interface UIConditionResolver {\r\n  (context: UIConditionContext): boolean;\r\n}\r\n\r\n/**\r\n * Associates a UI instance with an optional {@link UIConditionResolver} that determines if the UI should be displayed.\r\n */\r\nexport interface UIVariant {\r\n  ui: UIContainer;\r\n  condition?: UIConditionResolver;\r\n}\r\n\r\nexport class UIManager {\r\n\r\n  private player: PlayerAPI;\r\n  private uiContainerElement: DOM;\r\n  private uiVariants: UIVariant[];\r\n  private uiInstanceManagers: InternalUIInstanceManager[];\r\n  private currentUi: InternalUIInstanceManager;\r\n  private config: InternalUIConfig; // Conjunction of provided uiConfig and sourceConfig from the player\r\n  private managerPlayerWrapper: PlayerWrapper;\r\n  private focusVisibilityTracker: FocusVisibilityTracker;\r\n\r\n  private events = {\r\n    onUiVariantResolve: new EventDispatcher<UIManager, UIConditionContext>(),\r\n  };\r\n\r\n  /**\r\n   * Creates a UI manager with a single UI variant that will be permanently shown.\r\n   * @param player the associated player of this UI\r\n   * @param ui the UI to add to the player\r\n   * @param uiconfig optional UI configuration\r\n   */\r\n  constructor(player: PlayerAPI, ui: UIContainer, uiconfig?: UIConfig);\r\n  /**\r\n   * Creates a UI manager with a list of UI variants that will be dynamically selected and switched according to\r\n   * the context of the UI.\r\n   *\r\n   * Every time the UI context changes, the conditions of the UI variants will be sequentially resolved and the first\r\n   * UI, whose condition evaluates to true, will be selected and displayed. The last variant in the list might omit the\r\n   * condition resolver and will be selected as default/fallback UI when all other conditions fail. If there is no\r\n   * fallback UI and all conditions fail, no UI will be displayed.\r\n   *\r\n   * @param player the associated player of this UI\r\n   * @param uiVariants a list of UI variants that will be dynamically switched\r\n   * @param uiconfig optional UI configuration\r\n   */\r\n  constructor(player: PlayerAPI, uiVariants: UIVariant[], uiconfig?: UIConfig);\r\n  constructor(player: PlayerAPI, playerUiOrUiVariants: UIContainer | UIVariant[], uiconfig: UIConfig = {}) {\r\n    if (playerUiOrUiVariants instanceof UIContainer) {\r\n      // Single-UI constructor has been called, transform arguments to UIVariant[] signature\r\n      let playerUi = <UIContainer>playerUiOrUiVariants;\r\n      let uiVariants = [];\r\n\r\n      // Add the default player UI\r\n      uiVariants.push({ ui: playerUi });\r\n\r\n      this.uiVariants = uiVariants;\r\n    }\r\n    else {\r\n      // Default constructor (UIVariant[]) has been called\r\n      this.uiVariants = <UIVariant[]>playerUiOrUiVariants;\r\n    }\r\n\r\n    this.player = player;\r\n    this.managerPlayerWrapper = new PlayerWrapper(player);\r\n\r\n    // ensure that at least the metadata object does exist in the uiconfig\r\n    uiconfig.metadata = uiconfig.metadata ? uiconfig.metadata : {};\r\n\r\n    this.config = {\r\n      playbackSpeedSelectionEnabled: true, // Switch on speed selector by default\r\n      autoUiVariantResolve: true, // Switch on auto UI resolving by default\r\n      disableAutoHideWhenHovered: false, // Disable auto hide when UI is hovered\r\n      enableSeekPreview: true,\r\n      ...uiconfig,\r\n      events: {\r\n        onUpdated: new EventDispatcher<UIManager, void>(),\r\n      },\r\n      volumeController: new VolumeController(this.managerPlayerWrapper.getPlayer()),\r\n    };\r\n\r\n    /**\r\n     * Gathers configuration data from the UI config and player source config and creates a merged UI config\r\n     * that is used throughout the UI instance.\r\n     */\r\n    const updateConfig = () => {\r\n      const playerSourceConfig = player.getSource() || {};\r\n      this.config.metadata = JSON.parse(JSON.stringify(uiconfig.metadata || {}));\r\n\r\n      // Extract the UI-related config properties from the source config\r\n      const playerSourceUiConfig: UIConfig = {\r\n        metadata: {\r\n          // TODO move metadata into source.metadata namespace in player v8\r\n          title: playerSourceConfig.title,\r\n          description: playerSourceConfig.description,\r\n          markers: (playerSourceConfig as any).markers,\r\n        },\r\n        recommendations: (playerSourceConfig as any).recommendations,\r\n      };\r\n\r\n      // Player source config takes precedence over the UI config, because the config in the source is attached\r\n      // to a source which changes with every player.load, whereas the UI config stays the same for the whole\r\n      // lifetime of the player instance.\r\n      this.config.metadata.title = playerSourceUiConfig.metadata.title || uiconfig.metadata.title;\r\n      this.config.metadata.description = playerSourceUiConfig.metadata.description || uiconfig.metadata.description;\r\n      this.config.metadata.markers = playerSourceUiConfig.metadata.markers || uiconfig.metadata.markers || [];\r\n      this.config.recommendations = playerSourceUiConfig.recommendations || uiconfig.recommendations || [];\r\n    };\r\n\r\n    updateConfig();\r\n\r\n    // Update the source configuration when a new source is loaded and dispatch onUpdated\r\n    const updateSource = () => {\r\n      updateConfig();\r\n      this.config.events.onUpdated.dispatch(this);\r\n    };\r\n\r\n    const wrappedPlayer = this.managerPlayerWrapper.getPlayer();\r\n\r\n    wrappedPlayer.on(this.player.exports.PlayerEvent.SourceLoaded, updateSource);\r\n\r\n    // The PlaylistTransition event is only available on Mobile v3 for now.\r\n    // This event is fired when a new source becomes active in the player.\r\n    if (isMobileV3PlayerAPI(wrappedPlayer)) {\r\n      wrappedPlayer.on(MobileV3PlayerEvent.PlaylistTransition, updateSource);\r\n    }\r\n\r\n    if (uiconfig.container) {\r\n      // Unfortunately \"uiContainerElement = new DOM(config.container)\" will not accept the container with\r\n      // string|HTMLElement type directly, although it accepts both types, so we need to spit these two cases up here.\r\n      // TODO check in upcoming TS versions if the container can be passed in directly, or fix the constructor\r\n      this.uiContainerElement = uiconfig.container instanceof HTMLElement ?\r\n        new DOM(uiconfig.container) : new DOM(uiconfig.container);\r\n    } else {\r\n      this.uiContainerElement = new DOM(player.getContainer());\r\n    }\r\n\r\n    // Create UI instance managers for the UI variants\r\n    // The instance managers map to the corresponding UI variants by their array index\r\n    this.uiInstanceManagers = [];\r\n    let uiVariantsWithoutCondition = [];\r\n    for (let uiVariant of this.uiVariants) {\r\n      if (uiVariant.condition == null) {\r\n        // Collect variants without conditions for error checking\r\n        uiVariantsWithoutCondition.push(uiVariant);\r\n      }\r\n      // Create the instance manager for a UI variant\r\n      this.uiInstanceManagers.push(new InternalUIInstanceManager(player, uiVariant.ui, this.config));\r\n    }\r\n    // Make sure that there is only one UI variant without a condition\r\n    // It does not make sense to have multiple variants without condition, because only the first one in the list\r\n    // (the one with the lowest index) will ever be selected.\r\n    if (uiVariantsWithoutCondition.length > 1) {\r\n      throw Error('Too many UIs without a condition: You cannot have more than one default UI');\r\n    }\r\n    // Make sure that the default UI variant, if defined, is at the end of the list (last index)\r\n    // If it comes earlier, the variants with conditions that come afterwards will never be selected because the\r\n    // default variant without a condition always evaluates to 'true'\r\n    if (uiVariantsWithoutCondition.length > 0\r\n      && uiVariantsWithoutCondition[0] !== this.uiVariants[this.uiVariants.length - 1]) {\r\n      throw Error('Invalid UI variant order: the default UI (without condition) must be at the end of the list');\r\n    }\r\n\r\n    let adStartedEvent: AdEvent = null; // keep the event stored here during ad playback\r\n\r\n    // Dynamically select a UI variant that matches the current UI condition.\r\n    let resolveUiVariant = (event: PlayerEventBase) => {\r\n      // Make sure that the AdStarted event data is persisted through ad playback in case other events happen\r\n      // in the meantime, e.g. player resize. We need to store this data because there is no other way to find out\r\n      // ad details while an ad is playing (in v8.0 at least; from v8.1 there will be ads.getActiveAd()).\r\n      // Existing event data signals that an ad is currently active (instead of ads.isLinearAdActive()).\r\n      if (event != null) {\r\n        switch (event.type) {\r\n          // The ads UI is shown upon the first AdStarted event. Subsequent AdStarted events within an ad break\r\n          // will not change the condition context and thus not lead to undesired UI variant resolving.\r\n          // The ads UI is shown upon AdStarted instead of AdBreakStarted because there can be a loading delay\r\n          // between these two events in the player, and the AdBreakStarted event does not carry any metadata to\r\n          // initialize the ads UI, so it would be rendered in an uninitialized state for a certain amount of time.\r\n          // TODO show ads UI upon AdBreakStarted and display loading overlay between AdBreakStarted and first AdStarted\r\n          // TODO display loading overlay between AdFinished and next AdStarted\r\n          case player.exports.PlayerEvent.AdStarted:\r\n            adStartedEvent = event as AdEvent;\r\n            break;\r\n          // The ads UI is hidden only when the ad break is finished, i.e. not on AdFinished events. This way we keep\r\n          // the ads UI variant active throughout an ad break, as reacting to AdFinished would lead to undesired UI\r\n          // variant switching between two ads in an ad break, e.g. ads UI -> AdFinished -> content UI ->\r\n          // AdStarted -> ads UI.\r\n          case player.exports.PlayerEvent.AdBreakFinished:\r\n            adStartedEvent = null;\r\n            // When switching to a variant for the first time, a config.events.onUpdated event is fired to trigger a UI\r\n            // update of the new variant, because most components subscribe to this event to update themselves. When\r\n            // switching to the ads UI on the first AdStarted, all UI variants update themselves with the ad data, so\r\n            // when switching back to the \"normal\" UI it will carry properties of the ad instead of the main content.\r\n            // We thus fire this event here to force an UI update with the properties of the main content. This is\r\n            // basically a hack because the config.events.onUpdated event is abused in many places and not just used\r\n            // for config updates (e.g. adding a marker to the seekbar).\r\n            // TODO introduce an event that is fired when the playback content is updated, a switch to/from ads\r\n            this.config.events.onUpdated.dispatch(this);\r\n            break;\r\n          // When a new source is loaded during ad playback, there will be no Ad(Break)Finished event\r\n          case player.exports.PlayerEvent.SourceLoaded:\r\n          case player.exports.PlayerEvent.SourceUnloaded:\r\n            adStartedEvent = null;\r\n            break;\r\n        }\r\n      }\r\n\r\n      // Detect if an ad has started\r\n      let isAd = adStartedEvent != null;\r\n      let adRequiresUi = false;\r\n      if (isAd) {\r\n        let ad = adStartedEvent.ad;\r\n        // for now only linear ads can request a UI\r\n        if (ad.isLinear) {\r\n          let linearAd = ad as LinearAd;\r\n          adRequiresUi = linearAd.uiConfig && linearAd.uiConfig.requestsUi || false;\r\n        }\r\n      }\r\n\r\n      if (adRequiresUi) {\r\n        // we dispatch onUpdated event because if there are multiple adBreaks for same position\r\n        // `Play` and `Playing` events will not be dispatched which will cause `PlaybackButton` state\r\n        // to be out of sync\r\n        this.config.events.onUpdated.dispatch(this);\r\n      }\r\n\r\n      this.resolveUiVariant({\r\n        isAd: isAd,\r\n        adRequiresUi: adRequiresUi,\r\n      }, (context) => {\r\n        // If this is an ad UI, we need to relay the saved ON_AD_STARTED event data so ad components can configure\r\n        // themselves for the current ad.\r\n        if (context.isAd) {\r\n          /* Relay the ON_AD_STARTED event to the ads UI\r\n           *\r\n           * Because the ads UI is initialized in the ON_AD_STARTED handler, i.e. when the ON_AD_STARTED event has\r\n           * already been fired, components in the ads UI that listen for the ON_AD_STARTED event never receive it.\r\n           * Since this can break functionality of components that rely on this event, we relay the event to the\r\n           * ads UI components with the following call.\r\n           */\r\n          this.currentUi.getWrappedPlayer().fireEventInUI(this.player.exports.PlayerEvent.AdStarted, adStartedEvent);\r\n        }\r\n      });\r\n    };\r\n\r\n    // Listen to the following events to trigger UI variant resolution\r\n    if (this.config.autoUiVariantResolve) {\r\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceLoaded, resolveUiVariant);\r\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceUnloaded, resolveUiVariant);\r\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Play, resolveUiVariant);\r\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Paused, resolveUiVariant);\r\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdStarted, resolveUiVariant);\r\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdBreakFinished, resolveUiVariant);\r\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.PlayerResized, resolveUiVariant);\r\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.ViewModeChanged, resolveUiVariant);\r\n    }\r\n\r\n    this.focusVisibilityTracker = new FocusVisibilityTracker('{{PREFIX}}');\r\n\r\n    // Initialize the UI\r\n    resolveUiVariant(null);\r\n  }\r\n\r\n  /**\r\n   * Exposes i18n.getLocalizer() function\r\n   * @returns {I18nApi.getLocalizer()}\r\n   */\r\n  static localize<V extends CustomVocabulary<Record<string, string>>>(key: keyof V) {\r\n    return i18n.getLocalizer(key);\r\n  }\r\n\r\n  /**\r\n   * Provide configuration to support Custom UI languages\r\n   * default language: 'en'\r\n   */\r\n  static setLocalizationConfig(localizationConfig: LocalizationConfig) {\r\n    i18n.setConfig(localizationConfig);\r\n  }\r\n\r\n  getConfig(): UIConfig {\r\n    return this.config;\r\n  }\r\n\r\n  /**\r\n   * Returns the list of UI variants as passed into the constructor of {@link UIManager}.\r\n   * @returns {UIVariant[]} the list of available UI variants\r\n   */\r\n  getUiVariants(): UIVariant[] {\r\n    return this.uiVariants;\r\n  }\r\n\r\n  /**\r\n   * Switches to a UI variant from the list returned by {@link getUiVariants}.\r\n   * @param {UIVariant} uiVariant the UI variant to switch to\r\n   * @param {() => void} onShow a callback that is executed just before the new UI variant is shown\r\n   */\r\n  switchToUiVariant(uiVariant: UIVariant, onShow?: () => void): void {\r\n    let uiVariantIndex = this.uiVariants.indexOf(uiVariant);\r\n\r\n    const nextUi: InternalUIInstanceManager = this.uiInstanceManagers[uiVariantIndex];\r\n    let uiVariantChanged = false;\r\n\r\n    // Determine if the UI variant is changing\r\n    if (nextUi !== this.currentUi) {\r\n      uiVariantChanged = true;\r\n      // console.log('switched from ', this.currentUi ? this.currentUi.getUI() : 'none',\r\n      //   ' to ', nextUi ? nextUi.getUI() : 'none');\r\n    }\r\n\r\n    // Only if the UI variant is changing, we need to do some stuff. Else we just leave everything as-is.\r\n    if (uiVariantChanged) {\r\n      // Hide the currently active UI variant\r\n      if (this.currentUi) {\r\n        this.currentUi.getUI().hide();\r\n      }\r\n\r\n      // Assign the new UI variant as current UI\r\n      this.currentUi = nextUi;\r\n\r\n      // When we switch to a different UI instance, there's some additional stuff to manage. If we do not switch\r\n      // to an instance, we're done here.\r\n      if (this.currentUi != null) {\r\n        // Add the UI to the DOM (and configure it) the first time it is selected\r\n        if (!this.currentUi.isConfigured()) {\r\n          this.addUi(this.currentUi);\r\n        }\r\n\r\n        if (onShow) {\r\n          onShow();\r\n        }\r\n\r\n        this.currentUi.getUI().show();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Triggers a UI variant switch as triggered by events when automatic switching is enabled. It allows to overwrite\r\n   * properties of the {@link UIConditionContext}.\r\n   * @param {Partial<UIConditionContext>} context an optional set of properties that overwrite properties of the\r\n   *   automatically determined context\r\n   * @param {(context: UIConditionContext) => void} onShow a callback that is executed just before the new UI variant\r\n   *   is shown (if a switch is happening)\r\n   */\r\n  resolveUiVariant(context: Partial<UIConditionContext> = {}, onShow?: (context: UIConditionContext) => void): void {\r\n    // Determine the current context for which the UI variant will be resolved\r\n    const defaultContext: UIConditionContext = {\r\n      isAd: false,\r\n      adRequiresUi: false,\r\n      isFullscreen: this.player.getViewMode() === this.player.exports.ViewMode.Fullscreen,\r\n      isMobile: BrowserUtils.isMobile,\r\n      isPlaying: this.player.isPlaying(),\r\n      width: this.uiContainerElement.width(),\r\n      documentWidth: document.body.clientWidth,\r\n    };\r\n\r\n    // Overwrite properties of the default context with passed in context properties\r\n    const switchingContext = { ...defaultContext, ...context };\r\n\r\n    // Fire the event and allow modification of the context before it is used to resolve the UI variant\r\n    this.events.onUiVariantResolve.dispatch(this, switchingContext);\r\n\r\n    let nextUiVariant: UIVariant = null;\r\n\r\n    // Select new UI variant\r\n    // If no variant condition is fulfilled, we switch to *no* UI\r\n    for (let uiVariant of this.uiVariants) {\r\n      if (uiVariant.condition == null || uiVariant.condition(switchingContext) === true) {\r\n        nextUiVariant = uiVariant;\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.switchToUiVariant(nextUiVariant, () => {\r\n      if (onShow) {\r\n        onShow(switchingContext);\r\n      }\r\n    });\r\n  }\r\n\r\n  private addUi(ui: InternalUIInstanceManager): void {\r\n    let dom = ui.getUI().getDomElement();\r\n    let player = ui.getWrappedPlayer();\r\n\r\n    ui.configureControls();\r\n    /* Append the UI DOM after configuration to avoid CSS transitions at initialization\r\n     * Example: Components are hidden during configuration and these hides may trigger CSS transitions that are\r\n     * undesirable at this time. */\r\n    this.uiContainerElement.append(dom);\r\n\r\n    // When the UI is loaded after a source was loaded, we need to tell the components to initialize themselves\r\n    if (player.getSource()) {\r\n      this.config.events.onUpdated.dispatch(this);\r\n    }\r\n\r\n    // Fire onConfigured after UI DOM elements are successfully added. When fired immediately, the DOM elements\r\n    // might not be fully configured and e.g. do not have a size.\r\n    // https://swizec.com/blog/how-to-properly-wait-for-dom-elements-to-show-up-in-modern-browsers/swizec/6663\r\n    if (window.requestAnimationFrame) {\r\n      requestAnimationFrame(() => { ui.onConfigured.dispatch(ui.getUI()); });\r\n    } else {\r\n      // IE9 fallback\r\n      setTimeout(() => { ui.onConfigured.dispatch(ui.getUI()); }, 0);\r\n    }\r\n  }\r\n\r\n  private releaseUi(ui: InternalUIInstanceManager): void {\r\n    ui.releaseControls();\r\n    ui.getUI().getDomElement().remove();\r\n    ui.clearEventHandlers();\r\n  }\r\n\r\n  release(): void {\r\n    for (let uiInstanceManager of this.uiInstanceManagers) {\r\n      this.releaseUi(uiInstanceManager);\r\n    }\r\n    this.managerPlayerWrapper.clearEventHandlers();\r\n    this.focusVisibilityTracker.release();\r\n  }\r\n\r\n  /**\r\n   * Fires just before UI variants are about to be resolved and the UI variant is possibly switched. It is fired when\r\n   * the switch is triggered from an automatic switch and when calling {@link resolveUiVariant}.\r\n   * Can be used to modify the {@link UIConditionContext} before resolving is done.\r\n   * @returns {EventDispatcher<UIManager, UIConditionContext>}\r\n   */\r\n  get onUiVariantResolve(): EventDispatcher<UIManager, UIConditionContext> {\r\n    return this.events.onUiVariantResolve;\r\n  }\r\n\r\n  /**\r\n   * Returns the list of all added markers in undefined order.\r\n   */\r\n  getTimelineMarkers(): TimelineMarker[] {\r\n    return this.config.metadata.markers;\r\n  }\r\n\r\n  /**\r\n   * Adds a marker to the timeline. Does not check for duplicates/overlaps at the `time`.\r\n   */\r\n  addTimelineMarker(timelineMarker: TimelineMarker): void {\r\n    this.config.metadata.markers.push(timelineMarker);\r\n    this.config.events.onUpdated.dispatch(this);\r\n  }\r\n\r\n  /**\r\n   * Removes a marker from the timeline (by reference) and returns `true` if the marker has\r\n   * been part of the timeline and successfully removed, or `false` if the marker could not\r\n   * be found and thus not removed.\r\n   */\r\n  removeTimelineMarker(timelineMarker: TimelineMarker): boolean {\r\n    if (ArrayUtils.remove(this.config.metadata.markers, timelineMarker) === timelineMarker) {\r\n      this.config.events.onUpdated.dispatch(this);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nexport interface SeekPreviewArgs extends NoArgs {\r\n  /**\r\n   * The timeline position in percent where the event originates from.\r\n   */\r\n  position: number;\r\n  /**\r\n   * The timeline marker associated with the current position, if existing.\r\n   */\r\n  marker?: SeekBarMarker;\r\n}\r\n\r\n/**\r\n * Encapsulates functionality to manage a UI instance. Used by the {@link UIManager} to manage multiple UI instances.\r\n */\r\nexport class UIInstanceManager {\r\n  private playerWrapper: PlayerWrapper;\r\n  private ui: UIContainer;\r\n  private config: InternalUIConfig;\r\n\r\n  private events = {\r\n    onConfigured: new EventDispatcher<UIContainer, NoArgs>(),\r\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\r\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewArgs>(),\r\n    onSeeked: new EventDispatcher<SeekBar, NoArgs>(),\r\n    onComponentShow: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\r\n    onComponentHide: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\r\n    onControlsShow: new EventDispatcher<UIContainer, NoArgs>(),\r\n    onPreviewControlsHide: new EventDispatcher<UIContainer, CancelEventArgs>(),\r\n    onControlsHide: new EventDispatcher<UIContainer, NoArgs>(),\r\n    onRelease: new EventDispatcher<UIContainer, NoArgs>(),\r\n  };\r\n\r\n  constructor(player: PlayerAPI, ui: UIContainer, config: InternalUIConfig) {\r\n    this.playerWrapper = new PlayerWrapper(player);\r\n    this.ui = ui;\r\n    this.config = config;\r\n  }\r\n\r\n  getConfig(): InternalUIConfig {\r\n    return this.config;\r\n  }\r\n\r\n  getUI(): UIContainer {\r\n    return this.ui;\r\n  }\r\n\r\n  getPlayer(): PlayerAPI {\r\n    return this.playerWrapper.getPlayer();\r\n  }\r\n\r\n  /**\r\n   * Fires when the UI is fully configured and added to the DOM.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onConfigured(): EventDispatcher<UIContainer, NoArgs> {\r\n    return this.events.onConfigured;\r\n  }\r\n\r\n  /**\r\n   * Fires when a seek starts.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onSeek(): EventDispatcher<SeekBar, NoArgs> {\r\n    return this.events.onSeek;\r\n  }\r\n\r\n  /**\r\n   * Fires when the seek timeline is scrubbed.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onSeekPreview(): EventDispatcher<SeekBar, SeekPreviewArgs> {\r\n    return this.events.onSeekPreview;\r\n  }\r\n\r\n  /**\r\n   * Fires when a seek is finished.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onSeeked(): EventDispatcher<SeekBar, NoArgs> {\r\n    return this.events.onSeeked;\r\n  }\r\n\r\n  /**\r\n   * Fires when a component is showing.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onComponentShow(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\r\n    return this.events.onComponentShow;\r\n  }\r\n\r\n  /**\r\n   * Fires when a component is hiding.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onComponentHide(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\r\n    return this.events.onComponentHide;\r\n  }\r\n\r\n  /**\r\n   * Fires when the UI controls are showing.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onControlsShow(): EventDispatcher<UIContainer, NoArgs> {\r\n    return this.events.onControlsShow;\r\n  }\r\n\r\n  /**\r\n   * Fires before the UI controls are hiding to check if they are allowed to hide.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onPreviewControlsHide(): EventDispatcher<UIContainer, CancelEventArgs> {\r\n    return this.events.onPreviewControlsHide;\r\n  }\r\n\r\n  /**\r\n   * Fires when the UI controls are hiding.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onControlsHide(): EventDispatcher<UIContainer, NoArgs> {\r\n    return this.events.onControlsHide;\r\n  }\r\n\r\n  /**\r\n   * Fires when the UI controls are released.\r\n   * @returns {EventDispatcher}\r\n   */\r\n  get onRelease(): EventDispatcher<UIContainer, NoArgs> {\r\n    return this.events.onRelease;\r\n  }\r\n\r\n  protected clearEventHandlers(): void {\r\n    this.playerWrapper.clearEventHandlers();\r\n\r\n    let events = <any>this.events; // avoid TS7017\r\n    for (let event in events) {\r\n      let dispatcher = <EventDispatcher<Object, Object>>events[event];\r\n      dispatcher.unsubscribeAll();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Extends the {@link UIInstanceManager} for internal use in the {@link UIManager} and provides access to functionality\r\n * that components receiving a reference to the {@link UIInstanceManager} should not have access to.\r\n */\r\nclass InternalUIInstanceManager extends UIInstanceManager {\r\n\r\n  private configured: boolean;\r\n  private released: boolean;\r\n\r\n  getWrappedPlayer(): WrappedPlayer {\r\n    // TODO find a non-hacky way to provide the WrappedPlayer to the UIManager without exporting it\r\n    // getPlayer() actually returns the WrappedPlayer but its return type is set to Player so the WrappedPlayer does\r\n    // not need to be exported\r\n    return <WrappedPlayer>this.getPlayer();\r\n  }\r\n\r\n  configureControls(): void {\r\n    this.configureControlsTree(this.getUI());\r\n    this.configured = true;\r\n  }\r\n\r\n  isConfigured(): boolean {\r\n    return this.configured;\r\n  }\r\n\r\n  private configureControlsTree(component: Component<ComponentConfig>) {\r\n    let configuredComponents: Component<ComponentConfig>[] = [];\r\n\r\n    UIUtils.traverseTree(component, (component) => {\r\n      // First, check if we have already configured a component, and throw an error if we did. Multiple configuration\r\n      // of the same component leads to unexpected UI behavior. Also, a component that is in the UI tree multiple\r\n      // times hints at a wrong UI structure.\r\n      // We could just skip configuration in such a case and not throw an exception, but enforcing a clean UI tree\r\n      // seems like the better choice.\r\n      for (let configuredComponent of configuredComponents) {\r\n        if (configuredComponent === component) {\r\n          // Write the component to the console to simplify identification of the culprit\r\n          // (e.g. by inspecting the config)\r\n          if (console) {\r\n            console.error('Circular reference in UI tree', component);\r\n          }\r\n\r\n          // Additionally throw an error, because this case must not happen and leads to unexpected UI behavior.\r\n          throw Error('Circular reference in UI tree: ' + component.constructor.name);\r\n        }\r\n      }\r\n\r\n      component.initialize();\r\n      component.configure(this.getPlayer(), this);\r\n      configuredComponents.push(component);\r\n    });\r\n  }\r\n\r\n  releaseControls(): void {\r\n    // Do not call release methods if the components have never been configured; this can result in exceptions\r\n    if (this.configured) {\r\n      this.onRelease.dispatch(this.getUI());\r\n      this.releaseControlsTree(this.getUI());\r\n      this.configured = false;\r\n    }\r\n    this.released = true;\r\n  }\r\n\r\n  isReleased(): boolean {\r\n    return this.released;\r\n  }\r\n\r\n  private releaseControlsTree(component: Component<ComponentConfig>) {\r\n    component.release();\r\n\r\n    if (component instanceof Container) {\r\n      for (let childComponent of component.getComponents()) {\r\n        this.releaseControlsTree(childComponent);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearEventHandlers(): void {\r\n    super.clearEventHandlers();\r\n  }\r\n}\r\n\r\n/**\r\n * Extended interface of the {@link Player} for use in the UI.\r\n */\r\nexport interface WrappedPlayer extends PlayerAPI {\r\n  /**\r\n   * Fires an event on the player that targets all handlers in the UI but never enters the real player.\r\n   * @param event the event to fire\r\n   * @param data data to send with the event\r\n   */\r\n  fireEventInUI(event: PlayerEvent, data: {}): void;\r\n}\r\n\r\n/**\r\n * Wraps the player to track event handlers and provide a simple method to remove all registered event\r\n * handlers from the player.\r\n */\r\nexport class PlayerWrapper {\r\n\r\n  private player: PlayerAPI;\r\n  private wrapper: WrappedPlayer;\r\n\r\n  private eventHandlers: { [eventType: string]: PlayerEventCallback[]; } = {};\r\n\r\n  constructor(player: PlayerAPI) {\r\n    this.player = player;\r\n\r\n    // Collect all members of the player (public API methods and properties of the player)\r\n    const objectProtoPropertyNames = Object.getOwnPropertyNames(Object.getPrototypeOf({}));\r\n    const namesToIgnore = ['constructor', ...objectProtoPropertyNames];\r\n    const members = getAllPropertyNames(player).filter(name => namesToIgnore.indexOf(name) === -1);\r\n    // Split the members into methods and properties\r\n    let methods = <any[]>[];\r\n    let properties = <any[]>[];\r\n\r\n    for (let member of members) {\r\n      if (typeof (<any>player)[member] === 'function') {\r\n        methods.push(member);\r\n      } else {\r\n        properties.push(member);\r\n      }\r\n    }\r\n\r\n    // Create wrapper object\r\n    let wrapper = <any>{};\r\n\r\n    // Add function wrappers for all API methods that do nothing but calling the base method on the player\r\n    for (let method of methods) {\r\n      wrapper[method] = function() {\r\n        // console.log('called ' + member); // track method calls on the player\r\n        return (<any>player)[method].apply(player, arguments);\r\n      };\r\n    }\r\n\r\n    // Add all public properties of the player to the wrapper\r\n    for (let property of properties) {\r\n      // Get an eventually existing property descriptor to differentiate between plain properties and properties with\r\n      // getters/setters.\r\n      const propertyDescriptor = ((target: PlayerAPI) => {\r\n        while (target) {\r\n          const propertyDescriptor = Object.getOwnPropertyDescriptor(target, property);\r\n          if (propertyDescriptor) {\r\n            return propertyDescriptor;\r\n          }\r\n          // Check if the PropertyDescriptor exists on a child prototype in case we have an inheritance of the player\r\n          target = Object.getPrototypeOf(target);\r\n        }\r\n      })(player);\r\n\r\n      // If the property has getters/setters, wrap them accordingly...\r\n      if (propertyDescriptor && (propertyDescriptor.get || propertyDescriptor.set)) {\r\n        Object.defineProperty(wrapper, property, {\r\n          get: () => propertyDescriptor.get.call(player),\r\n          set: (value: any) => propertyDescriptor.set.call(player, value),\r\n        });\r\n      }\r\n      // ... else just transfer the property to the wrapper\r\n      else {\r\n        wrapper[property] = (<any>player)[property];\r\n      }\r\n    }\r\n\r\n    // Explicitly add a wrapper method for 'on' that adds added event handlers to the event list\r\n    wrapper.on = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\r\n      player.on(eventType, callback);\r\n\r\n      if (!this.eventHandlers[eventType]) {\r\n        this.eventHandlers[eventType] = [];\r\n      }\r\n\r\n      this.eventHandlers[eventType].push(callback);\r\n\r\n      return wrapper;\r\n    };\r\n\r\n    // Explicitly add a wrapper method for 'off' that removes removed event handlers from the event list\r\n    wrapper.off = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\r\n      player.off(eventType, callback);\r\n\r\n      if (this.eventHandlers[eventType]) {\r\n        ArrayUtils.remove(this.eventHandlers[eventType], callback);\r\n      }\r\n\r\n      return wrapper;\r\n    };\r\n\r\n    wrapper.fireEventInUI = (event: PlayerEvent, data: {}) => {\r\n      if (this.eventHandlers[event]) { // check if there are handlers for this event registered\r\n        // Extend the data object with default values to convert it to a {@link PlayerEventBase} object.\r\n        let playerEventData = <PlayerEventBase>Object.assign({}, {\r\n          timestamp: Date.now(),\r\n          type: event,\r\n          // Add a marker property so the UI can detect UI-internal player events\r\n          uiSourced: true,\r\n        }, data);\r\n\r\n        // Execute the registered callbacks\r\n        for (let callback of this.eventHandlers[event]) {\r\n          callback(playerEventData);\r\n        }\r\n      }\r\n    };\r\n\r\n    this.wrapper = <WrappedPlayer>wrapper;\r\n  }\r\n\r\n  /**\r\n   * Returns a wrapped player object that can be used on place of the normal player object.\r\n   * @returns {WrappedPlayer} a wrapped player\r\n   */\r\n  getPlayer(): WrappedPlayer {\r\n    return this.wrapper;\r\n  }\r\n\r\n  /**\r\n   * Clears all registered event handlers from the player that were added through the wrapped player.\r\n   */\r\n  clearEventHandlers(): void {\r\n    try {\r\n      // Call the player API to check if the instance is still valid or already destroyed.\r\n      // This can be any call throwing the PlayerAPINotAvailableError when the player instance is destroyed.\r\n      this.player.getSource();\r\n    } catch (error) {\r\n      if (error instanceof this.player.exports.PlayerAPINotAvailableError) {\r\n        // We have detected that the player instance is already destroyed, so we clear the event handlers to avoid\r\n        // event handler unsubscription attempts (which would result in PlayerAPINotAvailableError errors).\r\n        this.eventHandlers = {};\r\n      }\r\n    }\r\n\r\n    for (let eventType in this.eventHandlers) {\r\n      for (let callback of this.eventHandlers[eventType]) {\r\n        this.player.off(eventType as PlayerEvent, callback);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getAllPropertyNames(target: Object): string[] {\r\n  let names: string[] = [];\r\n\r\n  while (target) {\r\n    const newNames = Object.getOwnPropertyNames(target).filter(name => names.indexOf(name) === -1);\r\n    names = names.concat(newNames);\r\n    // go up prototype chain\r\n    target = Object.getPrototypeOf(target);\r\n  }\r\n\r\n  return names;\r\n}\r\n","import {Component, ComponentConfig} from './components/component';\r\nimport {Container} from './components/container';\r\n\r\nexport namespace UIUtils {\r\n  export interface TreeTraversalCallback {\r\n    (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>): void;\r\n  }\r\n\r\n  export function traverseTree(component: Component<ComponentConfig>, visit: TreeTraversalCallback): void {\r\n    let recursiveTreeWalker = (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>) => {\r\n      visit(component, parent);\r\n\r\n      // If the current component is a container, visit it's children\r\n      if (component instanceof Container) {\r\n        for (let childComponent of component.getComponents()) {\r\n          recursiveTreeWalker(childComponent, component);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Walk and configure the component tree\r\n    recursiveTreeWalker(component);\r\n  }\r\n\r\n  // From: https://github.com/nfriend/ts-keycode-enum/blob/master/Key.enum.ts\r\n  export enum KeyCode {\r\n    LeftArrow = 37,\r\n    UpArrow = 38,\r\n    RightArrow = 39,\r\n    DownArrow = 40,\r\n    Space = 32,\r\n    End = 35,\r\n    Home = 36,\r\n  }\r\n}\r\n","import { Event, EventDispatcher } from './eventdispatcher';\r\nimport { PlayerAPI } from 'bitmovin-player';\r\n\r\nexport interface VolumeSettingChangedArgs {\r\n  volume: number;\r\n  muted: boolean;\r\n}\r\n\r\n/**\r\n * Can be used to centrally manage and control the volume and mute state of the player from multiple components.\r\n */\r\nexport class VolumeController {\r\n\r\n  private static readonly issuerName = 'ui-volumecontroller';\r\n\r\n  private readonly events = {\r\n    onChanged: new EventDispatcher<VolumeController, VolumeSettingChangedArgs>(),\r\n  };\r\n\r\n  private storedVolume: number;\r\n\r\n  constructor(private readonly player: PlayerAPI) {\r\n    this.storeVolume();\r\n\r\n    const handler = () => {\r\n      this.onChangedEvent();\r\n    };\r\n\r\n    player.on(player.exports.PlayerEvent.SourceLoaded, handler);\r\n    player.on(player.exports.PlayerEvent.VolumeChanged, handler);\r\n    player.on(player.exports.PlayerEvent.Muted, handler);\r\n    player.on(player.exports.PlayerEvent.Unmuted, handler);\r\n  }\r\n\r\n  setVolume(volume: number): void {\r\n    this.player.setVolume(volume, VolumeController.issuerName);\r\n  }\r\n\r\n  getVolume(): number {\r\n    return this.player.getVolume();\r\n  }\r\n\r\n  setMuted(muted: boolean): void {\r\n    if (muted) {\r\n      this.player.mute(VolumeController.issuerName);\r\n    } else {\r\n      this.player.unmute(VolumeController.issuerName);\r\n    }\r\n  }\r\n\r\n  toggleMuted(): void {\r\n    if (this.isMuted() || this.getVolume() === 0) {\r\n      // Unmuting from the mute or zero-volume state recalls the previously saved volume setting. Setting the\r\n      // volume automatically unmutes the player in v7.\r\n      this.recallVolume();\r\n    } else {\r\n      this.setMuted(true);\r\n    }\r\n  }\r\n\r\n  isMuted(): boolean {\r\n    return this.player.isMuted();\r\n  }\r\n\r\n  /**\r\n   * Stores (saves) the current volume so it can later be restored with {@link recallVolume}.\r\n   */\r\n  storeVolume(): void {\r\n    this.storedVolume = this.getVolume();\r\n  }\r\n\r\n  /**\r\n   * Recalls (sets) the volume previously stored with {@link storeVolume}.\r\n   */\r\n  recallVolume(): void {\r\n    this.setMuted(this.storedVolume === 0);\r\n    this.setVolume(this.storedVolume);\r\n  }\r\n\r\n  startTransition(): VolumeTransition {\r\n    return new VolumeTransition(this);\r\n  }\r\n\r\n  onChangedEvent() {\r\n    const playerMuted = this.isMuted();\r\n    const playerVolume = this.getVolume();\r\n\r\n    const uiMuted = playerMuted || playerVolume === 0;\r\n    const uiVolume = playerMuted ? 0 : playerVolume;\r\n\r\n    this.events.onChanged.dispatch(this, { volume: uiVolume, muted: uiMuted });\r\n  }\r\n\r\n  /**\r\n   * Gets the event that is fired when the volume settings have changed.\r\n   */\r\n  get onChanged(): Event<VolumeController, VolumeSettingChangedArgs> {\r\n    return this.events.onChanged.getEvent();\r\n  }\r\n}\r\n\r\nexport class VolumeTransition {\r\n\r\n  constructor(private controller: VolumeController) {\r\n    // Store the volume at the beginning of a volume change so we can recall it later in case we set the volume to\r\n    // zero and actually mute the player.\r\n    controller.storeVolume();\r\n  }\r\n\r\n  update(volume: number): void {\r\n    // Update the volume while transitioning so the user has a \"live preview\" of the desired target volume\r\n    this.controller.setMuted(false);\r\n    this.controller.setVolume(volume);\r\n  }\r\n\r\n  finish(volume: number): void {\r\n    if (volume === 0) {\r\n      // When the volume is zero we essentially mute the volume so we recall the volume from the beginning of the\r\n      // transition and mute the player instead. Recalling is necessary to return to the actual audio volume\r\n      // when unmuting.\r\n      // We must first recall the volume and then mute, because recalling sets the volume on the player\r\n      // and setting a player volume > 0 unmutes the player in v7.\r\n      this.controller.recallVolume();\r\n      this.controller.setMuted(true);\r\n    } else {\r\n      this.controller.setMuted(false);\r\n      this.controller.setVolume(volume);\r\n      this.controller.storeVolume();\r\n    }\r\n  }\r\n}","import { SubtitleRegionContainer, SubtitleLabel } from './components/subtitleoverlay';\r\nimport { VTTProperties, VTTRegionProperties } from 'bitmovin-player/types/subtitles/vtt/API';\r\nimport { DOM, Size } from './dom';\r\n\r\n// Our default height of a line\r\nconst lineHeight = 28;\r\n\r\n// Default relative line height\r\nconst lineHeightPercent = 5;\r\nlet lineCount: number = 1;\r\n\r\nconst defaultLineNumber = 21; // Our default amount of lines\r\n\r\nenum Direction {\r\n  Top = 'top',\r\n  Bottom = 'bottom',\r\n  Left = 'left',\r\n  Right = 'right',\r\n}\r\n\r\nenum VttVerticalWriting {\r\n  GrowingRight = 'lr',\r\n  GrowingLeft = 'rl',\r\n}\r\n\r\ntype VerticalWritingDirection = Direction.Left | Direction.Right;\r\n\r\nconst DirectionPair = new Map<Direction, Direction>([\r\n  [Direction.Top, Direction.Bottom],\r\n  [Direction.Bottom, Direction.Top],\r\n  [Direction.Left, Direction.Right],\r\n  [Direction.Right, Direction.Left],\r\n]);\r\n\r\n/**\r\n * Sets the default standardized styles for the Cue Box\r\n * https://w3.org/TR/webvtt1/#applying-css-properties\r\n */\r\nconst setDefaultVttStyles = (cueContainerDom: DOM, vtt: VTTProperties) => {\r\n  if (vtt.region) {\r\n    cueContainerDom.css('position', 'relative');\r\n    cueContainerDom.css('unicode-bidi', 'plaintext');\r\n  } else {\r\n    cueContainerDom.css('position', 'absolute');\r\n    cueContainerDom.css('overflow-wrap', 'break-word');\r\n    cueContainerDom.css('overflow', 'hidden');\r\n    cueContainerDom.css('flex-flow', 'column');\r\n  }\r\n  cueContainerDom.css('display', 'inline-flex');\r\n};\r\n\r\n/**\r\n * Align the Cue Box's line\r\n * https://w3.org/TR/webvtt1/#webvtt-cue-line-alignment\r\n */\r\nconst setVttLineAlign = (\r\n  cueContainerDom: DOM,\r\n  { lineAlign }: VTTProperties,\r\n  direction: Direction,\r\n  relativeCueBoxPosition: number) => {\r\n  switch (lineAlign) {\r\n    case 'center':\r\n      setCssForCenterLineAlign(\r\n        cueContainerDom, direction, relativeCueBoxPosition);\r\n      break;\r\n    case 'end':\r\n      setCssForEndLineAlign(\r\n        cueContainerDom, direction, relativeCueBoxPosition);\r\n  }\r\n};\r\n\r\n/**\r\n * Defines the line positioning of the Cue Box\r\n * https://w3.org/TR/webvtt1/#webvtt-cue-line\r\n */\r\nconst setVttLine = (\r\n  cueContainerDom: DOM,\r\n  vtt: VTTProperties,\r\n  direction: Direction,\r\n  subtitleOverLaySize: Size,\r\n) => {\r\n  const overlayReferenceEdge = DirectionPair.get(direction);\r\n  if (vtt.line === 'auto' && vtt.vertical) {\r\n    cueContainerDom.css(overlayReferenceEdge, '0');\r\n    return;\r\n  }\r\n  if (vtt.line === 'auto' && !vtt.vertical) {\r\n    return;\r\n  }\r\n\r\n  let relativeLinePosition = parseFloat(vtt.line as string);\r\n\r\n  if (vtt.snapToLines) {\r\n    let targetLine = Number(vtt.line);\r\n    if (targetLine < 0) {\r\n      targetLine = defaultLineNumber + targetLine;\r\n    }\r\n\r\n    const lineHeight = subtitleOverLaySize.height / defaultLineNumber;\r\n    const absoluteLinePosition = lineHeight * targetLine;\r\n    relativeLinePosition = (100 * absoluteLinePosition) / subtitleOverLaySize.height;\r\n  }\r\n\r\n  if (vtt.lineAlign !== 'end')\r\n    cueContainerDom.css(\r\n      overlayReferenceEdge, `${relativeLinePosition}%`);\r\n  setVttLineAlign(cueContainerDom, vtt, direction, relativeLinePosition);\r\n};\r\n\r\n/**\r\n * Defines the writing direction of the Cue Box\r\n * https://w3.org/TR/webvtt1/#webvtt-cue-writing-direction\r\n */\r\nconst setVttWritingDirectionAndCueBoxPositioning = (\r\n  cueContainerDom: DOM, vtt: VTTProperties,\r\n  subtitleOverlaySize: Size,\r\n) => {\r\n  switch (vtt.vertical) {\r\n  case '':\r\n    cueContainerDom.css('writing-mode', 'horizontal-tb');\r\n    cueContainerDom.css(Direction.Bottom, '0');\r\n    setVttLine(cueContainerDom, vtt, Direction.Bottom, subtitleOverlaySize);\r\n    break;\r\n  case VttVerticalWriting.GrowingRight:\r\n    setCueBoxPositionForVerticalWriting(\r\n      cueContainerDom, Direction.Right, vtt, subtitleOverlaySize);\r\n    break;\r\n  case VttVerticalWriting.GrowingLeft:\r\n    setCueBoxPositionForVerticalWriting(\r\n      cueContainerDom, Direction.Left, vtt, subtitleOverlaySize);\r\n    break;\r\n  }\r\n};\r\n\r\nconst setCueBoxPositionForVerticalWriting = (\r\n  cueContainerDom: DOM,\r\n  direction: VerticalWritingDirection,\r\n  vtt: VTTProperties,\r\n  subtitleOverlaySize: Size,\r\n) => {\r\n    const writingMode = direction === Direction.Right ?\r\n      'vertical-lr' : 'vertical-rl';\r\n\r\n    cueContainerDom.css('writing-mode', writingMode);\r\n    cueContainerDom.css(Direction.Top, '0');\r\n    setVttLine(cueContainerDom, vtt, direction, subtitleOverlaySize);\r\n};\r\n\r\n/**\r\n * Defines the Cue position alignment\r\n * https://w3.org/TR/webvtt1/#webvtt-cue-position-alignment\r\n */\r\nconst setVttPositionAlign = (cueContainerDom: DOM, vtt: VTTProperties, direction: Direction) => {\r\n  // https://www.w3.org/TR/webvtt1/#webvtt-cue-position\r\n  if (vtt.position === 'auto') {\r\n    cueContainerDom.css(direction, '0');\r\n  } else {\r\n    switch (vtt.positionAlign) {\r\n      case 'line-left':\r\n        cueContainerDom.css(direction, `${vtt.position}%`);\r\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\r\n        cueContainerDom.css('justify-content', 'flex-start');\r\n        break;\r\n      case 'center':\r\n        cueContainerDom.css(direction, `${vtt.position - vtt.size / 2}%`);\r\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\r\n        cueContainerDom.css('justify-content', 'center');\r\n        break;\r\n      case 'line-right':\r\n        cueContainerDom.css(direction, 'auto');\r\n        cueContainerDom.css(DirectionPair.get(direction), `${100 - vtt.position}%`);\r\n        cueContainerDom.css('justify-content', 'flex-end');\r\n        break;\r\n      default:\r\n        cueContainerDom.css(direction, `${vtt.position}%`);\r\n        cueContainerDom.css('justify-content', 'flex-start');\r\n    }\r\n  }\r\n};\r\n\r\nconst countLines = (innerHtml: string) =>\r\n  innerHtml.split('<br />').length;\r\n\r\nconst setCssForCenterLineAlign = (\r\n  cueContainerDom: DOM,\r\n  direction: Direction,\r\n  relativeCueBoxPosition: number) => {\r\n  switch (direction) {\r\n    case Direction.Bottom:\r\n      cueContainerDom.css('transform', 'translateY(-50%)');\r\n      break;\r\n    case Direction.Left:\r\n      cueContainerDom.css('transform', 'translateX(50%)');\r\n      break;\r\n    case Direction.Right:\r\n      cueContainerDom.css('transform', 'translateX(-50%)');\r\n      break;\r\n  }\r\n};\r\n\r\nconst setCssForEndLineAlign = (\r\n  cueContainerDom: DOM,\r\n  direction: Direction,\r\n  offset: number) => {\r\n      const opositeToOverlayReferenceEdge = direction;\r\n      cueContainerDom.css(opositeToOverlayReferenceEdge, `${100 - offset}%`);\r\n};\r\n\r\nexport namespace VttUtils {\r\n  export const setVttCueBoxStyles = (\r\n    cueContainer: SubtitleLabel,\r\n    subtitleOverlaySize: Size,\r\n  ) => {\r\n    const vtt = cueContainer.vtt;\r\n    const cueContainerDom = cueContainer.getDomElement();\r\n\r\n\r\n    setDefaultVttStyles(cueContainerDom, vtt);\r\n\r\n    lineCount = countLines(cueContainer.getText());\r\n    setVttWritingDirectionAndCueBoxPositioning(cueContainerDom, vtt, subtitleOverlaySize);\r\n\r\n    // https://w3.org/TR/webvtt1/#webvtt-cue-text-alignment\r\n    const textAlign = vtt.align === 'middle' ? 'center' : vtt.align;\r\n    cueContainerDom.css('text-align', textAlign);\r\n\r\n    // https://w3.org/TR/webvtt1/#webvtt-cue-size\r\n    const containerSize = vtt.size;\r\n    if (vtt.vertical === '') {\r\n      cueContainerDom.css('width', `${containerSize}%`);\r\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Left);\r\n    } else {\r\n      cueContainerDom.css('height', `${containerSize}%`);\r\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Top);\r\n    }\r\n  };\r\n\r\n  /** https://www.w3.org/TR/webvtt1/#regions\r\n   *  https://www.speechpad.com/captions/webvtt#toc_16\r\n   */\r\n  export const setVttRegionStyles = (\r\n    regionContainer: SubtitleRegionContainer,\r\n    region: VTTRegionProperties,\r\n    overlaySize: Size,\r\n  ) => {\r\n    const regionContainerDom = regionContainer.getDomElement();\r\n    const regionPositionX = overlaySize.width * region.viewportAnchorX / 100 - ((overlaySize.width * region.width / 100) * region.regionAnchorX / 100);\r\n    const regionPositionY = overlaySize.height * region.viewportAnchorY / 100 - ((region.lines * lineHeight) * region.regionAnchorY / 100);\r\n    regionContainerDom.css('position', 'absolute');\r\n    regionContainerDom.css('overflow', 'hidden');\r\n    regionContainerDom.css('width', `${region.width}%`);\r\n    regionContainerDom.css(Direction.Left, `${regionPositionX}px`);\r\n    regionContainerDom.css(Direction.Right, 'unset');\r\n    regionContainerDom.css(Direction.Top, `${regionPositionY}px`);\r\n    regionContainerDom.css(Direction.Bottom, 'unset');\r\n    regionContainerDom.css('height', `${region.lines * lineHeight}px`);\r\n  };\r\n}\r\n"]}